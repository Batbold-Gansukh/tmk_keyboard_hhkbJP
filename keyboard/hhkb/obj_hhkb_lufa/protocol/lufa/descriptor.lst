   1               		.file	"descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB99:
  15               		.file 1 "../../protocol/lufa/descriptor.c"
   1:../../protocol/lufa/descriptor.c **** /* 
   2:../../protocol/lufa/descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:../../protocol/lufa/descriptor.c ****  * This file is based on:
   4:../../protocol/lufa/descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:../../protocol/lufa/descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:../../protocol/lufa/descriptor.c ****  */
   7:../../protocol/lufa/descriptor.c **** 
   8:../../protocol/lufa/descriptor.c **** /*
   9:../../protocol/lufa/descriptor.c ****              LUFA Library
  10:../../protocol/lufa/descriptor.c ****      Copyright (C) Dean Camera, 2012.
  11:../../protocol/lufa/descriptor.c **** 
  12:../../protocol/lufa/descriptor.c ****   dean [at] fourwalledcubicle [dot] com
  13:../../protocol/lufa/descriptor.c ****            www.lufa-lib.org
  14:../../protocol/lufa/descriptor.c **** */
  15:../../protocol/lufa/descriptor.c **** 
  16:../../protocol/lufa/descriptor.c **** /*
  17:../../protocol/lufa/descriptor.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:../../protocol/lufa/descriptor.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:../../protocol/lufa/descriptor.c **** 
  20:../../protocol/lufa/descriptor.c ****   Permission to use, copy, modify, distribute, and sell this
  21:../../protocol/lufa/descriptor.c ****   software and its documentation for any purpose is hereby granted
  22:../../protocol/lufa/descriptor.c ****   without fee, provided that the above copyright notice appear in
  23:../../protocol/lufa/descriptor.c ****   all copies and that both that the copyright notice and this
  24:../../protocol/lufa/descriptor.c ****   permission notice and warranty disclaimer appear in supporting
  25:../../protocol/lufa/descriptor.c ****   documentation, and that the name of the author not be used in
  26:../../protocol/lufa/descriptor.c ****   advertising or publicity pertaining to distribution of the
  27:../../protocol/lufa/descriptor.c ****   software without specific, written prior permission.
  28:../../protocol/lufa/descriptor.c **** 
  29:../../protocol/lufa/descriptor.c ****   The author disclaim all warranties with regard to this
  30:../../protocol/lufa/descriptor.c ****   software, including all implied warranties of merchantability
  31:../../protocol/lufa/descriptor.c ****   and fitness.  In no event shall the author be liable for any
  32:../../protocol/lufa/descriptor.c ****   special, indirect or consequential damages or any damages
  33:../../protocol/lufa/descriptor.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:../../protocol/lufa/descriptor.c ****   in an action of contract, negligence or other tortious action,
  35:../../protocol/lufa/descriptor.c ****   arising out of or in connection with the use or performance of
  36:../../protocol/lufa/descriptor.c ****   this software.
  37:../../protocol/lufa/descriptor.c **** */
  38:../../protocol/lufa/descriptor.c **** 
  39:../../protocol/lufa/descriptor.c **** #include "util.h"
  40:../../protocol/lufa/descriptor.c **** #include "report.h"
  41:../../protocol/lufa/descriptor.c **** #include "descriptor.h"
  42:../../protocol/lufa/descriptor.c **** 
  43:../../protocol/lufa/descriptor.c **** 
  44:../../protocol/lufa/descriptor.c **** /*******************************************************************************
  45:../../protocol/lufa/descriptor.c ****  * HID Report Descriptors
  46:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
  47:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] =
  48:../../protocol/lufa/descriptor.c **** {
  49:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  50:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
  51:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  52:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
  53:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
  54:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
  55:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  56:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  57:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  58:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  59:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  60:../../protocol/lufa/descriptor.c **** 
  61:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  62:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  63:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),  /* reserved */
  64:../../protocol/lufa/descriptor.c **** 
  65:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
  66:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
  67:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
  68:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  69:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  70:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  71:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  72:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  73:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  74:../../protocol/lufa/descriptor.c **** 
  75:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Keyboard */
  76:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Reserved (no event indicated) */
  77:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF), /* Keyboard Application */
  78:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  79:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0xFF),
  80:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  81:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  82:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  83:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
  84:../../protocol/lufa/descriptor.c **** };
  85:../../protocol/lufa/descriptor.c **** 
  86:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
  87:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] =
  88:../../protocol/lufa/descriptor.c **** {
  89:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  90:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x02), /* Mouse */
  91:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  92:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x01), /* Pointer */
  93:../../protocol/lufa/descriptor.c ****         HID_RI_COLLECTION(8, 0x00), /* Physical */
  94:../../protocol/lufa/descriptor.c **** 
  95:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09), /* Button */
  96:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01),  /* Button 1 */
  97:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05),  /* Button 5 */
  98:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
  99:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 100:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 101:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 102:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 103:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 104:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 105:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 106:../../protocol/lufa/descriptor.c **** 
 107:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 108:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x30), /* Usage X */
 109:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x31), /* Usage Y */
 110:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 111:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 112:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 113:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 114:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 115:../../protocol/lufa/descriptor.c **** 
 116:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x38), /* Wheel */
 117:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 118:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 119:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 120:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 121:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 122:../../protocol/lufa/descriptor.c **** 
 123:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 124:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(16, 0x0238), /* AC Pan (Horizontal wheel) */
 125:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 126:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 127:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 128:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 129:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 130:../../protocol/lufa/descriptor.c **** 
 131:../../protocol/lufa/descriptor.c ****         HID_RI_END_COLLECTION(0),
 132:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 133:../../protocol/lufa/descriptor.c **** };
 134:../../protocol/lufa/descriptor.c **** #endif
 135:../../protocol/lufa/descriptor.c **** 
 136:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 137:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ExtrakeyReport[] =
 138:../../protocol/lufa/descriptor.c **** {
 139:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 140:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x80), /* System Control */
 141:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 142:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 143:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 144:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00B7),
 145:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), /* System Power Down */
 146:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x00B7), /* System Display LCD Autoscale */
 147:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 148:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 149:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 150:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 151:../../protocol/lufa/descriptor.c **** 
 152:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 153:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x01), /* Consumer Control */
 154:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 155:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 156:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 157:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 158:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), /* +10 */
 159:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x029C), /* AC Distribute Vertically */
 160:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 161:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 162:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 163:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 164:../../protocol/lufa/descriptor.c **** };
 165:../../protocol/lufa/descriptor.c **** #endif
 166:../../protocol/lufa/descriptor.c **** 
 167:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 168:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] =
 169:../../protocol/lufa/descriptor.c **** {
 170:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), /* Vendor Page(PJRC Teensy compatible) */
 171:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x74), /* Vendor Usage(PJRC Teensy compatible) */
 172:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 173:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x75), /* Vendor Usage 0x75 */
 174:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 175:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0xFF),
 176:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 177:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 178:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 179:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x76), /* Vendor Usage 0x76 */
 180:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 181:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0xFF),
 182:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 183:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 184:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 185:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 186:../../protocol/lufa/descriptor.c **** };
 187:../../protocol/lufa/descriptor.c **** #endif
 188:../../protocol/lufa/descriptor.c **** 
 189:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 190:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM NKROReport[] =
 191:../../protocol/lufa/descriptor.c **** {
 192:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 193:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
 194:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 195:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 196:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
 197:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
 198:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 199:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 200:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 201:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 202:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 203:../../protocol/lufa/descriptor.c **** 
 204:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
 205:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
 206:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
 207:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 208:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 209:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 210:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 211:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 212:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 213:../../protocol/lufa/descriptor.c **** 
 214:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 215:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Keyboard 0 */
 216:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, (NKRO_EPSIZE-1)*8-1), /* Keyboard Right GUI */
 217:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 218:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 219:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, (NKRO_EPSIZE-1)*8),
 220:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 221:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 222:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 223:../../protocol/lufa/descriptor.c **** };
 224:../../protocol/lufa/descriptor.c **** #endif
 225:../../protocol/lufa/descriptor.c **** 
 226:../../protocol/lufa/descriptor.c **** /*******************************************************************************
 227:../../protocol/lufa/descriptor.c ****  * Device Descriptors
 228:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
 229:../../protocol/lufa/descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
 230:../../protocol/lufa/descriptor.c **** {
 231:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
 232:../../protocol/lufa/descriptor.c **** 
 233:../../protocol/lufa/descriptor.c ****     .USBSpecification       = VERSION_BCD(1,1,0),
 234:../../protocol/lufa/descriptor.c ****     .Class                  = USB_CSCP_NoDeviceClass,
 235:../../protocol/lufa/descriptor.c ****     .SubClass               = USB_CSCP_NoDeviceSubclass,
 236:../../protocol/lufa/descriptor.c ****     .Protocol               = USB_CSCP_NoDeviceProtocol,
 237:../../protocol/lufa/descriptor.c **** 
 238:../../protocol/lufa/descriptor.c ****     .Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
 239:../../protocol/lufa/descriptor.c **** 
 240:../../protocol/lufa/descriptor.c ****     /* specified in config.h */
 241:../../protocol/lufa/descriptor.c ****     .VendorID               = VENDOR_ID,
 242:../../protocol/lufa/descriptor.c ****     .ProductID              = PRODUCT_ID,
 243:../../protocol/lufa/descriptor.c ****     .ReleaseNumber          = DEVICE_VER,
 244:../../protocol/lufa/descriptor.c **** 
 245:../../protocol/lufa/descriptor.c ****     .ManufacturerStrIndex   = 0x01,
 246:../../protocol/lufa/descriptor.c ****     .ProductStrIndex        = 0x02,
 247:../../protocol/lufa/descriptor.c ****     .SerialNumStrIndex      = NO_DESCRIPTOR,
 248:../../protocol/lufa/descriptor.c **** 
 249:../../protocol/lufa/descriptor.c ****     .NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 250:../../protocol/lufa/descriptor.c **** };
 251:../../protocol/lufa/descriptor.c **** 
 252:../../protocol/lufa/descriptor.c **** /*******************************************************************************
 253:../../protocol/lufa/descriptor.c ****  * Configuration Descriptors
 254:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
 255:../../protocol/lufa/descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 256:../../protocol/lufa/descriptor.c **** {
 257:../../protocol/lufa/descriptor.c ****     .Config =
 258:../../protocol/lufa/descriptor.c ****         {
 259:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type
 260:../../protocol/lufa/descriptor.c **** 
 261:../../protocol/lufa/descriptor.c ****             .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 262:../../protocol/lufa/descriptor.c ****             .TotalInterfaces        = TOTAL_INTERFACES,
 263:../../protocol/lufa/descriptor.c **** 
 264:../../protocol/lufa/descriptor.c ****             .ConfigurationNumber    = 1,
 265:../../protocol/lufa/descriptor.c ****             .ConfigurationStrIndex  = NO_DESCRIPTOR,
 266:../../protocol/lufa/descriptor.c **** 
 267:../../protocol/lufa/descriptor.c ****             .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 268:../../protocol/lufa/descriptor.c **** 
 269:../../protocol/lufa/descriptor.c ****             .MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
 270:../../protocol/lufa/descriptor.c ****         },
 271:../../protocol/lufa/descriptor.c **** 
 272:../../protocol/lufa/descriptor.c ****     /*
 273:../../protocol/lufa/descriptor.c ****      * Keyboard
 274:../../protocol/lufa/descriptor.c ****      */
 275:../../protocol/lufa/descriptor.c ****     .Keyboard_Interface =
 276:../../protocol/lufa/descriptor.c ****         {
 277:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 278:../../protocol/lufa/descriptor.c **** 
 279:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = KEYBOARD_INTERFACE,
 280:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 281:../../protocol/lufa/descriptor.c **** 
 282:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 283:../../protocol/lufa/descriptor.c **** 
 284:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 285:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 286:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_KeyboardBootProtocol,
 287:../../protocol/lufa/descriptor.c **** 
 288:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 289:../../protocol/lufa/descriptor.c ****         },
 290:../../protocol/lufa/descriptor.c **** 
 291:../../protocol/lufa/descriptor.c ****     .Keyboard_HID =
 292:../../protocol/lufa/descriptor.c ****         {
 293:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 294:../../protocol/lufa/descriptor.c **** 
 295:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 296:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 297:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 298:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 299:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(KeyboardReport)
 300:../../protocol/lufa/descriptor.c ****         },
 301:../../protocol/lufa/descriptor.c **** 
 302:../../protocol/lufa/descriptor.c ****     .Keyboard_INEndpoint =
 303:../../protocol/lufa/descriptor.c ****         {
 304:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 305:../../protocol/lufa/descriptor.c **** 
 306:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 307:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 308:../../protocol/lufa/descriptor.c ****             .EndpointSize           = KEYBOARD_EPSIZE,
 309:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 310:../../protocol/lufa/descriptor.c ****         },
 311:../../protocol/lufa/descriptor.c **** 
 312:../../protocol/lufa/descriptor.c ****     /*
 313:../../protocol/lufa/descriptor.c ****      * Mouse
 314:../../protocol/lufa/descriptor.c ****      */
 315:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 316:../../protocol/lufa/descriptor.c ****     .Mouse_Interface =
 317:../../protocol/lufa/descriptor.c ****         {
 318:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 319:../../protocol/lufa/descriptor.c **** 
 320:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = MOUSE_INTERFACE,
 321:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 322:../../protocol/lufa/descriptor.c **** 
 323:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 324:../../protocol/lufa/descriptor.c **** 
 325:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 326:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 327:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_MouseBootProtocol,
 328:../../protocol/lufa/descriptor.c **** 
 329:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 330:../../protocol/lufa/descriptor.c ****         },
 331:../../protocol/lufa/descriptor.c **** 
 332:../../protocol/lufa/descriptor.c ****     .Mouse_HID =
 333:../../protocol/lufa/descriptor.c ****         {
 334:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 335:../../protocol/lufa/descriptor.c **** 
 336:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 337:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 338:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 339:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 340:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(MouseReport)
 341:../../protocol/lufa/descriptor.c ****         },
 342:../../protocol/lufa/descriptor.c **** 
 343:../../protocol/lufa/descriptor.c ****     .Mouse_INEndpoint =
 344:../../protocol/lufa/descriptor.c ****         {
 345:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 346:../../protocol/lufa/descriptor.c **** 
 347:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 348:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 349:../../protocol/lufa/descriptor.c ****             .EndpointSize           = MOUSE_EPSIZE,
 350:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 351:../../protocol/lufa/descriptor.c ****         },
 352:../../protocol/lufa/descriptor.c **** #endif
 353:../../protocol/lufa/descriptor.c **** 
 354:../../protocol/lufa/descriptor.c ****     /*
 355:../../protocol/lufa/descriptor.c ****      * Extra
 356:../../protocol/lufa/descriptor.c ****      */
 357:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 358:../../protocol/lufa/descriptor.c ****     .Extrakey_Interface =
 359:../../protocol/lufa/descriptor.c ****         {
 360:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 361:../../protocol/lufa/descriptor.c **** 
 362:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = EXTRAKEY_INTERFACE,
 363:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 364:../../protocol/lufa/descriptor.c **** 
 365:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 366:../../protocol/lufa/descriptor.c **** 
 367:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 368:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 369:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 370:../../protocol/lufa/descriptor.c **** 
 371:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 372:../../protocol/lufa/descriptor.c ****         },
 373:../../protocol/lufa/descriptor.c **** 
 374:../../protocol/lufa/descriptor.c ****     .Extrakey_HID =
 375:../../protocol/lufa/descriptor.c ****         {
 376:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 377:../../protocol/lufa/descriptor.c **** 
 378:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 379:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 380:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 381:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 382:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(ExtrakeyReport)
 383:../../protocol/lufa/descriptor.c ****         },
 384:../../protocol/lufa/descriptor.c **** 
 385:../../protocol/lufa/descriptor.c ****     .Extrakey_INEndpoint =
 386:../../protocol/lufa/descriptor.c ****         {
 387:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 388:../../protocol/lufa/descriptor.c **** 
 389:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | EXTRAKEY_IN_EPNUM),
 390:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 391:../../protocol/lufa/descriptor.c ****             .EndpointSize           = EXTRAKEY_EPSIZE,
 392:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 393:../../protocol/lufa/descriptor.c ****         },
 394:../../protocol/lufa/descriptor.c **** #endif
 395:../../protocol/lufa/descriptor.c **** 
 396:../../protocol/lufa/descriptor.c ****     /*
 397:../../protocol/lufa/descriptor.c ****      * Console
 398:../../protocol/lufa/descriptor.c ****      */
 399:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 400:../../protocol/lufa/descriptor.c ****     .Console_Interface =
 401:../../protocol/lufa/descriptor.c ****         {
 402:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 403:../../protocol/lufa/descriptor.c **** 
 404:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = CONSOLE_INTERFACE,
 405:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 406:../../protocol/lufa/descriptor.c **** 
 407:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 2,
 408:../../protocol/lufa/descriptor.c **** 
 409:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 410:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 411:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 412:../../protocol/lufa/descriptor.c **** 
 413:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 414:../../protocol/lufa/descriptor.c ****         },
 415:../../protocol/lufa/descriptor.c **** 
 416:../../protocol/lufa/descriptor.c ****     .Console_HID =
 417:../../protocol/lufa/descriptor.c ****         {
 418:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 419:../../protocol/lufa/descriptor.c **** 
 420:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 421:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 422:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 423:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 424:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(ConsoleReport)
 425:../../protocol/lufa/descriptor.c ****         },
 426:../../protocol/lufa/descriptor.c **** 
 427:../../protocol/lufa/descriptor.c ****     .Console_INEndpoint =
 428:../../protocol/lufa/descriptor.c ****         {
 429:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 430:../../protocol/lufa/descriptor.c **** 
 431:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 432:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 433:../../protocol/lufa/descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 434:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 435:../../protocol/lufa/descriptor.c ****         },
 436:../../protocol/lufa/descriptor.c **** 
 437:../../protocol/lufa/descriptor.c ****     .Console_OUTEndpoint =
 438:../../protocol/lufa/descriptor.c ****         {
 439:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 440:../../protocol/lufa/descriptor.c **** 
 441:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 442:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 443:../../protocol/lufa/descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 444:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 445:../../protocol/lufa/descriptor.c ****         },
 446:../../protocol/lufa/descriptor.c **** #endif
 447:../../protocol/lufa/descriptor.c **** 
 448:../../protocol/lufa/descriptor.c ****     /*
 449:../../protocol/lufa/descriptor.c ****      * NKRO
 450:../../protocol/lufa/descriptor.c ****      */
 451:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 452:../../protocol/lufa/descriptor.c ****     .NKRO_Interface =
 453:../../protocol/lufa/descriptor.c ****         {
 454:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 455:../../protocol/lufa/descriptor.c **** 
 456:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = NKRO_INTERFACE,
 457:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 458:../../protocol/lufa/descriptor.c **** 
 459:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 460:../../protocol/lufa/descriptor.c **** 
 461:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 462:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 463:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 464:../../protocol/lufa/descriptor.c **** 
 465:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 466:../../protocol/lufa/descriptor.c ****         },
 467:../../protocol/lufa/descriptor.c **** 
 468:../../protocol/lufa/descriptor.c ****     .NKRO_HID =
 469:../../protocol/lufa/descriptor.c ****         {
 470:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 471:../../protocol/lufa/descriptor.c **** 
 472:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 473:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 474:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 475:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 476:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(NKROReport)
 477:../../protocol/lufa/descriptor.c ****         },
 478:../../protocol/lufa/descriptor.c **** 
 479:../../protocol/lufa/descriptor.c ****     .NKRO_INEndpoint =
 480:../../protocol/lufa/descriptor.c ****         {
 481:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 482:../../protocol/lufa/descriptor.c **** 
 483:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | NKRO_IN_EPNUM),
 484:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 485:../../protocol/lufa/descriptor.c ****             .EndpointSize           = NKRO_EPSIZE,
 486:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 487:../../protocol/lufa/descriptor.c ****         },
 488:../../protocol/lufa/descriptor.c **** #endif
 489:../../protocol/lufa/descriptor.c **** };
 490:../../protocol/lufa/descriptor.c **** 
 491:../../protocol/lufa/descriptor.c **** 
 492:../../protocol/lufa/descriptor.c **** /*******************************************************************************
 493:../../protocol/lufa/descriptor.c ****  * String Descriptors
 494:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
 495:../../protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 496:../../protocol/lufa/descriptor.c **** {
 497:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 498:../../protocol/lufa/descriptor.c **** 
 499:../../protocol/lufa/descriptor.c ****     .UnicodeString          = {LANGUAGE_ID_ENG}
 500:../../protocol/lufa/descriptor.c **** };
 501:../../protocol/lufa/descriptor.c **** 
 502:../../protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 503:../../protocol/lufa/descriptor.c **** {
 504:../../protocol/lufa/descriptor.c ****     /* subtract 1 for null terminator */
 505:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(MANUFACTURER))-1), .Type = DTYPE_S
 506:../../protocol/lufa/descriptor.c **** 
 507:../../protocol/lufa/descriptor.c ****     .UnicodeString          = LSTR(MANUFACTURER)
 508:../../protocol/lufa/descriptor.c **** };
 509:../../protocol/lufa/descriptor.c **** 
 510:../../protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 511:../../protocol/lufa/descriptor.c **** {
 512:../../protocol/lufa/descriptor.c ****     /* subtract 1 for null terminator */
 513:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(PRODUCT))-1), .Type = DTYPE_String
 514:../../protocol/lufa/descriptor.c **** 
 515:../../protocol/lufa/descriptor.c ****     .UnicodeString          = LSTR(PRODUCT)
 516:../../protocol/lufa/descriptor.c **** };
 517:../../protocol/lufa/descriptor.c **** 
 518:../../protocol/lufa/descriptor.c **** 
 519:../../protocol/lufa/descriptor.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 520:../../protocol/lufa/descriptor.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 521:../../protocol/lufa/descriptor.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 522:../../protocol/lufa/descriptor.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 523:../../protocol/lufa/descriptor.c ****  *  USB host.
 524:../../protocol/lufa/descriptor.c ****  */
 525:../../protocol/lufa/descriptor.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 526:../../protocol/lufa/descriptor.c ****                                     const uint8_t wIndex,
 527:../../protocol/lufa/descriptor.c ****                                     const void** const DescriptorAddress)
 528:../../protocol/lufa/descriptor.c **** {
  16               		.loc 1 528 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 529:../../protocol/lufa/descriptor.c ****     const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 529 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 530:../../protocol/lufa/descriptor.c ****     const uint8_t  DescriptorIndex  = (wValue & 0xFF);
 531:../../protocol/lufa/descriptor.c **** 
 532:../../protocol/lufa/descriptor.c ****     const void* Address = NULL;
 533:../../protocol/lufa/descriptor.c ****     uint16_t    Size    = NO_DESCRIPTOR;
 534:../../protocol/lufa/descriptor.c **** 
 535:../../protocol/lufa/descriptor.c ****     switch (DescriptorType)
  26               		.loc 1 535 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 04F4      		brge .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F0      		breq .L5
  34 0012 2230      		cpi r18,2
  35 0014 3105      		cpc r19,__zero_reg__
  36 0016 01F0      		breq .+2
  37 0018 00C0      		rjmp .L15
  38               	.LVL1:
 536:../../protocol/lufa/descriptor.c ****     {
 537:../../protocol/lufa/descriptor.c ****         case DTYPE_Device:
 538:../../protocol/lufa/descriptor.c ****             Address = &DeviceDescriptor;
 539:../../protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 540:../../protocol/lufa/descriptor.c ****             break;
 541:../../protocol/lufa/descriptor.c ****         case DTYPE_Configuration:
 542:../../protocol/lufa/descriptor.c ****             Address = &ConfigurationDescriptor;
 543:../../protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  39               		.loc 1 543 0
  40 001a 8DE6      		ldi r24,lo8(109)
  41 001c 90E0      		ldi r25,0
  42               	.LVL2:
 542:../../protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  43               		.loc 1 542 0
  44 001e 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  45 0020 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 544:../../protocol/lufa/descriptor.c ****             break;
  46               		.loc 1 544 0
  47 0022 00C0      		rjmp .L2
  48               	.LVL3:
  49               	.L4:
 535:../../protocol/lufa/descriptor.c ****     {
  50               		.loc 1 535 0
  51 0024 2132      		cpi r18,33
  52 0026 3105      		cpc r19,__zero_reg__
  53 0028 01F0      		breq .L7
  54 002a 2232      		cpi r18,34
  55 002c 3105      		cpc r19,__zero_reg__
  56 002e 01F0      		breq .L8
  57 0030 00C0      		rjmp .L15
  58               	.L5:
 539:../../protocol/lufa/descriptor.c ****             break;
  59               		.loc 1 539 0
  60 0032 82E1      		ldi r24,lo8(18)
  61 0034 90E0      		ldi r25,0
  62               	.LVL4:
 538:../../protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
  63               		.loc 1 538 0
  64 0036 20E0      		ldi r18,lo8(DeviceDescriptor)
  65 0038 30E0      		ldi r19,hi8(DeviceDescriptor)
  66 003a 00C0      		rjmp .L2
  67               	.LVL5:
  68               	.L3:
  69 003c 9927      		clr r25
  70               	.LVL6:
 545:../../protocol/lufa/descriptor.c ****         case DTYPE_String:
 546:../../protocol/lufa/descriptor.c ****             switch (DescriptorIndex )
  71               		.loc 1 546 0
  72 003e 8130      		cpi r24,1
  73 0040 9105      		cpc r25,__zero_reg__
  74 0042 01F0      		breq .L9
  75 0044 8230      		cpi r24,2
  76 0046 9105      		cpc r25,__zero_reg__
  77 0048 01F0      		breq .L10
  78 004a 892B      		or r24,r25
  79 004c 01F4      		brne .L15
  80               	.LVL7:
  81               	.LBB2:
 547:../../protocol/lufa/descriptor.c ****             {
 548:../../protocol/lufa/descriptor.c ****                 case 0x00:
 549:../../protocol/lufa/descriptor.c ****                     Address = &LanguageString;
 550:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
  82               		.loc 1 550 0
  83 004e E0E0      		ldi r30,lo8(LanguageString)
  84 0050 F0E0      		ldi r31,hi8(LanguageString)
  85 0052 00C0      		rjmp .L17
  86               	.LVL8:
  87               	.L9:
  88               	.LBE2:
  89               	.LBB3:
 551:../../protocol/lufa/descriptor.c ****                     break;
 552:../../protocol/lufa/descriptor.c ****                 case 0x01:
 553:../../protocol/lufa/descriptor.c ****                     Address = &ManufacturerString;
 554:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
  90               		.loc 1 554 0
  91 0054 E0E0      		ldi r30,lo8(ManufacturerString)
  92 0056 F0E0      		ldi r31,hi8(ManufacturerString)
  93 0058 00C0      		rjmp .L17
  94               	.LVL9:
  95               	.L10:
  96               	.LBE3:
  97               	.LBB4:
 555:../../protocol/lufa/descriptor.c ****                     break;
 556:../../protocol/lufa/descriptor.c ****                 case 0x02:
 557:../../protocol/lufa/descriptor.c ****                     Address = &ProductString;
 558:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
  98               		.loc 1 558 0
  99 005a E0E0      		ldi r30,lo8(ProductString)
 100 005c F0E0      		ldi r31,hi8(ProductString)
 101               	.LVL10:
 102               	.L17:
 103               	/* #APP */
 104               	 ;  558 "../../protocol/lufa/descriptor.c" 1
 105 005e 8491      		lpm r24, Z
 106               		
 107               	 ;  0 "" 2
 108               	.LVL11:
 109               	/* #NOAPP */
 110               	.LBE4:
 111 0060 90E0      		ldi r25,0
 112               	.LVL12:
 557:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 113               		.loc 1 557 0
 114 0062 9F01      		movw r18,r30
 559:../../protocol/lufa/descriptor.c ****                     break;
 115               		.loc 1 559 0
 116 0064 00C0      		rjmp .L2
 117               	.LVL13:
 118               	.L7:
 119 0066 6430      		cpi r22,lo8(4)
 120 0068 00F4      		brsh .L15
 121 006a E62F      		mov r30,r22
 122 006c F0E0      		ldi r31,0
 123 006e EE0F      		lsl r30
 124 0070 FF1F      		rol r31
 125 0072 E050      		subi r30,lo8(-(CSWTCH.1))
 126 0074 F040      		sbci r31,hi8(-(CSWTCH.1))
 127 0076 2081      		ld r18,Z
 128 0078 3181      		ldd r19,Z+1
 129 007a 89E0      		ldi r24,lo8(9)
 130 007c 90E0      		ldi r25,0
 131               	.LVL14:
 132 007e 00C0      		rjmp .L2
 133               	.LVL15:
 134               	.L8:
 135 0080 6430      		cpi r22,lo8(4)
 136 0082 00F4      		brsh .L15
 137 0084 70E0      		ldi r23,0
 138 0086 FB01      		movw r30,r22
 139 0088 EE0F      		lsl r30
 140 008a FF1F      		rol r31
 141               	.LVL16:
 142 008c E050      		subi r30,lo8(-(CSWTCH.2))
 143 008e F040      		sbci r31,hi8(-(CSWTCH.2))
 144 0090 2081      		ld r18,Z
 145 0092 3181      		ldd r19,Z+1
 146 0094 FB01      		movw r30,r22
 147 0096 E050      		subi r30,lo8(-(CSWTCH.3))
 148 0098 F040      		sbci r31,hi8(-(CSWTCH.3))
 149 009a 8081      		ld r24,Z
 150 009c 90E0      		ldi r25,0
 151 009e 00C0      		rjmp .L2
 152               	.L15:
 153 00a0 80E0      		ldi r24,0
 154 00a2 90E0      		ldi r25,0
 155 00a4 20E0      		ldi r18,0
 156 00a6 30E0      		ldi r19,0
 157               	.LVL17:
 158               	.L2:
 560:../../protocol/lufa/descriptor.c ****             }
 561:../../protocol/lufa/descriptor.c ****             break;
 562:../../protocol/lufa/descriptor.c ****         case HID_DTYPE_HID:
 563:../../protocol/lufa/descriptor.c ****             switch (wIndex) {
 564:../../protocol/lufa/descriptor.c ****             case KEYBOARD_INTERFACE:
 565:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Keyboard_HID;
 566:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 567:../../protocol/lufa/descriptor.c ****                 break;
 568:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 569:../../protocol/lufa/descriptor.c ****             case MOUSE_INTERFACE:
 570:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Mouse_HID;
 571:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 572:../../protocol/lufa/descriptor.c ****                 break;
 573:../../protocol/lufa/descriptor.c **** #endif
 574:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 575:../../protocol/lufa/descriptor.c ****             case EXTRAKEY_INTERFACE:
 576:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Extrakey_HID;
 577:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 578:../../protocol/lufa/descriptor.c ****                 break;
 579:../../protocol/lufa/descriptor.c **** #endif
 580:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 581:../../protocol/lufa/descriptor.c ****             case CONSOLE_INTERFACE:
 582:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Console_HID;
 583:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 584:../../protocol/lufa/descriptor.c ****                 break;
 585:../../protocol/lufa/descriptor.c **** #endif
 586:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 587:../../protocol/lufa/descriptor.c ****             case NKRO_INTERFACE:
 588:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.NKRO_HID;
 589:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 590:../../protocol/lufa/descriptor.c ****                 break;
 591:../../protocol/lufa/descriptor.c **** #endif
 592:../../protocol/lufa/descriptor.c ****             }
 593:../../protocol/lufa/descriptor.c ****             break;
 594:../../protocol/lufa/descriptor.c ****         case HID_DTYPE_Report:
 595:../../protocol/lufa/descriptor.c ****             switch (wIndex) {
 596:../../protocol/lufa/descriptor.c ****             case KEYBOARD_INTERFACE:
 597:../../protocol/lufa/descriptor.c ****                 Address = &KeyboardReport;
 598:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(KeyboardReport);
 599:../../protocol/lufa/descriptor.c ****                 break;
 600:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 601:../../protocol/lufa/descriptor.c ****             case MOUSE_INTERFACE:
 602:../../protocol/lufa/descriptor.c ****                 Address = &MouseReport;
 603:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(MouseReport);
 604:../../protocol/lufa/descriptor.c ****                 break;
 605:../../protocol/lufa/descriptor.c **** #endif
 606:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 607:../../protocol/lufa/descriptor.c ****             case EXTRAKEY_INTERFACE:
 608:../../protocol/lufa/descriptor.c ****                 Address = &ExtrakeyReport;
 609:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(ExtrakeyReport);
 610:../../protocol/lufa/descriptor.c ****                 break;
 611:../../protocol/lufa/descriptor.c **** #endif
 612:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 613:../../protocol/lufa/descriptor.c ****             case CONSOLE_INTERFACE:
 614:../../protocol/lufa/descriptor.c ****                 Address = &ConsoleReport;
 615:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(ConsoleReport);
 616:../../protocol/lufa/descriptor.c ****                 break;
 617:../../protocol/lufa/descriptor.c **** #endif
 618:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 619:../../protocol/lufa/descriptor.c ****             case NKRO_INTERFACE:
 620:../../protocol/lufa/descriptor.c ****                 Address = &NKROReport;
 621:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(NKROReport);
 622:../../protocol/lufa/descriptor.c ****                 break;
 623:../../protocol/lufa/descriptor.c **** #endif
 624:../../protocol/lufa/descriptor.c ****             }
 625:../../protocol/lufa/descriptor.c ****             break;
 626:../../protocol/lufa/descriptor.c ****     }
 627:../../protocol/lufa/descriptor.c **** 
 628:../../protocol/lufa/descriptor.c ****     *DescriptorAddress = Address;
 159               		.loc 1 628 0
 160 00a8 FA01      		movw r30,r20
 161 00aa 3183      		std Z+1,r19
 162 00ac 2083      		st Z,r18
 629:../../protocol/lufa/descriptor.c ****     return Size;
 630:../../protocol/lufa/descriptor.c **** }
 163               		.loc 1 630 0
 164 00ae 0895      		ret
 165               		.cfi_endproc
 166               	.LFE99:
 168               		.section	.rodata
 171               	CSWTCH.3:
 172 0000 3F        		.byte	63
 173 0001 4D        		.byte	77
 174 0002 36        		.byte	54
 175 0003 39        		.byte	57
 178               	CSWTCH.2:
 179 0004 0000      		.word	KeyboardReport
 180 0006 0000      		.word	MouseReport
 181 0008 0000      		.word	ExtrakeyReport
 182 000a 0000      		.word	NKROReport
 185               	CSWTCH.1:
 186 000c 0000      		.word	ConfigurationDescriptor+18
 187 000e 0000      		.word	ConfigurationDescriptor+43
 188 0010 0000      		.word	ConfigurationDescriptor+68
 189 0012 0000      		.word	ConfigurationDescriptor+93
 190               	.global	ProductString
 191               		.section	.progmem.data,"a",@progbits
 194               	ProductString:
 195 0000 12        		.byte	18
 196 0001 03        		.byte	3
 197 0002 4800      		.string	"H"
 198 0004 4800      		.string	"H"
 199 0006 4B00      		.string	"K"
 200 0008 4200      		.string	"B"
 201 000a 2000      		.string	" "
 202 000c 6D00      		.string	"m"
 203 000e 6F00      		.string	"o"
 204 0010 6400      		.string	"d"
 205 0012 00        		.string	""
 206 0013 00        		.string	""
 207               	.global	ManufacturerString
 210               	ManufacturerString:
 211 0014 0E        		.byte	14
 212 0015 03        		.byte	3
 213 0016 7400      		.string	"t"
 214 0018 2E00      		.string	"."
 215 001a 6D00      		.string	"m"
 216 001c 2E00      		.string	"."
 217 001e 6B00      		.string	"k"
 218 0020 2E00      		.string	"."
 219 0022 00        		.string	""
 220 0023 00        		.string	""
 221               	.global	LanguageString
 224               	LanguageString:
 225 0024 04        		.byte	4
 226 0025 03        		.byte	3
 227 0026 0904      		.word	1033
 228               	.global	ConfigurationDescriptor
 231               	ConfigurationDescriptor:
 232 0028 09        		.byte	9
 233 0029 02        		.byte	2
 234 002a 6D00      		.word	109
 235 002c 04        		.byte	4
 236 002d 01        		.byte	1
 237 002e 00        		.byte	0
 238 002f A0        		.byte	-96
 239 0030 32        		.byte	50
 240 0031 09        		.byte	9
 241 0032 04        		.byte	4
 242 0033 00        		.byte	0
 243 0034 00        		.byte	0
 244 0035 01        		.byte	1
 245 0036 03        		.byte	3
 246 0037 01        		.byte	1
 247 0038 01        		.byte	1
 248 0039 00        		.byte	0
 249 003a 09        		.byte	9
 250 003b 21        		.byte	33
 251 003c 1101      		.word	273
 252 003e 00        		.byte	0
 253 003f 01        		.byte	1
 254 0040 22        		.byte	34
 255 0041 3F00      		.word	63
 256 0043 07        		.byte	7
 257 0044 05        		.byte	5
 258 0045 81        		.byte	-127
 259 0046 03        		.byte	3
 260 0047 0800      		.word	8
 261 0049 0A        		.byte	10
 262 004a 09        		.byte	9
 263 004b 04        		.byte	4
 264 004c 01        		.byte	1
 265 004d 00        		.byte	0
 266 004e 01        		.byte	1
 267 004f 03        		.byte	3
 268 0050 01        		.byte	1
 269 0051 02        		.byte	2
 270 0052 00        		.byte	0
 271 0053 09        		.byte	9
 272 0054 21        		.byte	33
 273 0055 1101      		.word	273
 274 0057 00        		.byte	0
 275 0058 01        		.byte	1
 276 0059 22        		.byte	34
 277 005a 4D00      		.word	77
 278 005c 07        		.byte	7
 279 005d 05        		.byte	5
 280 005e 82        		.byte	-126
 281 005f 03        		.byte	3
 282 0060 0800      		.word	8
 283 0062 0A        		.byte	10
 284 0063 09        		.byte	9
 285 0064 04        		.byte	4
 286 0065 02        		.byte	2
 287 0066 00        		.byte	0
 288 0067 01        		.byte	1
 289 0068 03        		.byte	3
 290 0069 00        		.byte	0
 291 006a 00        		.byte	0
 292 006b 00        		.byte	0
 293 006c 09        		.byte	9
 294 006d 21        		.byte	33
 295 006e 1101      		.word	273
 296 0070 00        		.byte	0
 297 0071 01        		.byte	1
 298 0072 22        		.byte	34
 299 0073 3600      		.word	54
 300 0075 07        		.byte	7
 301 0076 05        		.byte	5
 302 0077 83        		.byte	-125
 303 0078 03        		.byte	3
 304 0079 0800      		.word	8
 305 007b 0A        		.byte	10
 306 007c 09        		.byte	9
 307 007d 04        		.byte	4
 308 007e 03        		.byte	3
 309 007f 00        		.byte	0
 310 0080 01        		.byte	1
 311 0081 03        		.byte	3
 312 0082 00        		.byte	0
 313 0083 00        		.byte	0
 314 0084 00        		.byte	0
 315 0085 09        		.byte	9
 316 0086 21        		.byte	33
 317 0087 1101      		.word	273
 318 0089 00        		.byte	0
 319 008a 01        		.byte	1
 320 008b 22        		.byte	34
 321 008c 3900      		.word	57
 322 008e 07        		.byte	7
 323 008f 05        		.byte	5
 324 0090 84        		.byte	-124
 325 0091 03        		.byte	3
 326 0092 1000      		.word	16
 327 0094 01        		.byte	1
 328               	.global	DeviceDescriptor
 331               	DeviceDescriptor:
 332 0095 12        		.byte	18
 333 0096 01        		.byte	1
 334 0097 1001      		.word	272
 335 0099 00        		.byte	0
 336 009a 00        		.byte	0
 337 009b 00        		.byte	0
 338 009c 08        		.byte	8
 339 009d EDFE      		.word	-275
 340 009f FECA      		.word	-13570
 341 00a1 0401      		.word	260
 342 00a3 01        		.byte	1
 343 00a4 02        		.byte	2
 344 00a5 00        		.byte	0
 345 00a6 01        		.byte	1
 346               	.global	NKROReport
 349               	NKROReport:
 350 00a7 05        		.byte	5
 351 00a8 01        		.byte	1
 352 00a9 09        		.byte	9
 353 00aa 06        		.byte	6
 354 00ab A1        		.byte	-95
 355 00ac 01        		.byte	1
 356 00ad 05        		.byte	5
 357 00ae 07        		.byte	7
 358 00af 19        		.byte	25
 359 00b0 E0        		.byte	-32
 360 00b1 29        		.byte	41
 361 00b2 E7        		.byte	-25
 362 00b3 15        		.byte	21
 363 00b4 00        		.byte	0
 364 00b5 25        		.byte	37
 365 00b6 01        		.byte	1
 366 00b7 95        		.byte	-107
 367 00b8 08        		.byte	8
 368 00b9 75        		.byte	117
 369 00ba 01        		.byte	1
 370 00bb 81        		.byte	-127
 371 00bc 02        		.byte	2
 372 00bd 05        		.byte	5
 373 00be 08        		.byte	8
 374 00bf 19        		.byte	25
 375 00c0 01        		.byte	1
 376 00c1 29        		.byte	41
 377 00c2 05        		.byte	5
 378 00c3 95        		.byte	-107
 379 00c4 05        		.byte	5
 380 00c5 75        		.byte	117
 381 00c6 01        		.byte	1
 382 00c7 91        		.byte	-111
 383 00c8 02        		.byte	2
 384 00c9 95        		.byte	-107
 385 00ca 01        		.byte	1
 386 00cb 75        		.byte	117
 387 00cc 03        		.byte	3
 388 00cd 91        		.byte	-111
 389 00ce 01        		.byte	1
 390 00cf 05        		.byte	5
 391 00d0 07        		.byte	7
 392 00d1 19        		.byte	25
 393 00d2 00        		.byte	0
 394 00d3 29        		.byte	41
 395 00d4 77        		.byte	119
 396 00d5 15        		.byte	21
 397 00d6 00        		.byte	0
 398 00d7 25        		.byte	37
 399 00d8 01        		.byte	1
 400 00d9 95        		.byte	-107
 401 00da 78        		.byte	120
 402 00db 75        		.byte	117
 403 00dc 01        		.byte	1
 404 00dd 81        		.byte	-127
 405 00de 02        		.byte	2
 406 00df C0        		.byte	-64
 407               	.global	ExtrakeyReport
 410               	ExtrakeyReport:
 411 00e0 05        		.byte	5
 412 00e1 01        		.byte	1
 413 00e2 09        		.byte	9
 414 00e3 80        		.byte	-128
 415 00e4 A1        		.byte	-95
 416 00e5 01        		.byte	1
 417 00e6 85        		.byte	-123
 418 00e7 02        		.byte	2
 419 00e8 16        		.byte	22
 420 00e9 01        		.byte	1
 421 00ea 00        		.byte	0
 422 00eb 26        		.byte	38
 423 00ec B7        		.byte	-73
 424 00ed 00        		.byte	0
 425 00ee 1A        		.byte	26
 426 00ef 01        		.byte	1
 427 00f0 00        		.byte	0
 428 00f1 2A        		.byte	42
 429 00f2 B7        		.byte	-73
 430 00f3 00        		.byte	0
 431 00f4 75        		.byte	117
 432 00f5 10        		.byte	16
 433 00f6 95        		.byte	-107
 434 00f7 01        		.byte	1
 435 00f8 81        		.byte	-127
 436 00f9 00        		.byte	0
 437 00fa C0        		.byte	-64
 438 00fb 05        		.byte	5
 439 00fc 0C        		.byte	12
 440 00fd 09        		.byte	9
 441 00fe 01        		.byte	1
 442 00ff A1        		.byte	-95
 443 0100 01        		.byte	1
 444 0101 85        		.byte	-123
 445 0102 03        		.byte	3
 446 0103 16        		.byte	22
 447 0104 01        		.byte	1
 448 0105 00        		.byte	0
 449 0106 26        		.byte	38
 450 0107 9C        		.byte	-100
 451 0108 02        		.byte	2
 452 0109 1A        		.byte	26
 453 010a 01        		.byte	1
 454 010b 00        		.byte	0
 455 010c 2A        		.byte	42
 456 010d 9C        		.byte	-100
 457 010e 02        		.byte	2
 458 010f 75        		.byte	117
 459 0110 10        		.byte	16
 460 0111 95        		.byte	-107
 461 0112 01        		.byte	1
 462 0113 81        		.byte	-127
 463 0114 00        		.byte	0
 464 0115 C0        		.byte	-64
 465               	.global	MouseReport
 468               	MouseReport:
 469 0116 05        		.byte	5
 470 0117 01        		.byte	1
 471 0118 09        		.byte	9
 472 0119 02        		.byte	2
 473 011a A1        		.byte	-95
 474 011b 01        		.byte	1
 475 011c 09        		.byte	9
 476 011d 01        		.byte	1
 477 011e A1        		.byte	-95
 478 011f 00        		.byte	0
 479 0120 05        		.byte	5
 480 0121 09        		.byte	9
 481 0122 19        		.byte	25
 482 0123 01        		.byte	1
 483 0124 29        		.byte	41
 484 0125 05        		.byte	5
 485 0126 15        		.byte	21
 486 0127 00        		.byte	0
 487 0128 25        		.byte	37
 488 0129 01        		.byte	1
 489 012a 95        		.byte	-107
 490 012b 05        		.byte	5
 491 012c 75        		.byte	117
 492 012d 01        		.byte	1
 493 012e 81        		.byte	-127
 494 012f 02        		.byte	2
 495 0130 95        		.byte	-107
 496 0131 01        		.byte	1
 497 0132 75        		.byte	117
 498 0133 03        		.byte	3
 499 0134 81        		.byte	-127
 500 0135 01        		.byte	1
 501 0136 05        		.byte	5
 502 0137 01        		.byte	1
 503 0138 09        		.byte	9
 504 0139 30        		.byte	48
 505 013a 09        		.byte	9
 506 013b 31        		.byte	49
 507 013c 15        		.byte	21
 508 013d 81        		.byte	-127
 509 013e 25        		.byte	37
 510 013f 7F        		.byte	127
 511 0140 95        		.byte	-107
 512 0141 02        		.byte	2
 513 0142 75        		.byte	117
 514 0143 08        		.byte	8
 515 0144 81        		.byte	-127
 516 0145 06        		.byte	6
 517 0146 09        		.byte	9
 518 0147 38        		.byte	56
 519 0148 15        		.byte	21
 520 0149 81        		.byte	-127
 521 014a 25        		.byte	37
 522 014b 7F        		.byte	127
 523 014c 95        		.byte	-107
 524 014d 01        		.byte	1
 525 014e 75        		.byte	117
 526 014f 08        		.byte	8
 527 0150 81        		.byte	-127
 528 0151 06        		.byte	6
 529 0152 05        		.byte	5
 530 0153 0C        		.byte	12
 531 0154 0A        		.byte	10
 532 0155 38        		.byte	56
 533 0156 02        		.byte	2
 534 0157 15        		.byte	21
 535 0158 81        		.byte	-127
 536 0159 25        		.byte	37
 537 015a 7F        		.byte	127
 538 015b 95        		.byte	-107
 539 015c 01        		.byte	1
 540 015d 75        		.byte	117
 541 015e 08        		.byte	8
 542 015f 81        		.byte	-127
 543 0160 06        		.byte	6
 544 0161 C0        		.byte	-64
 545 0162 C0        		.byte	-64
 546               	.global	KeyboardReport
 549               	KeyboardReport:
 550 0163 05        		.byte	5
 551 0164 01        		.byte	1
 552 0165 09        		.byte	9
 553 0166 06        		.byte	6
 554 0167 A1        		.byte	-95
 555 0168 01        		.byte	1
 556 0169 05        		.byte	5
 557 016a 07        		.byte	7
 558 016b 19        		.byte	25
 559 016c E0        		.byte	-32
 560 016d 29        		.byte	41
 561 016e E7        		.byte	-25
 562 016f 15        		.byte	21
 563 0170 00        		.byte	0
 564 0171 25        		.byte	37
 565 0172 01        		.byte	1
 566 0173 95        		.byte	-107
 567 0174 08        		.byte	8
 568 0175 75        		.byte	117
 569 0176 01        		.byte	1
 570 0177 81        		.byte	-127
 571 0178 02        		.byte	2
 572 0179 95        		.byte	-107
 573 017a 01        		.byte	1
 574 017b 75        		.byte	117
 575 017c 08        		.byte	8
 576 017d 81        		.byte	-127
 577 017e 01        		.byte	1
 578 017f 05        		.byte	5
 579 0180 08        		.byte	8
 580 0181 19        		.byte	25
 581 0182 01        		.byte	1
 582 0183 29        		.byte	41
 583 0184 05        		.byte	5
 584 0185 95        		.byte	-107
 585 0186 05        		.byte	5
 586 0187 75        		.byte	117
 587 0188 01        		.byte	1
 588 0189 91        		.byte	-111
 589 018a 02        		.byte	2
 590 018b 95        		.byte	-107
 591 018c 01        		.byte	1
 592 018d 75        		.byte	117
 593 018e 03        		.byte	3
 594 018f 91        		.byte	-111
 595 0190 01        		.byte	1
 596 0191 05        		.byte	5
 597 0192 07        		.byte	7
 598 0193 19        		.byte	25
 599 0194 00        		.byte	0
 600 0195 29        		.byte	41
 601 0196 FF        		.byte	-1
 602 0197 15        		.byte	21
 603 0198 00        		.byte	0
 604 0199 25        		.byte	37
 605 019a FF        		.byte	-1
 606 019b 95        		.byte	-107
 607 019c 06        		.byte	6
 608 019d 75        		.byte	117
 609 019e 08        		.byte	8
 610 019f 81        		.byte	-127
 611 01a0 00        		.byte	0
 612 01a1 C0        		.byte	-64
 613               		.text
 614               	.Letext0:
 615               		.file 2 "/usr/local/Cellar/avr-gcc/4.9.2/avr/include/stdint.h"
 616               		.file 3 "/usr/local/Cellar/avr-gcc/4.9.2/lib/gcc/avr/4.9.2/include/stddef.h"
 617               		.file 4 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 618               		.file 5 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 619               		.file 6 "../../protocol/lufa/descriptor.h"
 620               		.file 7 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 descriptor.c
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:4      *ABS*:000000000000003f __SREG__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:13     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:231    .progmem.data:0000000000000028 ConfigurationDescriptor
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:331    .progmem.data:0000000000000095 DeviceDescriptor
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:224    .progmem.data:0000000000000024 LanguageString
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:210    .progmem.data:0000000000000014 ManufacturerString
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:194    .progmem.data:0000000000000000 ProductString
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:185    .rodata:000000000000000c CSWTCH.1
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:178    .rodata:0000000000000004 CSWTCH.2
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:171    .rodata:0000000000000000 CSWTCH.3
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:549    .progmem.data:0000000000000163 KeyboardReport
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:468    .progmem.data:0000000000000116 MouseReport
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:410    .progmem.data:00000000000000e0 ExtrakeyReport
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGRJSsO.s:349    .progmem.data:00000000000000a7 NKROReport

UNDEFINED SYMBOLS
__do_copy_data
