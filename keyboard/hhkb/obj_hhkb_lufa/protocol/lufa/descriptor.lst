   1               		.file	"descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB99:
  15               		.file 1 "../../protocol/lufa/descriptor.c"
   1:../../protocol/lufa/descriptor.c **** /* 
   2:../../protocol/lufa/descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:../../protocol/lufa/descriptor.c ****  * This file is based on:
   4:../../protocol/lufa/descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:../../protocol/lufa/descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:../../protocol/lufa/descriptor.c ****  */
   7:../../protocol/lufa/descriptor.c **** 
   8:../../protocol/lufa/descriptor.c **** /*
   9:../../protocol/lufa/descriptor.c ****              LUFA Library
  10:../../protocol/lufa/descriptor.c ****      Copyright (C) Dean Camera, 2012.
  11:../../protocol/lufa/descriptor.c **** 
  12:../../protocol/lufa/descriptor.c ****   dean [at] fourwalledcubicle [dot] com
  13:../../protocol/lufa/descriptor.c ****            www.lufa-lib.org
  14:../../protocol/lufa/descriptor.c **** */
  15:../../protocol/lufa/descriptor.c **** 
  16:../../protocol/lufa/descriptor.c **** /*
  17:../../protocol/lufa/descriptor.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:../../protocol/lufa/descriptor.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:../../protocol/lufa/descriptor.c **** 
  20:../../protocol/lufa/descriptor.c ****   Permission to use, copy, modify, distribute, and sell this
  21:../../protocol/lufa/descriptor.c ****   software and its documentation for any purpose is hereby granted
  22:../../protocol/lufa/descriptor.c ****   without fee, provided that the above copyright notice appear in
  23:../../protocol/lufa/descriptor.c ****   all copies and that both that the copyright notice and this
  24:../../protocol/lufa/descriptor.c ****   permission notice and warranty disclaimer appear in supporting
  25:../../protocol/lufa/descriptor.c ****   documentation, and that the name of the author not be used in
  26:../../protocol/lufa/descriptor.c ****   advertising or publicity pertaining to distribution of the
  27:../../protocol/lufa/descriptor.c ****   software without specific, written prior permission.
  28:../../protocol/lufa/descriptor.c **** 
  29:../../protocol/lufa/descriptor.c ****   The author disclaim all warranties with regard to this
  30:../../protocol/lufa/descriptor.c ****   software, including all implied warranties of merchantability
  31:../../protocol/lufa/descriptor.c ****   and fitness.  In no event shall the author be liable for any
  32:../../protocol/lufa/descriptor.c ****   special, indirect or consequential damages or any damages
  33:../../protocol/lufa/descriptor.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:../../protocol/lufa/descriptor.c ****   in an action of contract, negligence or other tortious action,
  35:../../protocol/lufa/descriptor.c ****   arising out of or in connection with the use or performance of
  36:../../protocol/lufa/descriptor.c ****   this software.
  37:../../protocol/lufa/descriptor.c **** */
  38:../../protocol/lufa/descriptor.c **** 
  39:../../protocol/lufa/descriptor.c **** #include "util.h"
  40:../../protocol/lufa/descriptor.c **** #include "report.h"
  41:../../protocol/lufa/descriptor.c **** #include "descriptor.h"
  42:../../protocol/lufa/descriptor.c **** 
  43:../../protocol/lufa/descriptor.c **** 
  44:../../protocol/lufa/descriptor.c **** /*******************************************************************************
  45:../../protocol/lufa/descriptor.c ****  * HID Report Descriptors
  46:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
  47:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] =
  48:../../protocol/lufa/descriptor.c **** {
  49:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  50:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
  51:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  52:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
  53:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
  54:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
  55:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  56:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  57:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  58:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  59:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  60:../../protocol/lufa/descriptor.c **** 
  61:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  62:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  63:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),  /* reserved */
  64:../../protocol/lufa/descriptor.c **** 
  65:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
  66:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
  67:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
  68:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  69:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  70:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  71:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  72:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  73:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  74:../../protocol/lufa/descriptor.c **** 
  75:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Keyboard */
  76:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Reserved (no event indicated) */
  77:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF), /* Keyboard Application */
  78:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  79:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0xFF),
  80:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  81:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  82:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  83:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
  84:../../protocol/lufa/descriptor.c **** };
  85:../../protocol/lufa/descriptor.c **** 
  86:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
  87:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] =
  88:../../protocol/lufa/descriptor.c **** {
  89:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  90:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x02), /* Mouse */
  91:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  92:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x01), /* Pointer */
  93:../../protocol/lufa/descriptor.c ****         HID_RI_COLLECTION(8, 0x00), /* Physical */
  94:../../protocol/lufa/descriptor.c **** 
  95:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09), /* Button */
  96:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01),  /* Button 1 */
  97:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05),  /* Button 5 */
  98:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
  99:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 100:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 101:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 102:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 103:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 104:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 105:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 106:../../protocol/lufa/descriptor.c **** 
 107:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 108:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x30), /* Usage X */
 109:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x31), /* Usage Y */
 110:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 111:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 112:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 113:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 114:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 115:../../protocol/lufa/descriptor.c **** 
 116:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x38), /* Wheel */
 117:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 118:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 119:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 120:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 121:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 122:../../protocol/lufa/descriptor.c **** 
 123:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 124:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(16, 0x0238), /* AC Pan (Horizontal wheel) */
 125:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 126:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 127:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 128:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 129:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 130:../../protocol/lufa/descriptor.c **** 
 131:../../protocol/lufa/descriptor.c ****         HID_RI_END_COLLECTION(0),
 132:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 133:../../protocol/lufa/descriptor.c **** };
 134:../../protocol/lufa/descriptor.c **** #endif
 135:../../protocol/lufa/descriptor.c **** 
 136:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 137:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ExtrakeyReport[] =
 138:../../protocol/lufa/descriptor.c **** {
 139:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 140:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x80), /* System Control */
 141:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 142:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 143:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 144:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00B7),
 145:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), /* System Power Down */
 146:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x00B7), /* System Display LCD Autoscale */
 147:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 148:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 149:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 150:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 151:../../protocol/lufa/descriptor.c **** 
 152:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 153:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x01), /* Consumer Control */
 154:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 155:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 156:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 157:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 158:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), /* +10 */
 159:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x029C), /* AC Distribute Vertically */
 160:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 161:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 162:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 163:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 164:../../protocol/lufa/descriptor.c **** };
 165:../../protocol/lufa/descriptor.c **** #endif
 166:../../protocol/lufa/descriptor.c **** 
 167:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 168:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] =
 169:../../protocol/lufa/descriptor.c **** {
 170:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), /* Vendor Page(PJRC Teensy compatible) */
 171:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x74), /* Vendor Usage(PJRC Teensy compatible) */
 172:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 173:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x75), /* Vendor Usage 0x75 */
 174:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 175:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0xFF),
 176:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 177:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 178:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 179:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x76), /* Vendor Usage 0x76 */
 180:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 181:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0xFF),
 182:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 183:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 184:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 185:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 186:../../protocol/lufa/descriptor.c **** };
 187:../../protocol/lufa/descriptor.c **** #endif
 188:../../protocol/lufa/descriptor.c **** 
 189:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 190:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM NKROReport[] =
 191:../../protocol/lufa/descriptor.c **** {
 192:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 193:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
 194:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 195:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 196:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
 197:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
 198:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 199:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 200:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 201:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 202:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 203:../../protocol/lufa/descriptor.c **** 
 204:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
 205:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
 206:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
 207:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 208:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 209:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 210:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 211:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 212:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 213:../../protocol/lufa/descriptor.c **** 
 214:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 215:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Keyboard 0 */
 216:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, (NKRO_EPSIZE-1)*8-1), /* Keyboard Right GUI */
 217:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 218:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 219:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, (NKRO_EPSIZE-1)*8),
 220:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 221:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 222:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 223:../../protocol/lufa/descriptor.c **** };
 224:../../protocol/lufa/descriptor.c **** #endif
 225:../../protocol/lufa/descriptor.c **** 
 226:../../protocol/lufa/descriptor.c **** /*******************************************************************************
 227:../../protocol/lufa/descriptor.c ****  * Device Descriptors
 228:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
 229:../../protocol/lufa/descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
 230:../../protocol/lufa/descriptor.c **** {
 231:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
 232:../../protocol/lufa/descriptor.c **** 
 233:../../protocol/lufa/descriptor.c ****     .USBSpecification       = VERSION_BCD(1,1,0),
 234:../../protocol/lufa/descriptor.c ****     .Class                  = USB_CSCP_NoDeviceClass,
 235:../../protocol/lufa/descriptor.c ****     .SubClass               = USB_CSCP_NoDeviceSubclass,
 236:../../protocol/lufa/descriptor.c ****     .Protocol               = USB_CSCP_NoDeviceProtocol,
 237:../../protocol/lufa/descriptor.c **** 
 238:../../protocol/lufa/descriptor.c ****     .Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
 239:../../protocol/lufa/descriptor.c **** 
 240:../../protocol/lufa/descriptor.c ****     /* specified in config.h */
 241:../../protocol/lufa/descriptor.c ****     .VendorID               = VENDOR_ID,
 242:../../protocol/lufa/descriptor.c ****     .ProductID              = PRODUCT_ID,
 243:../../protocol/lufa/descriptor.c ****     .ReleaseNumber          = DEVICE_VER,
 244:../../protocol/lufa/descriptor.c **** 
 245:../../protocol/lufa/descriptor.c ****     .ManufacturerStrIndex   = 0x01,
 246:../../protocol/lufa/descriptor.c ****     .ProductStrIndex        = 0x02,
 247:../../protocol/lufa/descriptor.c ****     .SerialNumStrIndex      = NO_DESCRIPTOR,
 248:../../protocol/lufa/descriptor.c **** 
 249:../../protocol/lufa/descriptor.c ****     .NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 250:../../protocol/lufa/descriptor.c **** };
 251:../../protocol/lufa/descriptor.c **** 
 252:../../protocol/lufa/descriptor.c **** /*******************************************************************************
 253:../../protocol/lufa/descriptor.c ****  * Configuration Descriptors
 254:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
 255:../../protocol/lufa/descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 256:../../protocol/lufa/descriptor.c **** {
 257:../../protocol/lufa/descriptor.c ****     .Config =
 258:../../protocol/lufa/descriptor.c ****         {
 259:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type
 260:../../protocol/lufa/descriptor.c **** 
 261:../../protocol/lufa/descriptor.c ****             .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 262:../../protocol/lufa/descriptor.c ****             .TotalInterfaces        = TOTAL_INTERFACES,
 263:../../protocol/lufa/descriptor.c **** 
 264:../../protocol/lufa/descriptor.c ****             .ConfigurationNumber    = 1,
 265:../../protocol/lufa/descriptor.c ****             .ConfigurationStrIndex  = NO_DESCRIPTOR,
 266:../../protocol/lufa/descriptor.c **** 
 267:../../protocol/lufa/descriptor.c ****             .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 268:../../protocol/lufa/descriptor.c **** 
 269:../../protocol/lufa/descriptor.c ****             .MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
 270:../../protocol/lufa/descriptor.c ****         },
 271:../../protocol/lufa/descriptor.c **** 
 272:../../protocol/lufa/descriptor.c ****     /*
 273:../../protocol/lufa/descriptor.c ****      * Keyboard
 274:../../protocol/lufa/descriptor.c ****      */
 275:../../protocol/lufa/descriptor.c ****     .Keyboard_Interface =
 276:../../protocol/lufa/descriptor.c ****         {
 277:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 278:../../protocol/lufa/descriptor.c **** 
 279:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = KEYBOARD_INTERFACE,
 280:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 281:../../protocol/lufa/descriptor.c **** 
 282:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 283:../../protocol/lufa/descriptor.c **** 
 284:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 285:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 286:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_KeyboardBootProtocol,
 287:../../protocol/lufa/descriptor.c **** 
 288:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 289:../../protocol/lufa/descriptor.c ****         },
 290:../../protocol/lufa/descriptor.c **** 
 291:../../protocol/lufa/descriptor.c ****     .Keyboard_HID =
 292:../../protocol/lufa/descriptor.c ****         {
 293:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 294:../../protocol/lufa/descriptor.c **** 
 295:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 296:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 297:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 298:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 299:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(KeyboardReport)
 300:../../protocol/lufa/descriptor.c ****         },
 301:../../protocol/lufa/descriptor.c **** 
 302:../../protocol/lufa/descriptor.c ****     .Keyboard_INEndpoint =
 303:../../protocol/lufa/descriptor.c ****         {
 304:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 305:../../protocol/lufa/descriptor.c **** 
 306:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 307:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 308:../../protocol/lufa/descriptor.c ****             .EndpointSize           = KEYBOARD_EPSIZE,
 309:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 310:../../protocol/lufa/descriptor.c ****         },
 311:../../protocol/lufa/descriptor.c **** 
 312:../../protocol/lufa/descriptor.c ****     /*
 313:../../protocol/lufa/descriptor.c ****      * Mouse
 314:../../protocol/lufa/descriptor.c ****      */
 315:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 316:../../protocol/lufa/descriptor.c ****     .Mouse_Interface =
 317:../../protocol/lufa/descriptor.c ****         {
 318:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 319:../../protocol/lufa/descriptor.c **** 
 320:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = MOUSE_INTERFACE,
 321:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 322:../../protocol/lufa/descriptor.c **** 
 323:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 324:../../protocol/lufa/descriptor.c **** 
 325:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 326:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 327:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_MouseBootProtocol,
 328:../../protocol/lufa/descriptor.c **** 
 329:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 330:../../protocol/lufa/descriptor.c ****         },
 331:../../protocol/lufa/descriptor.c **** 
 332:../../protocol/lufa/descriptor.c ****     .Mouse_HID =
 333:../../protocol/lufa/descriptor.c ****         {
 334:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 335:../../protocol/lufa/descriptor.c **** 
 336:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 337:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 338:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 339:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 340:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(MouseReport)
 341:../../protocol/lufa/descriptor.c ****         },
 342:../../protocol/lufa/descriptor.c **** 
 343:../../protocol/lufa/descriptor.c ****     .Mouse_INEndpoint =
 344:../../protocol/lufa/descriptor.c ****         {
 345:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 346:../../protocol/lufa/descriptor.c **** 
 347:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 348:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 349:../../protocol/lufa/descriptor.c ****             .EndpointSize           = MOUSE_EPSIZE,
 350:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 351:../../protocol/lufa/descriptor.c ****         },
 352:../../protocol/lufa/descriptor.c **** #endif
 353:../../protocol/lufa/descriptor.c **** 
 354:../../protocol/lufa/descriptor.c ****     /*
 355:../../protocol/lufa/descriptor.c ****      * Extra
 356:../../protocol/lufa/descriptor.c ****      */
 357:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 358:../../protocol/lufa/descriptor.c ****     .Extrakey_Interface =
 359:../../protocol/lufa/descriptor.c ****         {
 360:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 361:../../protocol/lufa/descriptor.c **** 
 362:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = EXTRAKEY_INTERFACE,
 363:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 364:../../protocol/lufa/descriptor.c **** 
 365:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 366:../../protocol/lufa/descriptor.c **** 
 367:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 368:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 369:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 370:../../protocol/lufa/descriptor.c **** 
 371:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 372:../../protocol/lufa/descriptor.c ****         },
 373:../../protocol/lufa/descriptor.c **** 
 374:../../protocol/lufa/descriptor.c ****     .Extrakey_HID =
 375:../../protocol/lufa/descriptor.c ****         {
 376:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 377:../../protocol/lufa/descriptor.c **** 
 378:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 379:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 380:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 381:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 382:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(ExtrakeyReport)
 383:../../protocol/lufa/descriptor.c ****         },
 384:../../protocol/lufa/descriptor.c **** 
 385:../../protocol/lufa/descriptor.c ****     .Extrakey_INEndpoint =
 386:../../protocol/lufa/descriptor.c ****         {
 387:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 388:../../protocol/lufa/descriptor.c **** 
 389:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | EXTRAKEY_IN_EPNUM),
 390:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 391:../../protocol/lufa/descriptor.c ****             .EndpointSize           = EXTRAKEY_EPSIZE,
 392:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 393:../../protocol/lufa/descriptor.c ****         },
 394:../../protocol/lufa/descriptor.c **** #endif
 395:../../protocol/lufa/descriptor.c **** 
 396:../../protocol/lufa/descriptor.c ****     /*
 397:../../protocol/lufa/descriptor.c ****      * Console
 398:../../protocol/lufa/descriptor.c ****      */
 399:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 400:../../protocol/lufa/descriptor.c ****     .Console_Interface =
 401:../../protocol/lufa/descriptor.c ****         {
 402:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 403:../../protocol/lufa/descriptor.c **** 
 404:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = CONSOLE_INTERFACE,
 405:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 406:../../protocol/lufa/descriptor.c **** 
 407:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 2,
 408:../../protocol/lufa/descriptor.c **** 
 409:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 410:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 411:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 412:../../protocol/lufa/descriptor.c **** 
 413:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 414:../../protocol/lufa/descriptor.c ****         },
 415:../../protocol/lufa/descriptor.c **** 
 416:../../protocol/lufa/descriptor.c ****     .Console_HID =
 417:../../protocol/lufa/descriptor.c ****         {
 418:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 419:../../protocol/lufa/descriptor.c **** 
 420:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 421:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 422:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 423:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 424:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(ConsoleReport)
 425:../../protocol/lufa/descriptor.c ****         },
 426:../../protocol/lufa/descriptor.c **** 
 427:../../protocol/lufa/descriptor.c ****     .Console_INEndpoint =
 428:../../protocol/lufa/descriptor.c ****         {
 429:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 430:../../protocol/lufa/descriptor.c **** 
 431:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 432:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 433:../../protocol/lufa/descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 434:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 435:../../protocol/lufa/descriptor.c ****         },
 436:../../protocol/lufa/descriptor.c **** 
 437:../../protocol/lufa/descriptor.c ****     .Console_OUTEndpoint =
 438:../../protocol/lufa/descriptor.c ****         {
 439:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 440:../../protocol/lufa/descriptor.c **** 
 441:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 442:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 443:../../protocol/lufa/descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 444:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 445:../../protocol/lufa/descriptor.c ****         },
 446:../../protocol/lufa/descriptor.c **** #endif
 447:../../protocol/lufa/descriptor.c **** 
 448:../../protocol/lufa/descriptor.c ****     /*
 449:../../protocol/lufa/descriptor.c ****      * NKRO
 450:../../protocol/lufa/descriptor.c ****      */
 451:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 452:../../protocol/lufa/descriptor.c ****     .NKRO_Interface =
 453:../../protocol/lufa/descriptor.c ****         {
 454:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 455:../../protocol/lufa/descriptor.c **** 
 456:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = NKRO_INTERFACE,
 457:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 458:../../protocol/lufa/descriptor.c **** 
 459:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 460:../../protocol/lufa/descriptor.c **** 
 461:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 462:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 463:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 464:../../protocol/lufa/descriptor.c **** 
 465:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 466:../../protocol/lufa/descriptor.c ****         },
 467:../../protocol/lufa/descriptor.c **** 
 468:../../protocol/lufa/descriptor.c ****     .NKRO_HID =
 469:../../protocol/lufa/descriptor.c ****         {
 470:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 471:../../protocol/lufa/descriptor.c **** 
 472:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 473:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 474:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 475:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 476:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(NKROReport)
 477:../../protocol/lufa/descriptor.c ****         },
 478:../../protocol/lufa/descriptor.c **** 
 479:../../protocol/lufa/descriptor.c ****     .NKRO_INEndpoint =
 480:../../protocol/lufa/descriptor.c ****         {
 481:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 482:../../protocol/lufa/descriptor.c **** 
 483:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | NKRO_IN_EPNUM),
 484:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 485:../../protocol/lufa/descriptor.c ****             .EndpointSize           = NKRO_EPSIZE,
 486:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 487:../../protocol/lufa/descriptor.c ****         },
 488:../../protocol/lufa/descriptor.c **** #endif
 489:../../protocol/lufa/descriptor.c **** };
 490:../../protocol/lufa/descriptor.c **** 
 491:../../protocol/lufa/descriptor.c **** 
 492:../../protocol/lufa/descriptor.c **** /*******************************************************************************
 493:../../protocol/lufa/descriptor.c ****  * String Descriptors
 494:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
 495:../../protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 496:../../protocol/lufa/descriptor.c **** {
 497:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 498:../../protocol/lufa/descriptor.c **** 
 499:../../protocol/lufa/descriptor.c ****     .UnicodeString          = {LANGUAGE_ID_ENG}
 500:../../protocol/lufa/descriptor.c **** };
 501:../../protocol/lufa/descriptor.c **** 
 502:../../protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 503:../../protocol/lufa/descriptor.c **** {
 504:../../protocol/lufa/descriptor.c ****     /* subtract 1 for null terminator */
 505:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(MANUFACTURER))-1), .Type = DTYPE_S
 506:../../protocol/lufa/descriptor.c **** 
 507:../../protocol/lufa/descriptor.c ****     .UnicodeString          = LSTR(MANUFACTURER)
 508:../../protocol/lufa/descriptor.c **** };
 509:../../protocol/lufa/descriptor.c **** 
 510:../../protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 511:../../protocol/lufa/descriptor.c **** {
 512:../../protocol/lufa/descriptor.c ****     /* subtract 1 for null terminator */
 513:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(PRODUCT))-1), .Type = DTYPE_String
 514:../../protocol/lufa/descriptor.c **** 
 515:../../protocol/lufa/descriptor.c ****     .UnicodeString          = LSTR(PRODUCT)
 516:../../protocol/lufa/descriptor.c **** };
 517:../../protocol/lufa/descriptor.c **** 
 518:../../protocol/lufa/descriptor.c **** 
 519:../../protocol/lufa/descriptor.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 520:../../protocol/lufa/descriptor.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 521:../../protocol/lufa/descriptor.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 522:../../protocol/lufa/descriptor.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 523:../../protocol/lufa/descriptor.c ****  *  USB host.
 524:../../protocol/lufa/descriptor.c ****  */
 525:../../protocol/lufa/descriptor.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 526:../../protocol/lufa/descriptor.c ****                                     const uint8_t wIndex,
 527:../../protocol/lufa/descriptor.c ****                                     const void** const DescriptorAddress)
 528:../../protocol/lufa/descriptor.c **** {
  16               		.loc 1 528 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 529:../../protocol/lufa/descriptor.c ****     const uint8_t  DescriptorType   = (wValue >> 8);
 530:../../protocol/lufa/descriptor.c ****     const uint8_t  DescriptorIndex  = (wValue & 0xFF);
 531:../../protocol/lufa/descriptor.c **** 
 532:../../protocol/lufa/descriptor.c ****     const void* Address = NULL;
 533:../../protocol/lufa/descriptor.c ****     uint16_t    Size    = NO_DESCRIPTOR;
 534:../../protocol/lufa/descriptor.c **** 
 535:../../protocol/lufa/descriptor.c ****     switch (DescriptorType)
 536:../../protocol/lufa/descriptor.c ****     {
 537:../../protocol/lufa/descriptor.c ****         case DTYPE_Device:
 538:../../protocol/lufa/descriptor.c ****             Address = &DeviceDescriptor;
 539:../../protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 540:../../protocol/lufa/descriptor.c ****             break;
 541:../../protocol/lufa/descriptor.c ****         case DTYPE_Configuration:
 542:../../protocol/lufa/descriptor.c ****             Address = &ConfigurationDescriptor;
 543:../../protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 544:../../protocol/lufa/descriptor.c ****             break;
 545:../../protocol/lufa/descriptor.c ****         case DTYPE_String:
 546:../../protocol/lufa/descriptor.c ****             switch (DescriptorIndex )
 547:../../protocol/lufa/descriptor.c ****             {
 548:../../protocol/lufa/descriptor.c ****                 case 0x00:
 549:../../protocol/lufa/descriptor.c ****                     Address = &LanguageString;
 550:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 551:../../protocol/lufa/descriptor.c ****                     break;
 552:../../protocol/lufa/descriptor.c ****                 case 0x01:
 553:../../protocol/lufa/descriptor.c ****                     Address = &ManufacturerString;
 554:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 555:../../protocol/lufa/descriptor.c ****                     break;
 556:../../protocol/lufa/descriptor.c ****                 case 0x02:
 557:../../protocol/lufa/descriptor.c ****                     Address = &ProductString;
 558:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 559:../../protocol/lufa/descriptor.c ****                     break;
 560:../../protocol/lufa/descriptor.c ****             }
 561:../../protocol/lufa/descriptor.c ****             break;
 562:../../protocol/lufa/descriptor.c ****         case HID_DTYPE_HID:
 563:../../protocol/lufa/descriptor.c ****             switch (wIndex) {
 564:../../protocol/lufa/descriptor.c ****             case KEYBOARD_INTERFACE:
 565:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Keyboard_HID;
 566:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 567:../../protocol/lufa/descriptor.c ****                 break;
 568:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 569:../../protocol/lufa/descriptor.c ****             case MOUSE_INTERFACE:
 570:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Mouse_HID;
 571:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 572:../../protocol/lufa/descriptor.c ****                 break;
 573:../../protocol/lufa/descriptor.c **** #endif
 574:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 575:../../protocol/lufa/descriptor.c ****             case EXTRAKEY_INTERFACE:
 576:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Extrakey_HID;
 577:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 578:../../protocol/lufa/descriptor.c ****                 break;
 579:../../protocol/lufa/descriptor.c **** #endif
 580:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 581:../../protocol/lufa/descriptor.c ****             case CONSOLE_INTERFACE:
 582:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Console_HID;
 583:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 584:../../protocol/lufa/descriptor.c ****                 break;
 585:../../protocol/lufa/descriptor.c **** #endif
 586:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 587:../../protocol/lufa/descriptor.c ****             case NKRO_INTERFACE:
 588:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.NKRO_HID;
 589:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 590:../../protocol/lufa/descriptor.c ****                 break;
 591:../../protocol/lufa/descriptor.c **** #endif
 592:../../protocol/lufa/descriptor.c ****             }
 593:../../protocol/lufa/descriptor.c ****             break;
 594:../../protocol/lufa/descriptor.c ****         case HID_DTYPE_Report:
 595:../../protocol/lufa/descriptor.c ****             switch (wIndex) {
 596:../../protocol/lufa/descriptor.c ****             case KEYBOARD_INTERFACE:
 597:../../protocol/lufa/descriptor.c ****                 Address = &KeyboardReport;
 598:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(KeyboardReport);
 599:../../protocol/lufa/descriptor.c ****                 break;
 600:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 601:../../protocol/lufa/descriptor.c ****             case MOUSE_INTERFACE:
 602:../../protocol/lufa/descriptor.c ****                 Address = &MouseReport;
 603:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(MouseReport);
 604:../../protocol/lufa/descriptor.c ****                 break;
 605:../../protocol/lufa/descriptor.c **** #endif
 606:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 607:../../protocol/lufa/descriptor.c ****             case EXTRAKEY_INTERFACE:
 608:../../protocol/lufa/descriptor.c ****                 Address = &ExtrakeyReport;
 609:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(ExtrakeyReport);
 610:../../protocol/lufa/descriptor.c ****                 break;
 611:../../protocol/lufa/descriptor.c **** #endif
 612:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 613:../../protocol/lufa/descriptor.c ****             case CONSOLE_INTERFACE:
 614:../../protocol/lufa/descriptor.c ****                 Address = &ConsoleReport;
 615:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(ConsoleReport);
 616:../../protocol/lufa/descriptor.c ****                 break;
 617:../../protocol/lufa/descriptor.c **** #endif
 618:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 619:../../protocol/lufa/descriptor.c ****             case NKRO_INTERFACE:
 620:../../protocol/lufa/descriptor.c ****                 Address = &NKROReport;
 621:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(NKROReport);
 622:../../protocol/lufa/descriptor.c ****                 break;
 623:../../protocol/lufa/descriptor.c **** #endif
 624:../../protocol/lufa/descriptor.c ****             }
 625:../../protocol/lufa/descriptor.c ****             break;
 626:../../protocol/lufa/descriptor.c ****     }
 627:../../protocol/lufa/descriptor.c **** 
 628:../../protocol/lufa/descriptor.c ****     *DescriptorAddress = Address;
 629:../../protocol/lufa/descriptor.c ****     return Size;
 630:../../protocol/lufa/descriptor.c **** }
  23               		.loc 1 630 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 535:../../protocol/lufa/descriptor.c ****     switch (DescriptorType)
  26               		.loc 1 535 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L5
  30 000a 04F4      		brge .L8
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F4      		brne .+2
  34 0012 00C0      		rjmp .L12
  35 0014 2230      		cpi r18,2
  36 0016 3105      		cpc r19,__zero_reg__
  37 0018 01F0      		breq .+2
  38 001a 00C0      		rjmp .L15
  39 001c 00C0      		rjmp .L4
  40               	.L8:
  41 001e 2132      		cpi r18,33
  42 0020 3105      		cpc r19,__zero_reg__
  43 0022 01F0      		breq .L6
  44 0024 2232      		cpi r18,34
  45 0026 3105      		cpc r19,__zero_reg__
  46 0028 01F0      		breq .L7
  47 002a 00C0      		rjmp .L15
  48               	.L4:
  49               	.LVL1:
 543:../../protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  50               		.loc 1 543 0
  51 002c EDE6      		ldi r30,lo8(109)
  52 002e F0E0      		ldi r31,0
 542:../../protocol/lufa/descriptor.c ****             Address = &ConfigurationDescriptor;
  53               		.loc 1 542 0
  54 0030 80E0      		ldi r24,lo8(ConfigurationDescriptor)
  55 0032 90E0      		ldi r25,hi8(ConfigurationDescriptor)
  56               	.LVL2:
 544:../../protocol/lufa/descriptor.c ****             break;
  57               		.loc 1 544 0
  58 0034 00C0      		rjmp .L3
  59               	.LVL3:
  60               	.L5:
  61               		.loc 1 630 0
  62 0036 9927      		clr r25
  63               	.LVL4:
 546:../../protocol/lufa/descriptor.c ****             switch (DescriptorIndex )
  64               		.loc 1 546 0
  65 0038 8130      		cpi r24,1
  66 003a 9105      		cpc r25,__zero_reg__
  67 003c 01F0      		breq .L10
  68 003e 8230      		cpi r24,2
  69 0040 9105      		cpc r25,__zero_reg__
  70 0042 01F0      		breq .L11
  71 0044 892B      		or r24,r25
  72 0046 01F0      		breq .+2
  73 0048 00C0      		rjmp .L15
  74               	.LVL5:
  75               	.LBB2:
 550:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
  76               		.loc 1 550 0
  77 004a E0E0      		ldi r30,lo8(LanguageString)
  78 004c F0E0      		ldi r31,hi8(LanguageString)
  79               	/* #APP */
  80               	 ;  550 "../../protocol/lufa/descriptor.c" 1
  81 004e E491      		lpm r30, Z
  82               		
  83               	 ;  0 "" 2
  84               	.LVL6:
  85               	/* #NOAPP */
  86               	.LBE2:
  87 0050 F0E0      		ldi r31,0
  88               	.LVL7:
 549:../../protocol/lufa/descriptor.c ****                     Address = &LanguageString;
  89               		.loc 1 549 0
  90 0052 80E0      		ldi r24,lo8(LanguageString)
  91 0054 90E0      		ldi r25,hi8(LanguageString)
 551:../../protocol/lufa/descriptor.c ****                     break;
  92               		.loc 1 551 0
  93 0056 00C0      		rjmp .L3
  94               	.LVL8:
  95               	.L10:
  96               	.LBB3:
 554:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
  97               		.loc 1 554 0
  98 0058 E0E0      		ldi r30,lo8(ManufacturerString)
  99 005a F0E0      		ldi r31,hi8(ManufacturerString)
 100               	/* #APP */
 101               	 ;  554 "../../protocol/lufa/descriptor.c" 1
 102 005c E491      		lpm r30, Z
 103               		
 104               	 ;  0 "" 2
 105               	.LVL9:
 106               	/* #NOAPP */
 107               	.LBE3:
 108 005e F0E0      		ldi r31,0
 109               	.LVL10:
 553:../../protocol/lufa/descriptor.c ****                     Address = &ManufacturerString;
 110               		.loc 1 553 0
 111 0060 80E0      		ldi r24,lo8(ManufacturerString)
 112 0062 90E0      		ldi r25,hi8(ManufacturerString)
 555:../../protocol/lufa/descriptor.c ****                     break;
 113               		.loc 1 555 0
 114 0064 00C0      		rjmp .L3
 115               	.LVL11:
 116               	.L11:
 117               	.LBB4:
 558:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 118               		.loc 1 558 0
 119 0066 E0E0      		ldi r30,lo8(ProductString)
 120 0068 F0E0      		ldi r31,hi8(ProductString)
 121               	/* #APP */
 122               	 ;  558 "../../protocol/lufa/descriptor.c" 1
 123 006a E491      		lpm r30, Z
 124               		
 125               	 ;  0 "" 2
 126               	.LVL12:
 127               	/* #NOAPP */
 128               	.LBE4:
 129 006c F0E0      		ldi r31,0
 130               	.LVL13:
 557:../../protocol/lufa/descriptor.c ****                     Address = &ProductString;
 131               		.loc 1 557 0
 132 006e 80E0      		ldi r24,lo8(ProductString)
 133 0070 90E0      		ldi r25,hi8(ProductString)
 559:../../protocol/lufa/descriptor.c ****                     break;
 134               		.loc 1 559 0
 135 0072 00C0      		rjmp .L3
 136               	.LVL14:
 137               	.L6:
 138 0074 6430      		cpi r22,lo8(4)
 139 0076 00F4      		brsh .L15
 140 0078 E62F      		mov r30,r22
 141 007a F0E0      		ldi r31,0
 142 007c EE0F      		lsl r30
 143 007e FF1F      		rol r31
 144 0080 E050      		subi r30,lo8(-(CSWTCH.2))
 145 0082 F040      		sbci r31,hi8(-(CSWTCH.2))
 146 0084 8081      		ld r24,Z
 147 0086 9181      		ldd r25,Z+1
 148               	.LVL15:
 149 0088 E9E0      		ldi r30,lo8(9)
 150 008a F0E0      		ldi r31,0
 151 008c 00C0      		rjmp .L3
 152               	.LVL16:
 153               	.L7:
 154 008e 6430      		cpi r22,lo8(4)
 155 0090 00F4      		brsh .L15
 156 0092 E62F      		mov r30,r22
 157 0094 F0E0      		ldi r31,0
 158 0096 DF01      		movw r26,r30
 159 0098 AA0F      		lsl r26
 160 009a BB1F      		rol r27
 161               	.LVL17:
 162 009c A050      		subi r26,lo8(-(CSWTCH.4))
 163 009e B040      		sbci r27,hi8(-(CSWTCH.4))
 164 00a0 8D91      		ld r24,X+
 165 00a2 9C91      		ld r25,X
 166               		.loc 1 630 0
 167 00a4 E050      		subi r30,lo8(-(CSWTCH.5))
 168 00a6 F040      		sbci r31,hi8(-(CSWTCH.5))
 169 00a8 E081      		ld r30,Z
 170 00aa F0E0      		ldi r31,0
 171 00ac 00C0      		rjmp .L3
 172               	.LVL18:
 173               	.L12:
 539:../../protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 174               		.loc 1 539 0
 175 00ae E2E1      		ldi r30,lo8(18)
 176 00b0 F0E0      		ldi r31,0
 538:../../protocol/lufa/descriptor.c ****             Address = &DeviceDescriptor;
 177               		.loc 1 538 0
 178 00b2 80E0      		ldi r24,lo8(DeviceDescriptor)
 179 00b4 90E0      		ldi r25,hi8(DeviceDescriptor)
 180               	.LVL19:
 181 00b6 00C0      		rjmp .L3
 182               	.L15:
 183 00b8 E0E0      		ldi r30,0
 184 00ba F0E0      		ldi r31,0
 185 00bc 80E0      		ldi r24,0
 186 00be 90E0      		ldi r25,0
 187               	.LVL20:
 188               	.L3:
 628:../../protocol/lufa/descriptor.c ****     *DescriptorAddress = Address;
 189               		.loc 1 628 0
 190 00c0 DA01      		movw r26,r20
 191 00c2 8D93      		st X+,r24
 192 00c4 9C93      		st X,r25
 193               		.loc 1 630 0
 194 00c6 CF01      		movw r24,r30
 195               	.LVL21:
 196 00c8 0895      		ret
 197               		.cfi_endproc
 198               	.LFE99:
 200               	.global	ProductString
 201               		.section	.progmem.data,"a",@progbits
 204               	ProductString:
 205 0000 12        		.byte	18
 206 0001 03        		.byte	3
 207 0002 4800      		.string	"H"
 208 0004 4800      		.string	"H"
 209 0006 4B00      		.string	"K"
 210 0008 4200      		.string	"B"
 211 000a 2000      		.string	" "
 212 000c 6D00      		.string	"m"
 213 000e 6F00      		.string	"o"
 214 0010 6400      		.string	"d"
 215 0012 00        		.string	""
 216 0013 00        		.string	""
 217               	.global	ManufacturerString
 220               	ManufacturerString:
 221 0014 0E        		.byte	14
 222 0015 03        		.byte	3
 223 0016 7400      		.string	"t"
 224 0018 2E00      		.string	"."
 225 001a 6D00      		.string	"m"
 226 001c 2E00      		.string	"."
 227 001e 6B00      		.string	"k"
 228 0020 2E00      		.string	"."
 229 0022 00        		.string	""
 230 0023 00        		.string	""
 231               	.global	LanguageString
 234               	LanguageString:
 235 0024 04        		.byte	4
 236 0025 03        		.byte	3
 237 0026 0904      		.word	1033
 238               	.global	ConfigurationDescriptor
 241               	ConfigurationDescriptor:
 242 0028 09        		.byte	9
 243 0029 02        		.byte	2
 244 002a 6D00      		.word	109
 245 002c 04        		.byte	4
 246 002d 01        		.byte	1
 247 002e 00        		.byte	0
 248 002f A0        		.byte	-96
 249 0030 32        		.byte	50
 250 0031 09        		.byte	9
 251 0032 04        		.byte	4
 252 0033 00        		.byte	0
 253 0034 00        		.byte	0
 254 0035 01        		.byte	1
 255 0036 03        		.byte	3
 256 0037 01        		.byte	1
 257 0038 01        		.byte	1
 258 0039 00        		.byte	0
 259 003a 09        		.byte	9
 260 003b 21        		.byte	33
 261 003c 1101      		.word	273
 262 003e 00        		.byte	0
 263 003f 01        		.byte	1
 264 0040 22        		.byte	34
 265 0041 3F00      		.word	63
 266 0043 07        		.byte	7
 267 0044 05        		.byte	5
 268 0045 81        		.byte	-127
 269 0046 03        		.byte	3
 270 0047 0800      		.word	8
 271 0049 0A        		.byte	10
 272 004a 09        		.byte	9
 273 004b 04        		.byte	4
 274 004c 01        		.byte	1
 275 004d 00        		.byte	0
 276 004e 01        		.byte	1
 277 004f 03        		.byte	3
 278 0050 01        		.byte	1
 279 0051 02        		.byte	2
 280 0052 00        		.byte	0
 281 0053 09        		.byte	9
 282 0054 21        		.byte	33
 283 0055 1101      		.word	273
 284 0057 00        		.byte	0
 285 0058 01        		.byte	1
 286 0059 22        		.byte	34
 287 005a 4D00      		.word	77
 288 005c 07        		.byte	7
 289 005d 05        		.byte	5
 290 005e 82        		.byte	-126
 291 005f 03        		.byte	3
 292 0060 0800      		.word	8
 293 0062 0A        		.byte	10
 294 0063 09        		.byte	9
 295 0064 04        		.byte	4
 296 0065 02        		.byte	2
 297 0066 00        		.byte	0
 298 0067 01        		.byte	1
 299 0068 03        		.byte	3
 300 0069 00        		.byte	0
 301 006a 00        		.byte	0
 302 006b 00        		.byte	0
 303 006c 09        		.byte	9
 304 006d 21        		.byte	33
 305 006e 1101      		.word	273
 306 0070 00        		.byte	0
 307 0071 01        		.byte	1
 308 0072 22        		.byte	34
 309 0073 3600      		.word	54
 310 0075 07        		.byte	7
 311 0076 05        		.byte	5
 312 0077 83        		.byte	-125
 313 0078 03        		.byte	3
 314 0079 0800      		.word	8
 315 007b 0A        		.byte	10
 316 007c 09        		.byte	9
 317 007d 04        		.byte	4
 318 007e 03        		.byte	3
 319 007f 00        		.byte	0
 320 0080 01        		.byte	1
 321 0081 03        		.byte	3
 322 0082 00        		.byte	0
 323 0083 00        		.byte	0
 324 0084 00        		.byte	0
 325 0085 09        		.byte	9
 326 0086 21        		.byte	33
 327 0087 1101      		.word	273
 328 0089 00        		.byte	0
 329 008a 01        		.byte	1
 330 008b 22        		.byte	34
 331 008c 3900      		.word	57
 332 008e 07        		.byte	7
 333 008f 05        		.byte	5
 334 0090 84        		.byte	-124
 335 0091 03        		.byte	3
 336 0092 1000      		.word	16
 337 0094 01        		.byte	1
 338               	.global	DeviceDescriptor
 341               	DeviceDescriptor:
 342 0095 12        		.byte	18
 343 0096 01        		.byte	1
 344 0097 1001      		.word	272
 345 0099 00        		.byte	0
 346 009a 00        		.byte	0
 347 009b 00        		.byte	0
 348 009c 08        		.byte	8
 349 009d EDFE      		.word	-275
 350 009f FECA      		.word	-13570
 351 00a1 0401      		.word	260
 352 00a3 01        		.byte	1
 353 00a4 02        		.byte	2
 354 00a5 00        		.byte	0
 355 00a6 01        		.byte	1
 356               	.global	NKROReport
 359               	NKROReport:
 360 00a7 05        		.byte	5
 361 00a8 01        		.byte	1
 362 00a9 09        		.byte	9
 363 00aa 06        		.byte	6
 364 00ab A1        		.byte	-95
 365 00ac 01        		.byte	1
 366 00ad 05        		.byte	5
 367 00ae 07        		.byte	7
 368 00af 19        		.byte	25
 369 00b0 E0        		.byte	-32
 370 00b1 29        		.byte	41
 371 00b2 E7        		.byte	-25
 372 00b3 15        		.byte	21
 373 00b4 00        		.byte	0
 374 00b5 25        		.byte	37
 375 00b6 01        		.byte	1
 376 00b7 95        		.byte	-107
 377 00b8 08        		.byte	8
 378 00b9 75        		.byte	117
 379 00ba 01        		.byte	1
 380 00bb 81        		.byte	-127
 381 00bc 02        		.byte	2
 382 00bd 05        		.byte	5
 383 00be 08        		.byte	8
 384 00bf 19        		.byte	25
 385 00c0 01        		.byte	1
 386 00c1 29        		.byte	41
 387 00c2 05        		.byte	5
 388 00c3 95        		.byte	-107
 389 00c4 05        		.byte	5
 390 00c5 75        		.byte	117
 391 00c6 01        		.byte	1
 392 00c7 91        		.byte	-111
 393 00c8 02        		.byte	2
 394 00c9 95        		.byte	-107
 395 00ca 01        		.byte	1
 396 00cb 75        		.byte	117
 397 00cc 03        		.byte	3
 398 00cd 91        		.byte	-111
 399 00ce 01        		.byte	1
 400 00cf 05        		.byte	5
 401 00d0 07        		.byte	7
 402 00d1 19        		.byte	25
 403 00d2 00        		.byte	0
 404 00d3 29        		.byte	41
 405 00d4 77        		.byte	119
 406 00d5 15        		.byte	21
 407 00d6 00        		.byte	0
 408 00d7 25        		.byte	37
 409 00d8 01        		.byte	1
 410 00d9 95        		.byte	-107
 411 00da 78        		.byte	120
 412 00db 75        		.byte	117
 413 00dc 01        		.byte	1
 414 00dd 81        		.byte	-127
 415 00de 02        		.byte	2
 416 00df C0        		.byte	-64
 417               	.global	ExtrakeyReport
 420               	ExtrakeyReport:
 421 00e0 05        		.byte	5
 422 00e1 01        		.byte	1
 423 00e2 09        		.byte	9
 424 00e3 80        		.byte	-128
 425 00e4 A1        		.byte	-95
 426 00e5 01        		.byte	1
 427 00e6 85        		.byte	-123
 428 00e7 02        		.byte	2
 429 00e8 16        		.byte	22
 430 00e9 01        		.byte	1
 431 00ea 00        		.byte	0
 432 00eb 26        		.byte	38
 433 00ec B7        		.byte	-73
 434 00ed 00        		.byte	0
 435 00ee 1A        		.byte	26
 436 00ef 01        		.byte	1
 437 00f0 00        		.byte	0
 438 00f1 2A        		.byte	42
 439 00f2 B7        		.byte	-73
 440 00f3 00        		.byte	0
 441 00f4 75        		.byte	117
 442 00f5 10        		.byte	16
 443 00f6 95        		.byte	-107
 444 00f7 01        		.byte	1
 445 00f8 81        		.byte	-127
 446 00f9 00        		.byte	0
 447 00fa C0        		.byte	-64
 448 00fb 05        		.byte	5
 449 00fc 0C        		.byte	12
 450 00fd 09        		.byte	9
 451 00fe 01        		.byte	1
 452 00ff A1        		.byte	-95
 453 0100 01        		.byte	1
 454 0101 85        		.byte	-123
 455 0102 03        		.byte	3
 456 0103 16        		.byte	22
 457 0104 01        		.byte	1
 458 0105 00        		.byte	0
 459 0106 26        		.byte	38
 460 0107 9C        		.byte	-100
 461 0108 02        		.byte	2
 462 0109 1A        		.byte	26
 463 010a 01        		.byte	1
 464 010b 00        		.byte	0
 465 010c 2A        		.byte	42
 466 010d 9C        		.byte	-100
 467 010e 02        		.byte	2
 468 010f 75        		.byte	117
 469 0110 10        		.byte	16
 470 0111 95        		.byte	-107
 471 0112 01        		.byte	1
 472 0113 81        		.byte	-127
 473 0114 00        		.byte	0
 474 0115 C0        		.byte	-64
 475               	.global	MouseReport
 478               	MouseReport:
 479 0116 05        		.byte	5
 480 0117 01        		.byte	1
 481 0118 09        		.byte	9
 482 0119 02        		.byte	2
 483 011a A1        		.byte	-95
 484 011b 01        		.byte	1
 485 011c 09        		.byte	9
 486 011d 01        		.byte	1
 487 011e A1        		.byte	-95
 488 011f 00        		.byte	0
 489 0120 05        		.byte	5
 490 0121 09        		.byte	9
 491 0122 19        		.byte	25
 492 0123 01        		.byte	1
 493 0124 29        		.byte	41
 494 0125 05        		.byte	5
 495 0126 15        		.byte	21
 496 0127 00        		.byte	0
 497 0128 25        		.byte	37
 498 0129 01        		.byte	1
 499 012a 95        		.byte	-107
 500 012b 05        		.byte	5
 501 012c 75        		.byte	117
 502 012d 01        		.byte	1
 503 012e 81        		.byte	-127
 504 012f 02        		.byte	2
 505 0130 95        		.byte	-107
 506 0131 01        		.byte	1
 507 0132 75        		.byte	117
 508 0133 03        		.byte	3
 509 0134 81        		.byte	-127
 510 0135 01        		.byte	1
 511 0136 05        		.byte	5
 512 0137 01        		.byte	1
 513 0138 09        		.byte	9
 514 0139 30        		.byte	48
 515 013a 09        		.byte	9
 516 013b 31        		.byte	49
 517 013c 15        		.byte	21
 518 013d 81        		.byte	-127
 519 013e 25        		.byte	37
 520 013f 7F        		.byte	127
 521 0140 95        		.byte	-107
 522 0141 02        		.byte	2
 523 0142 75        		.byte	117
 524 0143 08        		.byte	8
 525 0144 81        		.byte	-127
 526 0145 06        		.byte	6
 527 0146 09        		.byte	9
 528 0147 38        		.byte	56
 529 0148 15        		.byte	21
 530 0149 81        		.byte	-127
 531 014a 25        		.byte	37
 532 014b 7F        		.byte	127
 533 014c 95        		.byte	-107
 534 014d 01        		.byte	1
 535 014e 75        		.byte	117
 536 014f 08        		.byte	8
 537 0150 81        		.byte	-127
 538 0151 06        		.byte	6
 539 0152 05        		.byte	5
 540 0153 0C        		.byte	12
 541 0154 0A        		.byte	10
 542 0155 38        		.byte	56
 543 0156 02        		.byte	2
 544 0157 15        		.byte	21
 545 0158 81        		.byte	-127
 546 0159 25        		.byte	37
 547 015a 7F        		.byte	127
 548 015b 95        		.byte	-107
 549 015c 01        		.byte	1
 550 015d 75        		.byte	117
 551 015e 08        		.byte	8
 552 015f 81        		.byte	-127
 553 0160 06        		.byte	6
 554 0161 C0        		.byte	-64
 555 0162 C0        		.byte	-64
 556               	.global	KeyboardReport
 559               	KeyboardReport:
 560 0163 05        		.byte	5
 561 0164 01        		.byte	1
 562 0165 09        		.byte	9
 563 0166 06        		.byte	6
 564 0167 A1        		.byte	-95
 565 0168 01        		.byte	1
 566 0169 05        		.byte	5
 567 016a 07        		.byte	7
 568 016b 19        		.byte	25
 569 016c E0        		.byte	-32
 570 016d 29        		.byte	41
 571 016e E7        		.byte	-25
 572 016f 15        		.byte	21
 573 0170 00        		.byte	0
 574 0171 25        		.byte	37
 575 0172 01        		.byte	1
 576 0173 95        		.byte	-107
 577 0174 08        		.byte	8
 578 0175 75        		.byte	117
 579 0176 01        		.byte	1
 580 0177 81        		.byte	-127
 581 0178 02        		.byte	2
 582 0179 95        		.byte	-107
 583 017a 01        		.byte	1
 584 017b 75        		.byte	117
 585 017c 08        		.byte	8
 586 017d 81        		.byte	-127
 587 017e 01        		.byte	1
 588 017f 05        		.byte	5
 589 0180 08        		.byte	8
 590 0181 19        		.byte	25
 591 0182 01        		.byte	1
 592 0183 29        		.byte	41
 593 0184 05        		.byte	5
 594 0185 95        		.byte	-107
 595 0186 05        		.byte	5
 596 0187 75        		.byte	117
 597 0188 01        		.byte	1
 598 0189 91        		.byte	-111
 599 018a 02        		.byte	2
 600 018b 95        		.byte	-107
 601 018c 01        		.byte	1
 602 018d 75        		.byte	117
 603 018e 03        		.byte	3
 604 018f 91        		.byte	-111
 605 0190 01        		.byte	1
 606 0191 05        		.byte	5
 607 0192 07        		.byte	7
 608 0193 19        		.byte	25
 609 0194 00        		.byte	0
 610 0195 29        		.byte	41
 611 0196 FF        		.byte	-1
 612 0197 15        		.byte	21
 613 0198 00        		.byte	0
 614 0199 25        		.byte	37
 615 019a FF        		.byte	-1
 616 019b 95        		.byte	-107
 617 019c 06        		.byte	6
 618 019d 75        		.byte	117
 619 019e 08        		.byte	8
 620 019f 81        		.byte	-127
 621 01a0 00        		.byte	0
 622 01a1 C0        		.byte	-64
 623               		.section	.rodata
 626               	CSWTCH.2:
 627 0000 0000      		.word	ConfigurationDescriptor+18
 628 0002 0000      		.word	ConfigurationDescriptor+43
 629 0004 0000      		.word	ConfigurationDescriptor+68
 630 0006 0000      		.word	ConfigurationDescriptor+93
 633               	CSWTCH.4:
 634 0008 0000      		.word	KeyboardReport
 635 000a 0000      		.word	MouseReport
 636 000c 0000      		.word	ExtrakeyReport
 637 000e 0000      		.word	NKROReport
 640               	CSWTCH.5:
 641 0010 3F        		.byte	63
 642 0011 4D        		.byte	77
 643 0012 36        		.byte	54
 644 0013 39        		.byte	57
 645               		.text
 646               	.Letext0:
 647               		.file 2 "/usr/local/Cellar/avr-gcc/4.7.2/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
 648               		.file 3 "/usr/local/Cellar/avr-gcc/4.7.2/lib/gcc/avr/4.7.2/include/stddef.h"
 649               		.file 4 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 650               		.file 5 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 651               		.file 6 "../../protocol/lufa/descriptor.h"
 652               		.file 7 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 descriptor.c
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:4      *ABS*:000000000000003f __SREG__
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:13     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:241    .progmem.data:0000000000000028 ConfigurationDescriptor
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:234    .progmem.data:0000000000000024 LanguageString
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:220    .progmem.data:0000000000000014 ManufacturerString
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:204    .progmem.data:0000000000000000 ProductString
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:626    .rodata:0000000000000000 CSWTCH.2
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:633    .rodata:0000000000000008 CSWTCH.4
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:640    .rodata:0000000000000010 CSWTCH.5
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:341    .progmem.data:0000000000000095 DeviceDescriptor
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:359    .progmem.data:00000000000000a7 NKROReport
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:420    .progmem.data:00000000000000e0 ExtrakeyReport
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:478    .progmem.data:0000000000000116 MouseReport
/var/folders/kj/w_bbx2ws73sgrgbctpd6c4hr0000gn/T//cckiiW8F.s:559    .progmem.data:0000000000000163 KeyboardReport

UNDEFINED SYMBOLS
__do_copy_data
