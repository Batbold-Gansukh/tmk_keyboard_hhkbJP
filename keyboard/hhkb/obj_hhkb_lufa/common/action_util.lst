   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB100:
  15               		.file 1 "../../common/action_util.c"
   1:../../common/action_util.c **** /*
   2:../../common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../common/action_util.c **** 
   4:../../common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/action_util.c **** (at your option) any later version.
   8:../../common/action_util.c **** 
   9:../../common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/action_util.c **** GNU General Public License for more details.
  13:../../common/action_util.c **** 
  14:../../common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/action_util.c **** */
  17:../../common/action_util.c **** #include "host.h"
  18:../../common/action_util.c **** #include "report.h"
  19:../../common/action_util.c **** #include "debug.h"
  20:../../common/action_util.c **** #include "action_util.h"
  21:../../common/action_util.c **** #include "timer.h"
  22:../../common/action_util.c **** 
  23:../../common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../common/action_util.c **** #endif
  29:../../common/action_util.c **** 
  30:../../common/action_util.c **** static uint8_t real_mods = 0;
  31:../../common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../common/action_util.c **** 
  33:../../common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../common/action_util.c **** #define RO_ADD(a, b) ((a + b) % REPORT_KEYS)
  35:../../common/action_util.c **** #define RO_SUB(a, b) ((a - b + REPORT_KEYS) % REPORT_KEYS)
  36:../../common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../common/action_util.c **** static int8_t cb_head = 0;
  39:../../common/action_util.c **** static int8_t cb_tail = 0;
  40:../../common/action_util.c **** static int8_t cb_count = 0;
  41:../../common/action_util.c **** #endif
  42:../../common/action_util.c **** 
  43:../../common/action_util.c **** // TODO: pointer variable is not needed
  44:../../common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../common/action_util.c **** 
  47:../../common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../common/action_util.c **** #endif
  52:../../common/action_util.c **** #endif
  53:../../common/action_util.c **** 
  54:../../common/action_util.c **** 
  55:../../common/action_util.c **** void send_keyboard_report(void) {
  56:../../common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../common/action_util.c ****     if (oneshot_mods) {
  60:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../common/action_util.c ****             clear_oneshot_mods();
  64:../../common/action_util.c ****         }
  65:../../common/action_util.c **** #endif
  66:../../common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../common/action_util.c ****         if (has_anykey()) {
  68:../../common/action_util.c ****             clear_oneshot_mods();
  69:../../common/action_util.c ****         }
  70:../../common/action_util.c ****     }
  71:../../common/action_util.c **** #endif
  72:../../common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../common/action_util.c **** }
  74:../../common/action_util.c **** 
  75:../../common/action_util.c **** /* key */
  76:../../common/action_util.c **** void add_key(uint8_t key)
  77:../../common/action_util.c **** {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  78:../../common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../common/action_util.c ****     if (keyboard_nkro) {
  23               		.loc 1 79 0
  24 0000 9091 0000 		lds r25,keyboard_nkro
  25 0004 9923      		tst r25
  26 0006 01F0      		breq .L2
  27               	.LVL1:
  28               	.LBB6:
  29               	.LBB7:
  80:../../common/action_util.c ****         add_key_bit(key);
  81:../../common/action_util.c ****         return;
  82:../../common/action_util.c ****     }
  83:../../common/action_util.c **** #endif
  84:../../common/action_util.c ****     add_key_byte(key);
  85:../../common/action_util.c **** }
  86:../../common/action_util.c **** 
  87:../../common/action_util.c **** void del_key(uint8_t key)
  88:../../common/action_util.c **** {
  89:../../common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../common/action_util.c ****     if (keyboard_nkro) {
  91:../../common/action_util.c ****         del_key_bit(key);
  92:../../common/action_util.c ****         return;
  93:../../common/action_util.c ****     }
  94:../../common/action_util.c **** #endif
  95:../../common/action_util.c ****     del_key_byte(key);
  96:../../common/action_util.c **** }
  97:../../common/action_util.c **** 
  98:../../common/action_util.c **** void clear_keys(void)
  99:../../common/action_util.c **** {
 100:../../common/action_util.c ****     // not clear mods
 101:../../common/action_util.c ****     for (int8_t i = 1; i < REPORT_SIZE; i++) {
 102:../../common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../common/action_util.c ****     }
 104:../../common/action_util.c **** }
 105:../../common/action_util.c **** 
 106:../../common/action_util.c **** 
 107:../../common/action_util.c **** /* modifier */
 108:../../common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../common/action_util.c **** 
 114:../../common/action_util.c **** /* weak modifier */
 115:../../common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../common/action_util.c **** 
 121:../../common/action_util.c **** /* Oneshot modifier */
 122:../../common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../common/action_util.c **** {
 125:../../common/action_util.c ****     oneshot_mods = mods;
 126:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../common/action_util.c ****     oneshot_time = timer_read();
 128:../../common/action_util.c **** #endif
 129:../../common/action_util.c **** }
 130:../../common/action_util.c **** void clear_oneshot_mods(void)
 131:../../common/action_util.c **** {
 132:../../common/action_util.c ****     oneshot_mods = 0;
 133:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../common/action_util.c ****     oneshot_time = 0;
 135:../../common/action_util.c **** #endif
 136:../../common/action_util.c **** }
 137:../../common/action_util.c **** #endif
 138:../../common/action_util.c **** 
 139:../../common/action_util.c **** 
 140:../../common/action_util.c **** 
 141:../../common/action_util.c **** 
 142:../../common/action_util.c **** /*
 143:../../common/action_util.c ****  * inspect keyboard state
 144:../../common/action_util.c ****  */
 145:../../common/action_util.c **** uint8_t has_anykey(void)
 146:../../common/action_util.c **** {
 147:../../common/action_util.c ****     uint8_t cnt = 0;
 148:../../common/action_util.c ****     for (uint8_t i = 1; i < REPORT_SIZE; i++) {
 149:../../common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../common/action_util.c ****             cnt++;
 151:../../common/action_util.c ****     }
 152:../../common/action_util.c ****     return cnt;
 153:../../common/action_util.c **** }
 154:../../common/action_util.c **** 
 155:../../common/action_util.c **** uint8_t has_anymod(void)
 156:../../common/action_util.c **** {
 157:../../common/action_util.c ****     return bitpop(real_mods);
 158:../../common/action_util.c **** }
 159:../../common/action_util.c **** 
 160:../../common/action_util.c **** uint8_t get_first_key(void)
 161:../../common/action_util.c **** {
 162:../../common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../common/action_util.c ****     if (keyboard_nkro) {
 164:../../common/action_util.c ****         uint8_t i = 0;
 165:../../common/action_util.c ****         for (; i < REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../common/action_util.c ****             ;
 167:../../common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../common/action_util.c ****     }
 169:../../common/action_util.c **** #endif
 170:../../common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../common/action_util.c ****     uint8_t i = cb_head;
 172:../../common/action_util.c ****     do {
 173:../../common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../common/action_util.c ****             break;
 175:../../common/action_util.c ****         }
 176:../../common/action_util.c ****         i = RO_INC(i);
 177:../../common/action_util.c ****     } while (i != cb_tail);
 178:../../common/action_util.c ****     return keyboard_report->keys[i];
 179:../../common/action_util.c **** #else
 180:../../common/action_util.c ****     return keyboard_report->keys[0];
 181:../../common/action_util.c **** #endif
 182:../../common/action_util.c **** }
 183:../../common/action_util.c **** 
 184:../../common/action_util.c **** 
 185:../../common/action_util.c **** 
 186:../../common/action_util.c **** /* local functions */
 187:../../common/action_util.c **** static inline void add_key_byte(uint8_t code)
 188:../../common/action_util.c **** {
 189:../../common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../common/action_util.c ****     int8_t i = cb_head;
 191:../../common/action_util.c ****     int8_t empty = -1;
 192:../../common/action_util.c ****     if (cb_count) {
 193:../../common/action_util.c ****         do {
 194:../../common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../common/action_util.c ****                 return;
 196:../../common/action_util.c ****             }
 197:../../common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../common/action_util.c ****                 empty = i;
 199:../../common/action_util.c ****             }
 200:../../common/action_util.c ****             i = RO_INC(i);
 201:../../common/action_util.c ****         } while (i != cb_tail);
 202:../../common/action_util.c ****         if (i == cb_tail) {
 203:../../common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../common/action_util.c ****                 // buffer is full
 205:../../common/action_util.c ****                 if (empty == -1) {
 206:../../common/action_util.c ****                     // pop head when has no empty space
 207:../../common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../common/action_util.c ****                     cb_count--;
 209:../../common/action_util.c ****                 }
 210:../../common/action_util.c ****                 else {
 211:../../common/action_util.c ****                     // left shift when has empty space
 212:../../common/action_util.c ****                     uint8_t offset = 1;
 213:../../common/action_util.c ****                     i = RO_INC(empty);
 214:../../common/action_util.c ****                     do {
 215:../../common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../common/action_util.c ****                             empty = RO_INC(empty);
 219:../../common/action_util.c ****                         }
 220:../../common/action_util.c ****                         else {
 221:../../common/action_util.c ****                             offset++;
 222:../../common/action_util.c ****                         }
 223:../../common/action_util.c ****                         i = RO_INC(i);
 224:../../common/action_util.c ****                     } while (i != cb_tail);
 225:../../common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../common/action_util.c ****                 }
 227:../../common/action_util.c ****             }
 228:../../common/action_util.c ****         }
 229:../../common/action_util.c ****     }
 230:../../common/action_util.c ****     // add to tail
 231:../../common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../common/action_util.c ****     cb_count++;
 234:../../common/action_util.c **** #else
 235:../../common/action_util.c ****     int8_t i = 0;
 236:../../common/action_util.c ****     int8_t empty = -1;
 237:../../common/action_util.c ****     for (; i < REPORT_KEYS; i++) {
 238:../../common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 239:../../common/action_util.c ****             break;
 240:../../common/action_util.c ****         }
 241:../../common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 242:../../common/action_util.c ****             empty = i;
 243:../../common/action_util.c ****         }
 244:../../common/action_util.c ****     }
 245:../../common/action_util.c ****     if (i == REPORT_KEYS) {
 246:../../common/action_util.c ****         if (empty != -1) {
 247:../../common/action_util.c ****             keyboard_report->keys[empty] = code;
 248:../../common/action_util.c ****         }
 249:../../common/action_util.c ****     }
 250:../../common/action_util.c **** #endif
 251:../../common/action_util.c **** }
 252:../../common/action_util.c **** 
 253:../../common/action_util.c **** static inline void del_key_byte(uint8_t code)
 254:../../common/action_util.c **** {
 255:../../common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../common/action_util.c ****     uint8_t i = cb_head;
 257:../../common/action_util.c ****     if (cb_count) {
 258:../../common/action_util.c ****         do {
 259:../../common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../common/action_util.c ****                 cb_count--;
 262:../../common/action_util.c ****                 if (cb_count == 0) {
 263:../../common/action_util.c ****                     // reset head and tail
 264:../../common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../common/action_util.c ****                 }
 266:../../common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../common/action_util.c ****                     // left shift when next to tail
 268:../../common/action_util.c ****                     do {
 269:../../common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../common/action_util.c ****                             break;
 272:../../common/action_util.c ****                         }
 273:../../common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../common/action_util.c ****                 }
 275:../../common/action_util.c ****                 break;
 276:../../common/action_util.c ****             }
 277:../../common/action_util.c ****             i = RO_INC(i);
 278:../../common/action_util.c ****         } while (i != cb_tail);
 279:../../common/action_util.c ****     }
 280:../../common/action_util.c **** #else
 281:../../common/action_util.c ****     for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 282:../../common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 283:../../common/action_util.c ****             keyboard_report->keys[i] = 0;
 284:../../common/action_util.c ****         }
 285:../../common/action_util.c ****     }
 286:../../common/action_util.c **** #endif
 287:../../common/action_util.c **** }
 288:../../common/action_util.c **** 
 289:../../common/action_util.c **** #ifdef NKRO_ENABLE
 290:../../common/action_util.c **** static inline void add_key_bit(uint8_t code)
 291:../../common/action_util.c **** {
 292:../../common/action_util.c ****     if ((code>>3) < REPORT_BITS) {
  30               		.loc 1 292 0
  31 0008 982F      		mov r25,r24
  32 000a 9695      		lsr r25
  33 000c 9695      		lsr r25
  34 000e 9695      		lsr r25
  35 0010 9F30      		cpi r25,lo8(15)
  36 0012 00F4      		brsh .L1
 293:../../common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
  37               		.loc 1 293 0
  38 0014 E091 0000 		lds r30,keyboard_report
  39 0018 F091 0000 		lds r31,keyboard_report+1
  40 001c E90F      		add r30,r25
  41 001e F11D      		adc r31,__zero_reg__
  42 0020 8770      		andi r24,lo8(7)
  43               	.LVL2:
  44 0022 21E0      		ldi r18,lo8(1)
  45 0024 30E0      		ldi r19,0
  46 0026 A901      		movw r20,r18
  47 0028 00C0      		rjmp 2f
  48               		1:
  49 002a 440F      		lsl r20
  50 002c 551F      		rol r21
  51               		2:
  52 002e 8A95      		dec r24
  53 0030 02F4      		brpl 1b
  54 0032 CA01      		movw r24,r20
  55 0034 9181      		ldd r25,Z+1
  56 0036 892B      		or r24,r25
  57 0038 8183      		std Z+1,r24
  58 003a 0895      		ret
  59               	.LVL3:
  60               	.L2:
  61               	.LBE7:
  62               	.LBE6:
  63               	.LBB8:
  64               	.LBB9:
 238:../../common/action_util.c ****             break;
  65               		.loc 1 238 0
  66 003c 2091 0000 		lds r18,keyboard_report
  67 0040 3091 0000 		lds r19,keyboard_report+1
  68 0044 F901      		movw r30,r18
  69 0046 3296      		adiw r30,2
  70 0048 9FEF      		ldi r25,lo8(-1)
  71 004a 40E0      		ldi r20,0
  72               	.L5:
  73               	.LVL4:
  74 004c 5191      		ld r21,Z+
  75 004e 5817      		cp r21,r24
  76 0050 01F0      		breq .L1
 241:../../common/action_util.c ****             empty = i;
  77               		.loc 1 241 0
  78 0052 9F3F      		cpi r25,lo8(-1)
  79 0054 01F4      		brne .L4
  80 0056 5111      		cpse r21,__zero_reg__
  81 0058 00C0      		rjmp .L4
  82 005a 942F      		mov r25,r20
  83               	.LVL5:
  84               	.L4:
  85 005c 4F5F      		subi r20,lo8(-(1))
  86               	.LVL6:
 237:../../common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  87               		.loc 1 237 0
  88 005e 4E30      		cpi r20,lo8(14)
  89 0060 01F4      		brne .L5
 246:../../common/action_util.c ****             keyboard_report->keys[empty] = code;
  90               		.loc 1 246 0
  91 0062 9F3F      		cpi r25,lo8(-1)
  92 0064 01F0      		breq .L1
 247:../../common/action_util.c ****         }
  93               		.loc 1 247 0
  94 0066 F901      		movw r30,r18
  95 0068 E90F      		add r30,r25
  96 006a F11D      		adc r31,__zero_reg__
  97 006c 97FD      		sbrc r25,7
  98 006e FA95      		dec r31
  99 0070 8283      		std Z+2,r24
 100 0072 0895      		ret
 101               	.LVL7:
 102               	.L1:
 103 0074 0895      		ret
 104               	.LBE9:
 105               	.LBE8:
 106               		.cfi_endproc
 107               	.LFE100:
 109               		.section	.text.del_key,"ax",@progbits
 110               	.global	del_key
 112               	del_key:
 113               	.LFB101:
  88:../../common/action_util.c **** #ifdef NKRO_ENABLE
 114               		.loc 1 88 0
 115               		.cfi_startproc
 116               	.LVL8:
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 0 */
 120               	.L__stack_usage = 0
  90:../../common/action_util.c ****         del_key_bit(key);
 121               		.loc 1 90 0
 122 0000 9091 0000 		lds r25,keyboard_nkro
 123 0004 9923      		tst r25
 124 0006 01F0      		breq .L12
 125               	.LVL9:
 126               	.LBB15:
 127               	.LBB16:
 294:../../common/action_util.c ****     } else {
 295:../../common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
 296:../../common/action_util.c ****     }
 297:../../common/action_util.c **** }
 298:../../common/action_util.c **** 
 299:../../common/action_util.c **** static inline void del_key_bit(uint8_t code)
 300:../../common/action_util.c **** {
 301:../../common/action_util.c ****     if ((code>>3) < REPORT_BITS) {
 128               		.loc 1 301 0
 129 0008 982F      		mov r25,r24
 130 000a 9695      		lsr r25
 131 000c 9695      		lsr r25
 132 000e 9695      		lsr r25
 133 0010 9F30      		cpi r25,lo8(15)
 134 0012 00F4      		brsh .L11
 302:../../common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 135               		.loc 1 302 0
 136 0014 E091 0000 		lds r30,keyboard_report
 137 0018 F091 0000 		lds r31,keyboard_report+1
 138 001c E90F      		add r30,r25
 139 001e F11D      		adc r31,__zero_reg__
 140 0020 8770      		andi r24,lo8(7)
 141               	.LVL10:
 142 0022 21E0      		ldi r18,lo8(1)
 143 0024 30E0      		ldi r19,0
 144 0026 A901      		movw r20,r18
 145 0028 00C0      		rjmp 2f
 146               		1:
 147 002a 440F      		lsl r20
 148 002c 551F      		rol r21
 149               		2:
 150 002e 8A95      		dec r24
 151 0030 02F4      		brpl 1b
 152 0032 CA01      		movw r24,r20
 153 0034 8095      		com r24
 154 0036 9181      		ldd r25,Z+1
 155 0038 8923      		and r24,r25
 156 003a 8183      		std Z+1,r24
 157 003c 0895      		ret
 158               	.LVL11:
 159               	.L12:
 160               	.LBE16:
 161               	.LBE15:
 162               	.LBB17:
 163               	.LBB18:
 282:../../common/action_util.c ****             keyboard_report->keys[i] = 0;
 164               		.loc 1 282 0
 165 003e 2091 0000 		lds r18,keyboard_report
 166 0042 3091 0000 		lds r19,keyboard_report+1
 167 0046 F901      		movw r30,r18
 168 0048 3296      		adiw r30,2
 169 004a 205F      		subi r18,-16
 170 004c 3F4F      		sbci r19,-1
 171               	.L16:
 172               	.LVL12:
 173 004e 9081      		ld r25,Z
 174 0050 9813      		cpse r25,r24
 175 0052 00C0      		rjmp .L15
 283:../../common/action_util.c ****         }
 176               		.loc 1 283 0
 177 0054 1082      		st Z,__zero_reg__
 178               	.L15:
 179               	.LVL13:
 180 0056 3196      		adiw r30,1
 181               	.LVL14:
 281:../../common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 182               		.loc 1 281 0
 183 0058 E217      		cp r30,r18
 184 005a F307      		cpc r31,r19
 185 005c 01F4      		brne .L16
 186               	.LVL15:
 187               	.L11:
 188 005e 0895      		ret
 189               	.LBE18:
 190               	.LBE17:
 191               		.cfi_endproc
 192               	.LFE101:
 194               		.section	.text.clear_keys,"ax",@progbits
 195               	.global	clear_keys
 197               	clear_keys:
 198               	.LFB102:
  99:../../common/action_util.c ****     // not clear mods
 199               		.loc 1 99 0
 200               		.cfi_startproc
 201               	/* prologue: function */
 202               	/* frame size = 0 */
 203               	/* stack size = 0 */
 204               	.L__stack_usage = 0
 205               	.LVL16:
  99:../../common/action_util.c ****     // not clear mods
 206               		.loc 1 99 0
 207 0000 81E0      		ldi r24,lo8(1)
 208 0002 90E0      		ldi r25,0
 209               	.LVL17:
 210               	.L20:
 211               	.LBB19:
 102:../../common/action_util.c ****     }
 212               		.loc 1 102 0 discriminator 3
 213 0004 E091 0000 		lds r30,keyboard_report
 214 0008 F091 0000 		lds r31,keyboard_report+1
 215 000c E80F      		add r30,r24
 216 000e F91F      		adc r31,r25
 217 0010 1082      		st Z,__zero_reg__
 218               	.LVL18:
 219 0012 0196      		adiw r24,1
 220               	.LVL19:
 101:../../common/action_util.c ****         keyboard_report->raw[i] = 0;
 221               		.loc 1 101 0 discriminator 3
 222 0014 8031      		cpi r24,16
 223 0016 9105      		cpc r25,__zero_reg__
 224 0018 01F4      		brne .L20
 225               	/* epilogue start */
 226               	.LBE19:
 104:../../common/action_util.c **** 
 227               		.loc 1 104 0
 228 001a 0895      		ret
 229               		.cfi_endproc
 230               	.LFE102:
 232               		.section	.text.get_mods,"ax",@progbits
 233               	.global	get_mods
 235               	get_mods:
 236               	.LFB103:
 108:../../common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 237               		.loc 1 108 0
 238               		.cfi_startproc
 239               	/* prologue: function */
 240               	/* frame size = 0 */
 241               	/* stack size = 0 */
 242               	.L__stack_usage = 0
 108:../../common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 243               		.loc 1 108 0
 244 0000 8091 0000 		lds r24,real_mods
 245 0004 0895      		ret
 246               		.cfi_endproc
 247               	.LFE103:
 249               		.section	.text.add_mods,"ax",@progbits
 250               	.global	add_mods
 252               	add_mods:
 253               	.LFB104:
 109:../../common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 254               		.loc 1 109 0
 255               		.cfi_startproc
 256               	.LVL20:
 257               	/* prologue: function */
 258               	/* frame size = 0 */
 259               	/* stack size = 0 */
 260               	.L__stack_usage = 0
 109:../../common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 261               		.loc 1 109 0
 262 0000 9091 0000 		lds r25,real_mods
 263 0004 892B      		or r24,r25
 264               	.LVL21:
 265 0006 8093 0000 		sts real_mods,r24
 266 000a 0895      		ret
 267               		.cfi_endproc
 268               	.LFE104:
 270               		.section	.text.del_mods,"ax",@progbits
 271               	.global	del_mods
 273               	del_mods:
 274               	.LFB105:
 110:../../common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 275               		.loc 1 110 0
 276               		.cfi_startproc
 277               	.LVL22:
 278               	/* prologue: function */
 279               	/* frame size = 0 */
 280               	/* stack size = 0 */
 281               	.L__stack_usage = 0
 110:../../common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 282               		.loc 1 110 0
 283 0000 8095      		com r24
 284               	.LVL23:
 285 0002 9091 0000 		lds r25,real_mods
 286 0006 8923      		and r24,r25
 287               	.LVL24:
 288 0008 8093 0000 		sts real_mods,r24
 289 000c 0895      		ret
 290               		.cfi_endproc
 291               	.LFE105:
 293               		.section	.text.set_mods,"ax",@progbits
 294               	.global	set_mods
 296               	set_mods:
 297               	.LFB106:
 111:../../common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 298               		.loc 1 111 0
 299               		.cfi_startproc
 300               	.LVL25:
 301               	/* prologue: function */
 302               	/* frame size = 0 */
 303               	/* stack size = 0 */
 304               	.L__stack_usage = 0
 111:../../common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 305               		.loc 1 111 0
 306 0000 8093 0000 		sts real_mods,r24
 307 0004 0895      		ret
 308               		.cfi_endproc
 309               	.LFE106:
 311               		.section	.text.clear_mods,"ax",@progbits
 312               	.global	clear_mods
 314               	clear_mods:
 315               	.LFB107:
 112:../../common/action_util.c **** 
 316               		.loc 1 112 0
 317               		.cfi_startproc
 318               	/* prologue: function */
 319               	/* frame size = 0 */
 320               	/* stack size = 0 */
 321               	.L__stack_usage = 0
 112:../../common/action_util.c **** 
 322               		.loc 1 112 0
 323 0000 1092 0000 		sts real_mods,__zero_reg__
 324 0004 0895      		ret
 325               		.cfi_endproc
 326               	.LFE107:
 328               		.section	.text.get_weak_mods,"ax",@progbits
 329               	.global	get_weak_mods
 331               	get_weak_mods:
 332               	.LFB108:
 115:../../common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 333               		.loc 1 115 0
 334               		.cfi_startproc
 335               	/* prologue: function */
 336               	/* frame size = 0 */
 337               	/* stack size = 0 */
 338               	.L__stack_usage = 0
 115:../../common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 339               		.loc 1 115 0
 340 0000 8091 0000 		lds r24,weak_mods
 341 0004 0895      		ret
 342               		.cfi_endproc
 343               	.LFE108:
 345               		.section	.text.add_weak_mods,"ax",@progbits
 346               	.global	add_weak_mods
 348               	add_weak_mods:
 349               	.LFB109:
 116:../../common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 350               		.loc 1 116 0
 351               		.cfi_startproc
 352               	.LVL26:
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 0 */
 356               	.L__stack_usage = 0
 116:../../common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 357               		.loc 1 116 0
 358 0000 9091 0000 		lds r25,weak_mods
 359 0004 892B      		or r24,r25
 360               	.LVL27:
 361 0006 8093 0000 		sts weak_mods,r24
 362 000a 0895      		ret
 363               		.cfi_endproc
 364               	.LFE109:
 366               		.section	.text.del_weak_mods,"ax",@progbits
 367               	.global	del_weak_mods
 369               	del_weak_mods:
 370               	.LFB110:
 117:../../common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 371               		.loc 1 117 0
 372               		.cfi_startproc
 373               	.LVL28:
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 0 */
 377               	.L__stack_usage = 0
 117:../../common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 378               		.loc 1 117 0
 379 0000 8095      		com r24
 380               	.LVL29:
 381 0002 9091 0000 		lds r25,weak_mods
 382 0006 8923      		and r24,r25
 383               	.LVL30:
 384 0008 8093 0000 		sts weak_mods,r24
 385 000c 0895      		ret
 386               		.cfi_endproc
 387               	.LFE110:
 389               		.section	.text.set_weak_mods,"ax",@progbits
 390               	.global	set_weak_mods
 392               	set_weak_mods:
 393               	.LFB111:
 118:../../common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 394               		.loc 1 118 0
 395               		.cfi_startproc
 396               	.LVL31:
 397               	/* prologue: function */
 398               	/* frame size = 0 */
 399               	/* stack size = 0 */
 400               	.L__stack_usage = 0
 118:../../common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 401               		.loc 1 118 0
 402 0000 8093 0000 		sts weak_mods,r24
 403 0004 0895      		ret
 404               		.cfi_endproc
 405               	.LFE111:
 407               		.section	.text.clear_weak_mods,"ax",@progbits
 408               	.global	clear_weak_mods
 410               	clear_weak_mods:
 411               	.LFB112:
 119:../../common/action_util.c **** 
 412               		.loc 1 119 0
 413               		.cfi_startproc
 414               	/* prologue: function */
 415               	/* frame size = 0 */
 416               	/* stack size = 0 */
 417               	.L__stack_usage = 0
 119:../../common/action_util.c **** 
 418               		.loc 1 119 0
 419 0000 1092 0000 		sts weak_mods,__zero_reg__
 420 0004 0895      		ret
 421               		.cfi_endproc
 422               	.LFE112:
 424               		.section	.text.set_oneshot_mods,"ax",@progbits
 425               	.global	set_oneshot_mods
 427               	set_oneshot_mods:
 428               	.LFB113:
 124:../../common/action_util.c ****     oneshot_mods = mods;
 429               		.loc 1 124 0
 430               		.cfi_startproc
 431               	.LVL32:
 432               	/* prologue: function */
 433               	/* frame size = 0 */
 434               	/* stack size = 0 */
 435               	.L__stack_usage = 0
 125:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 436               		.loc 1 125 0
 437 0000 8093 0000 		sts oneshot_mods,r24
 127:../../common/action_util.c **** #endif
 438               		.loc 1 127 0
 439 0004 0E94 0000 		call timer_read
 440               	.LVL33:
 441 0008 9093 0000 		sts oneshot_time+1,r25
 442 000c 8093 0000 		sts oneshot_time,r24
 443 0010 0895      		ret
 444               		.cfi_endproc
 445               	.LFE113:
 447               		.section	.text.clear_oneshot_mods,"ax",@progbits
 448               	.global	clear_oneshot_mods
 450               	clear_oneshot_mods:
 451               	.LFB114:
 131:../../common/action_util.c ****     oneshot_mods = 0;
 452               		.loc 1 131 0
 453               		.cfi_startproc
 454               	/* prologue: function */
 455               	/* frame size = 0 */
 456               	/* stack size = 0 */
 457               	.L__stack_usage = 0
 132:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 458               		.loc 1 132 0
 459 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 134:../../common/action_util.c **** #endif
 460               		.loc 1 134 0
 461 0004 1092 0000 		sts oneshot_time+1,__zero_reg__
 462 0008 1092 0000 		sts oneshot_time,__zero_reg__
 463 000c 0895      		ret
 464               		.cfi_endproc
 465               	.LFE114:
 467               		.section	.text.has_anykey,"ax",@progbits
 468               	.global	has_anykey
 470               	has_anykey:
 471               	.LFB115:
 146:../../common/action_util.c ****     uint8_t cnt = 0;
 472               		.loc 1 146 0
 473               		.cfi_startproc
 474               	/* prologue: function */
 475               	/* frame size = 0 */
 476               	/* stack size = 0 */
 477               	.L__stack_usage = 0
 478               	.LVL34:
 479               	.LBB20:
 149:../../common/action_util.c ****             cnt++;
 480               		.loc 1 149 0
 481 0000 8091 0000 		lds r24,keyboard_report
 482 0004 9091 0000 		lds r25,keyboard_report+1
 483 0008 FC01      		movw r30,r24
 484 000a 3196      		adiw r30,1
 485 000c 9C01      		movw r18,r24
 486 000e 205F      		subi r18,-16
 487 0010 3F4F      		sbci r19,-1
 488               	.LBE20:
 147:../../common/action_util.c ****     for (uint8_t i = 1; i < REPORT_SIZE; i++) {
 489               		.loc 1 147 0
 490 0012 80E0      		ldi r24,0
 491               	.LVL35:
 492               	.L36:
 493               	.LBB21:
 149:../../common/action_util.c ****             cnt++;
 494               		.loc 1 149 0
 495 0014 9191      		ld r25,Z+
 496               	.LVL36:
 497 0016 9111      		cpse r25,__zero_reg__
 150:../../common/action_util.c ****     }
 498               		.loc 1 150 0
 499 0018 8F5F      		subi r24,lo8(-(1))
 500               	.LVL37:
 501               	.L35:
 148:../../common/action_util.c ****         if (keyboard_report->raw[i])
 502               		.loc 1 148 0 discriminator 2
 503 001a E217      		cp r30,r18
 504 001c F307      		cpc r31,r19
 505 001e 01F4      		brne .L36
 506               	/* epilogue start */
 507               	.LBE21:
 153:../../common/action_util.c **** 
 508               		.loc 1 153 0
 509 0020 0895      		ret
 510               		.cfi_endproc
 511               	.LFE115:
 513               		.section	.text.send_keyboard_report,"ax",@progbits
 514               	.global	send_keyboard_report
 516               	send_keyboard_report:
 517               	.LFB99:
  55:../../common/action_util.c ****     keyboard_report->mods  = real_mods;
 518               		.loc 1 55 0
 519               		.cfi_startproc
 520               	/* prologue: function */
 521               	/* frame size = 0 */
 522               	/* stack size = 0 */
 523               	.L__stack_usage = 0
  56:../../common/action_util.c ****     keyboard_report->mods |= weak_mods;
 524               		.loc 1 56 0
 525 0000 E091 0000 		lds r30,keyboard_report
 526 0004 F091 0000 		lds r31,keyboard_report+1
 527 0008 8091 0000 		lds r24,real_mods
 528 000c 8083      		st Z,r24
  57:../../common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 529               		.loc 1 57 0
 530 000e E091 0000 		lds r30,keyboard_report
 531 0012 F091 0000 		lds r31,keyboard_report+1
 532 0016 9081      		ld r25,Z
 533 0018 8091 0000 		lds r24,weak_mods
 534 001c 892B      		or r24,r25
 535 001e 8083      		st Z,r24
  59:../../common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 536               		.loc 1 59 0
 537 0020 8091 0000 		lds r24,oneshot_mods
 538 0024 8823      		tst r24
 539 0026 01F0      		breq .L43
  61:../../common/action_util.c ****             dprintf("Oneshot: timeout\n");
 540               		.loc 1 61 0
 541 0028 0E94 0000 		call timer_read
 542               	.LVL38:
 543 002c 2091 0000 		lds r18,oneshot_time
 544 0030 3091 0000 		lds r19,oneshot_time+1
 545 0034 8217      		cp r24,r18
 546 0036 9307      		cpc r25,r19
 547 0038 00F0      		brlo .L44
  61:../../common/action_util.c ****             dprintf("Oneshot: timeout\n");
 548               		.loc 1 61 0 is_stmt 0 discriminator 1
 549 003a 0E94 0000 		call timer_read
 550               	.LVL39:
 551 003e 2091 0000 		lds r18,oneshot_time
 552 0042 3091 0000 		lds r19,oneshot_time+1
 553 0046 821B      		sub r24,r18
 554 0048 930B      		sbc r25,r19
 555 004a 00C0      		rjmp .L55
 556               	.L44:
  61:../../common/action_util.c ****             dprintf("Oneshot: timeout\n");
 557               		.loc 1 61 0 discriminator 2
 558 004c 0E94 0000 		call timer_read
 559               	.LVL40:
 560 0050 2091 0000 		lds r18,oneshot_time
 561 0054 3091 0000 		lds r19,oneshot_time+1
 562 0058 2095      		com r18
 563 005a 3095      		com r19
 564 005c 820F      		add r24,r18
 565 005e 931F      		adc r25,r19
 566               	.L55:
 567 0060 8C32      		cpi r24,44
 568 0062 9140      		sbci r25,1
 569 0064 00F0      		brlo .L48
  63:../../common/action_util.c ****         }
 570               		.loc 1 63 0 is_stmt 1
 571 0066 0E94 0000 		call clear_oneshot_mods
 572               	.LVL41:
 573               	.L48:
  66:../../common/action_util.c ****         if (has_anykey()) {
 574               		.loc 1 66 0
 575 006a E091 0000 		lds r30,keyboard_report
 576 006e F091 0000 		lds r31,keyboard_report+1
 577 0072 9081      		ld r25,Z
 578 0074 8091 0000 		lds r24,oneshot_mods
 579 0078 892B      		or r24,r25
 580 007a 8083      		st Z,r24
  67:../../common/action_util.c ****             clear_oneshot_mods();
 581               		.loc 1 67 0
 582 007c 0E94 0000 		call has_anykey
 583               	.LVL42:
 584 0080 8111      		cpse r24,__zero_reg__
  68:../../common/action_util.c ****         }
 585               		.loc 1 68 0
 586 0082 0E94 0000 		call clear_oneshot_mods
 587               	.LVL43:
 588               	.L43:
  72:../../common/action_util.c **** }
 589               		.loc 1 72 0
 590 0086 8091 0000 		lds r24,keyboard_report
 591 008a 9091 0000 		lds r25,keyboard_report+1
 592 008e 0C94 0000 		jmp host_keyboard_send
 593               	.LVL44:
 594               		.cfi_endproc
 595               	.LFE99:
 597               		.section	.text.has_anymod,"ax",@progbits
 598               	.global	has_anymod
 600               	has_anymod:
 601               	.LFB116:
 156:../../common/action_util.c ****     return bitpop(real_mods);
 602               		.loc 1 156 0
 603               		.cfi_startproc
 604               	/* prologue: function */
 605               	/* frame size = 0 */
 606               	/* stack size = 0 */
 607               	.L__stack_usage = 0
 157:../../common/action_util.c **** }
 608               		.loc 1 157 0
 609 0000 8091 0000 		lds r24,real_mods
 610 0004 0C94 0000 		jmp bitpop
 611               	.LVL45:
 612               		.cfi_endproc
 613               	.LFE116:
 615               		.section	.text.get_first_key,"ax",@progbits
 616               	.global	get_first_key
 618               	get_first_key:
 619               	.LFB117:
 161:../../common/action_util.c **** #ifdef NKRO_ENABLE
 620               		.loc 1 161 0
 621               		.cfi_startproc
 622 0000 CF93      		push r28
 623               	.LCFI0:
 624               		.cfi_def_cfa_offset 3
 625               		.cfi_offset 28, -2
 626 0002 DF93      		push r29
 627               	.LCFI1:
 628               		.cfi_def_cfa_offset 4
 629               		.cfi_offset 29, -3
 630               	/* prologue: function */
 631               	/* frame size = 0 */
 632               	/* stack size = 2 */
 633               	.L__stack_usage = 2
 163:../../common/action_util.c ****         uint8_t i = 0;
 634               		.loc 1 163 0
 635 0004 8091 0000 		lds r24,keyboard_nkro
 636 0008 E091 0000 		lds r30,keyboard_report
 637 000c F091 0000 		lds r31,keyboard_report+1
 638 0010 8823      		tst r24
 639 0012 01F0      		breq .L58
 640 0014 DF01      		movw r26,r30
 641 0016 1196      		adiw r26,1
 642               	.LBB22:
 165:../../common/action_util.c ****             ;
 643               		.loc 1 165 0
 644 0018 C0E0      		ldi r28,0
 645               	.L59:
 646               	.LVL46:
 165:../../common/action_util.c ****             ;
 647               		.loc 1 165 0 is_stmt 0 discriminator 2
 648 001a 8D91      		ld r24,X+
 649 001c 8111      		cpse r24,__zero_reg__
 650 001e 00C0      		rjmp .L60
 165:../../common/action_util.c ****             ;
 651               		.loc 1 165 0 discriminator 3
 652 0020 CF5F      		subi r28,lo8(-(1))
 653               	.LVL47:
 654 0022 CF30      		cpi r28,lo8(15)
 655 0024 01F4      		brne .L59
 656               	.L60:
 167:../../common/action_util.c ****     }
 657               		.loc 1 167 0 is_stmt 1
 658 0026 D0E0      		ldi r29,0
 659 0028 EC0F      		add r30,r28
 660 002a FD1F      		adc r31,r29
 661 002c 8181      		ldd r24,Z+1
 662 002e 0E94 0000 		call biton
 663               	.LVL48:
 664 0032 93E0      		ldi r25,3
 665               		1:
 666 0034 CC0F      		lsl r28
 667 0036 DD1F      		rol r29
 668 0038 9A95      		dec r25
 669 003a 01F4      		brne 1b
 670               	.LVL49:
 671 003c 8C2B      		or r24,r28
 672 003e 00C0      		rjmp .L62
 673               	.L58:
 674               	.LBE22:
 180:../../common/action_util.c **** #endif
 675               		.loc 1 180 0
 676 0040 8281      		ldd r24,Z+2
 677               	.L62:
 678               	/* epilogue start */
 182:../../common/action_util.c **** 
 679               		.loc 1 182 0
 680 0042 DF91      		pop r29
 681 0044 CF91      		pop r28
 682 0046 0895      		ret
 683               		.cfi_endproc
 684               	.LFE117:
 686               		.local	oneshot_time
 687               		.comm	oneshot_time,2,1
 688               		.local	oneshot_mods
 689               		.comm	oneshot_mods,1,1
 690               	.global	keyboard_report
 691               		.data
 694               	keyboard_report:
 695 0000 0000      		.word	__compound_literal.0
 696               		.local	__compound_literal.0
 697               		.comm	__compound_literal.0,16,1
 698               		.local	weak_mods
 699               		.comm	weak_mods,1,1
 700               		.local	real_mods
 701               		.comm	real_mods,1,1
 702               		.text
 703               	.Letext0:
 704               		.file 2 "/usr/local/Cellar/avr-gcc/4.9.2/avr/include/stdint.h"
 705               		.file 3 "../../common/report.h"
 706               		.file 4 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 707               		.file 5 "../../common/host.h"
 708               		.file 6 "../../common/util.h"
 709               		.file 7 "../../common/timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:4      *ABS*:000000000000003f __SREG__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:13     .text.add_key:0000000000000000 add_key
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:694    .data:0000000000000000 keyboard_report
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:112    .text.del_key:0000000000000000 del_key
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:197    .text.clear_keys:0000000000000000 clear_keys
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:235    .text.get_mods:0000000000000000 get_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:699    .bss:0000000000000014 real_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:252    .text.add_mods:0000000000000000 add_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:273    .text.del_mods:0000000000000000 del_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:296    .text.set_mods:0000000000000000 set_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:314    .text.clear_mods:0000000000000000 clear_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:331    .text.get_weak_mods:0000000000000000 get_weak_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:697    .bss:0000000000000013 weak_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:348    .text.add_weak_mods:0000000000000000 add_weak_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:369    .text.del_weak_mods:0000000000000000 del_weak_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:392    .text.set_weak_mods:0000000000000000 set_weak_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:410    .text.clear_weak_mods:0000000000000000 clear_weak_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:427    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:687    .bss:0000000000000002 oneshot_mods
                             .bss:0000000000000000 oneshot_time
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:450    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:470    .text.has_anykey:0000000000000000 has_anykey
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:516    .text.send_keyboard_report:0000000000000000 send_keyboard_report
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:600    .text.has_anymod:0000000000000000 has_anymod
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:618    .text.get_first_key:0000000000000000 get_first_key
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cc2FRITV.s:689    .bss:0000000000000003 __compound_literal.0

UNDEFINED SYMBOLS
keyboard_nkro
timer_read
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
