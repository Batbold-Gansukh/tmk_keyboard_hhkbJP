   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_param_inc,"ax",@progbits
  12               	mousekey_param_inc:
  13               	.LFB110:
  14               		.file 1 "../../common/command.c"
   1:../../common/command.c **** /*
   2:../../common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../common/command.c **** 
   4:../../common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/command.c **** (at your option) any later version.
   8:../../common/command.c **** 
   9:../../common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/command.c **** GNU General Public License for more details.
  13:../../common/command.c **** 
  14:../../common/command.c **** You should have received a copy of the GNU General Public License
  15:../../common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/command.c **** */
  17:../../common/command.c **** #include <stdint.h>
  18:../../common/command.c **** #include <stdbool.h>
  19:../../common/command.c **** #include <util/delay.h>
  20:../../common/command.c **** #include "keycode.h"
  21:../../common/command.c **** #include "host.h"
  22:../../common/command.c **** #include "keymap.h"
  23:../../common/command.c **** #include "print.h"
  24:../../common/command.c **** #include "debug.h"
  25:../../common/command.c **** #include "util.h"
  26:../../common/command.c **** #include "timer.h"
  27:../../common/command.c **** #include "keyboard.h"
  28:../../common/command.c **** #include "bootloader.h"
  29:../../common/command.c **** #include "action_layer.h"
  30:../../common/command.c **** #include "action_util.h"
  31:../../common/command.c **** #include "eeconfig.h"
  32:../../common/command.c **** #include "sleep_led.h"
  33:../../common/command.c **** #include "led.h"
  34:../../common/command.c **** #include "command.h"
  35:../../common/command.c **** #include "backlight.h"
  36:../../common/command.c **** 
  37:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:../../common/command.c **** #include "mousekey.h"
  39:../../common/command.c **** #endif
  40:../../common/command.c **** 
  41:../../common/command.c **** #ifdef PROTOCOL_PJRC
  42:../../common/command.c **** #   include "usb_keyboard.h"
  43:../../common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:../../common/command.c **** #       include "usb_extra.h"
  45:../../common/command.c **** #   endif
  46:../../common/command.c **** #endif
  47:../../common/command.c **** 
  48:../../common/command.c **** #ifdef PROTOCOL_VUSB
  49:../../common/command.c **** #   include "usbdrv.h"
  50:../../common/command.c **** #endif
  51:../../common/command.c **** 
  52:../../common/command.c **** 
  53:../../common/command.c **** static bool command_common(uint8_t code);
  54:../../common/command.c **** static void command_common_help(void);
  55:../../common/command.c **** static bool command_console(uint8_t code);
  56:../../common/command.c **** static void command_console_help(void);
  57:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:../../common/command.c **** static bool mousekey_console(uint8_t code);
  59:../../common/command.c **** static void mousekey_console_help(void);
  60:../../common/command.c **** #endif
  61:../../common/command.c **** 
  62:../../common/command.c **** static uint8_t numkey2num(uint8_t code);
  63:../../common/command.c **** static void switch_default_layer(uint8_t layer);
  64:../../common/command.c **** 
  65:../../common/command.c **** 
  66:../../common/command.c **** typedef enum { ONESHOT, CONSOLE, MOUSEKEY } cmdstate_t;
  67:../../common/command.c **** static cmdstate_t state = ONESHOT;
  68:../../common/command.c **** 
  69:../../common/command.c **** 
  70:../../common/command.c **** bool command_proc(uint8_t code)
  71:../../common/command.c **** {
  72:../../common/command.c ****     switch (state) {
  73:../../common/command.c ****         case ONESHOT:
  74:../../common/command.c ****             if (!IS_COMMAND())
  75:../../common/command.c ****                 return false;
  76:../../common/command.c ****             return (command_extra(code) || command_common(code));
  77:../../common/command.c ****         case CONSOLE:
  78:../../common/command.c ****             command_console(code);
  79:../../common/command.c ****             break;
  80:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  81:../../common/command.c ****         case MOUSEKEY:
  82:../../common/command.c ****             mousekey_console(code);
  83:../../common/command.c ****             break;
  84:../../common/command.c **** #endif
  85:../../common/command.c ****         default:
  86:../../common/command.c ****             state = ONESHOT;
  87:../../common/command.c ****             return false;
  88:../../common/command.c ****     }
  89:../../common/command.c ****     return true;
  90:../../common/command.c **** }
  91:../../common/command.c **** 
  92:../../common/command.c **** /* This allows to define extra commands. return false when not processed. */
  93:../../common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  94:../../common/command.c **** bool command_extra(uint8_t code)
  95:../../common/command.c **** {
  96:../../common/command.c ****     return false;
  97:../../common/command.c **** }
  98:../../common/command.c **** 
  99:../../common/command.c **** 
 100:../../common/command.c **** /***********************************************************
 101:../../common/command.c ****  * Command common
 102:../../common/command.c ****  ***********************************************************/
 103:../../common/command.c **** static void command_common_help(void)
 104:../../common/command.c **** {
 105:../../common/command.c ****     print("\n\n----- Command Help -----\n");
 106:../../common/command.c ****     print("c:	enter console mode\n");
 107:../../common/command.c ****     print("d:	toggle debug enable\n");
 108:../../common/command.c ****     print("x:	toggle matrix debug\n");
 109:../../common/command.c ****     print("k:	toggle keyboard debug\n");
 110:../../common/command.c ****     print("m:	toggle mouse debug\n");
 111:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 112:../../common/command.c ****     print("z:	toggle sleep LED test\n");
 113:../../common/command.c **** #endif
 114:../../common/command.c ****     print("v:	print device version & info\n");
 115:../../common/command.c ****     print("t:	print timer count\n");
 116:../../common/command.c ****     print("s:	print status\n");
 117:../../common/command.c ****     print("e:	print eeprom config\n");
 118:../../common/command.c **** #ifdef NKRO_ENABLE
 119:../../common/command.c ****     print("n:	toggle NKRO\n");
 120:../../common/command.c **** #endif
 121:../../common/command.c ****     print("0/F10:	switch to Layer0 \n");
 122:../../common/command.c ****     print("1/F1:	switch to Layer1 \n");
 123:../../common/command.c ****     print("2/F2:	switch to Layer2 \n");
 124:../../common/command.c ****     print("3/F3:	switch to Layer3 \n");
 125:../../common/command.c ****     print("4/F4:	switch to Layer4 \n");
 126:../../common/command.c ****     print("PScr:	power down/remote wake-up\n");
 127:../../common/command.c ****     print("Caps:	Lock Keyboard(Child Proof)\n");
 128:../../common/command.c ****     print("Paus:	jump to bootloader\n");
 129:../../common/command.c **** }
 130:../../common/command.c **** 
 131:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 132:../../common/command.c **** static void print_eeconfig(void)
 133:../../common/command.c **** {
 134:../../common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 135:../../common/command.c **** 
 136:../../common/command.c ****     debug_config_t dc;
 137:../../common/command.c ****     dc.raw = eeconfig_read_debug();
 138:../../common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 139:../../common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 140:../../common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 141:../../common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 142:../../common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 143:../../common/command.c **** 
 144:../../common/command.c ****     keymap_config_t kc;
 145:../../common/command.c ****     kc.raw = eeconfig_read_keymap();
 146:../../common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 147:../../common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 148:../../common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 149:../../common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 150:../../common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 151:../../common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 152:../../common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 153:../../common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 154:../../common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 155:../../common/command.c **** 
 156:../../common/command.c **** #ifdef BACKLIGHT_ENABLE
 157:../../common/command.c ****     backlight_config_t bc;
 158:../../common/command.c ****     bc.raw = eeconfig_read_backlight();
 159:../../common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 160:../../common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 161:../../common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 162:../../common/command.c **** #endif
 163:../../common/command.c **** }
 164:../../common/command.c **** #endif
 165:../../common/command.c **** 
 166:../../common/command.c **** static bool command_common(uint8_t code)
 167:../../common/command.c **** {
 168:../../common/command.c ****     static host_driver_t *host_driver = 0;
 169:../../common/command.c ****     switch (code) {
 170:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:../../common/command.c ****         case KC_Z:
 172:../../common/command.c ****             // test breathing sleep LED
 173:../../common/command.c ****             print("Sleep LED test\n");
 174:../../common/command.c ****             sleep_led_toggle();
 175:../../common/command.c ****             led_set(host_keyboard_leds());
 176:../../common/command.c ****             break;
 177:../../common/command.c **** #endif
 178:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 179:../../common/command.c ****         case KC_E:
 180:../../common/command.c ****             print("eeconfig:\n");
 181:../../common/command.c ****             print_eeconfig();
 182:../../common/command.c ****             break;
 183:../../common/command.c **** #endif
 184:../../common/command.c ****         case KC_CAPSLOCK:
 185:../../common/command.c ****             if (host_get_driver()) {
 186:../../common/command.c ****                 host_driver = host_get_driver();
 187:../../common/command.c ****                 host_set_driver(0);
 188:../../common/command.c ****                 print("Locked.\n");
 189:../../common/command.c ****             } else {
 190:../../common/command.c ****                 host_set_driver(host_driver);
 191:../../common/command.c ****                 print("Unlocked.\n");
 192:../../common/command.c ****             }
 193:../../common/command.c ****             break;
 194:../../common/command.c ****         case KC_H:
 195:../../common/command.c ****         case KC_SLASH: /* ? */
 196:../../common/command.c ****             command_common_help();
 197:../../common/command.c ****             break;
 198:../../common/command.c ****         case KC_C:
 199:../../common/command.c ****             debug_matrix   = false;
 200:../../common/command.c ****             debug_keyboard = false;
 201:../../common/command.c ****             debug_mouse    = false;
 202:../../common/command.c ****             debug_enable   = false;
 203:../../common/command.c ****             command_console_help();
 204:../../common/command.c ****             print("\nEnter Console Mode\n");
 205:../../common/command.c ****             print("C> ");
 206:../../common/command.c ****             state = CONSOLE;
 207:../../common/command.c ****             break;
 208:../../common/command.c ****         case KC_PAUSE:
 209:../../common/command.c ****             clear_keyboard();
 210:../../common/command.c ****             print("\n\nJump to bootloader... ");
 211:../../common/command.c ****             _delay_ms(1000);
 212:../../common/command.c ****             bootloader_jump(); // not return
 213:../../common/command.c ****             print("not supported.\n");
 214:../../common/command.c ****             break;
 215:../../common/command.c ****         case KC_D:
 216:../../common/command.c ****             if (debug_enable) {
 217:../../common/command.c ****                 print("\nDEBUG: disabled.\n");
 218:../../common/command.c ****                 debug_matrix   = false;
 219:../../common/command.c ****                 debug_keyboard = false;
 220:../../common/command.c ****                 debug_mouse    = false;
 221:../../common/command.c ****                 debug_enable   = false;
 222:../../common/command.c ****             } else {
 223:../../common/command.c ****                 print("\nDEBUG: enabled.\n");
 224:../../common/command.c ****                 debug_enable   = true;
 225:../../common/command.c ****             }
 226:../../common/command.c ****             break;
 227:../../common/command.c ****         case KC_X: // debug matrix toggle
 228:../../common/command.c ****             debug_matrix = !debug_matrix;
 229:../../common/command.c ****             if (debug_matrix) {
 230:../../common/command.c ****                 print("\nDEBUG: matrix enabled.\n");
 231:../../common/command.c ****                 debug_enable = true;
 232:../../common/command.c ****             } else {
 233:../../common/command.c ****                 print("\nDEBUG: matrix disabled.\n");
 234:../../common/command.c ****             }
 235:../../common/command.c ****             break;
 236:../../common/command.c ****         case KC_K: // debug keyboard toggle
 237:../../common/command.c ****             debug_keyboard = !debug_keyboard;
 238:../../common/command.c ****             if (debug_keyboard) {
 239:../../common/command.c ****                 print("\nDEBUG: keyboard enabled.\n");
 240:../../common/command.c ****                 debug_enable = true;
 241:../../common/command.c ****             } else {
 242:../../common/command.c ****                 print("\nDEBUG: keyboard disabled.\n");
 243:../../common/command.c ****             }
 244:../../common/command.c ****             break;
 245:../../common/command.c ****         case KC_M: // debug mouse toggle
 246:../../common/command.c ****             debug_mouse = !debug_mouse;
 247:../../common/command.c ****             if (debug_mouse) {
 248:../../common/command.c ****                 print("\nDEBUG: mouse enabled.\n");
 249:../../common/command.c ****                 debug_enable = true;
 250:../../common/command.c ****             } else {
 251:../../common/command.c ****                 print("\nDEBUG: mouse disabled.\n");
 252:../../common/command.c ****             }
 253:../../common/command.c ****             break;
 254:../../common/command.c ****         case KC_V: // print version & information
 255:../../common/command.c ****             print("\n\n----- Version -----\n");
 256:../../common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 257:../../common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 258:../../common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 259:../../common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 260:../../common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 261:../../common/command.c ****             /* build options */
 262:../../common/command.c ****             print("OPTIONS:"
 263:../../common/command.c **** #ifdef PROTOCOL_PJRC
 264:../../common/command.c ****             " PJRC"
 265:../../common/command.c **** #endif
 266:../../common/command.c **** #ifdef PROTOCOL_LUFA
 267:../../common/command.c ****             " LUFA"
 268:../../common/command.c **** #endif
 269:../../common/command.c **** #ifdef PROTOCOL_VUSB
 270:../../common/command.c ****             " VUSB"
 271:../../common/command.c **** #endif
 272:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 273:../../common/command.c ****             " BOOTMAGIC"
 274:../../common/command.c **** #endif
 275:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 276:../../common/command.c ****             " MOUSEKEY"
 277:../../common/command.c **** #endif
 278:../../common/command.c **** #ifdef EXTRAKEY_ENABLE
 279:../../common/command.c ****             " EXTRAKEY"
 280:../../common/command.c **** #endif
 281:../../common/command.c **** #ifdef CONSOLE_ENABLE
 282:../../common/command.c ****             " CONSOLE"
 283:../../common/command.c **** #endif
 284:../../common/command.c **** #ifdef COMMAND_ENABLE
 285:../../common/command.c ****             " COMMAND"
 286:../../common/command.c **** #endif
 287:../../common/command.c **** #ifdef NKRO_ENABLE
 288:../../common/command.c ****             " NKRO"
 289:../../common/command.c **** #endif
 290:../../common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 291:../../common/command.c ****             " KEYMAP_SECTION"
 292:../../common/command.c **** #endif
 293:../../common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 294:../../common/command.c **** 
 295:../../common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__) 
 296:../../common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 297:../../common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 298:../../common/command.c ****             break;
 299:../../common/command.c ****         case KC_T: // print timer
 300:../../common/command.c ****             print_val_hex32(timer_count);
 301:../../common/command.c ****             break;
 302:../../common/command.c ****         case KC_S:
 303:../../common/command.c ****             print("\n\n----- Status -----\n");
 304:../../common/command.c ****             print_val_hex8(host_keyboard_leds());
 305:../../common/command.c ****             print_val_hex8(keyboard_protocol);
 306:../../common/command.c ****             print_val_hex8(keyboard_idle);
 307:../../common/command.c **** #ifdef PROTOCOL_PJRC
 308:../../common/command.c ****             print_val_hex8(UDCON);
 309:../../common/command.c ****             print_val_hex8(UDIEN);
 310:../../common/command.c ****             print_val_hex8(UDINT);
 311:../../common/command.c ****             print_val_hex8(usb_keyboard_leds);
 312:../../common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 313:../../common/command.c **** #endif
 314:../../common/command.c **** 
 315:../../common/command.c **** #ifdef PROTOCOL_PJRC
 316:../../common/command.c **** #   if USB_COUNT_SOF
 317:../../common/command.c ****             print_val_hex8(usbSofCount);
 318:../../common/command.c **** #   endif
 319:../../common/command.c **** #endif
 320:../../common/command.c ****             break;
 321:../../common/command.c **** #ifdef NKRO_ENABLE
 322:../../common/command.c ****         case KC_N:
 323:../../common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 324:../../common/command.c ****             keyboard_nkro = !keyboard_nkro;
 325:../../common/command.c ****             if (keyboard_nkro)
 326:../../common/command.c ****                 print("NKRO: enabled\n");
 327:../../common/command.c ****             else
 328:../../common/command.c ****                 print("NKRO: disabled\n");
 329:../../common/command.c ****             break;
 330:../../common/command.c **** #endif
 331:../../common/command.c **** #ifdef EXTRAKEY_ENABLE
 332:../../common/command.c ****         case KC_PSCREEN:
 333:../../common/command.c ****             // TODO: Power key should take this feature? otherwise any key during suspend.
 334:../../common/command.c **** #ifdef PROTOCOL_PJRC
 335:../../common/command.c ****             if (suspend && remote_wakeup) {
 336:../../common/command.c ****                 usb_remote_wakeup();
 337:../../common/command.c ****             } else {
 338:../../common/command.c ****                 host_system_send(SYSTEM_POWER_DOWN);
 339:../../common/command.c ****                 host_system_send(0);
 340:../../common/command.c ****                 _delay_ms(500);
 341:../../common/command.c ****             }
 342:../../common/command.c **** #else
 343:../../common/command.c ****             host_system_send(SYSTEM_POWER_DOWN);
 344:../../common/command.c ****             _delay_ms(100);
 345:../../common/command.c ****             host_system_send(0);
 346:../../common/command.c ****             _delay_ms(500);
 347:../../common/command.c **** #endif
 348:../../common/command.c ****             break;
 349:../../common/command.c **** #endif
 350:../../common/command.c ****         case KC_ESC:
 351:../../common/command.c ****         case KC_GRV:
 352:../../common/command.c ****         case KC_0:
 353:../../common/command.c ****             switch_default_layer(0);
 354:../../common/command.c ****             break;
 355:../../common/command.c ****         case KC_1 ... KC_9:
 356:../../common/command.c ****             switch_default_layer((code - KC_1) + 1);
 357:../../common/command.c ****             break;
 358:../../common/command.c ****         case KC_F1 ... KC_F12:
 359:../../common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 360:../../common/command.c ****             break;
 361:../../common/command.c ****         default:
 362:../../common/command.c ****             print("?");
 363:../../common/command.c ****             return false;
 364:../../common/command.c ****     }
 365:../../common/command.c ****     return true;
 366:../../common/command.c **** }
 367:../../common/command.c **** 
 368:../../common/command.c **** 
 369:../../common/command.c **** /***********************************************************
 370:../../common/command.c ****  * Command console
 371:../../common/command.c ****  ***********************************************************/
 372:../../common/command.c **** static void command_console_help(void)
 373:../../common/command.c **** {
 374:../../common/command.c ****     print("\n\n----- Console Help -----\n");
 375:../../common/command.c ****     print("ESC/q:	quit\n");
 376:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 377:../../common/command.c ****     print("m:	mousekey\n");
 378:../../common/command.c **** #endif
 379:../../common/command.c **** }
 380:../../common/command.c **** 
 381:../../common/command.c **** static bool command_console(uint8_t code)
 382:../../common/command.c **** {
 383:../../common/command.c ****     switch (code) {
 384:../../common/command.c ****         case KC_H:
 385:../../common/command.c ****         case KC_SLASH: /* ? */
 386:../../common/command.c ****             command_console_help();
 387:../../common/command.c ****             break;
 388:../../common/command.c ****         case KC_Q:
 389:../../common/command.c ****         case KC_ESC:
 390:../../common/command.c ****             print("\nQuit Console Mode\n");
 391:../../common/command.c ****             state = ONESHOT;
 392:../../common/command.c ****             return false;
 393:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 394:../../common/command.c ****         case KC_M:
 395:../../common/command.c ****             mousekey_console_help();
 396:../../common/command.c ****             print("\nEnter Mousekey Console\n");
 397:../../common/command.c ****             print("M0>");
 398:../../common/command.c ****             state = MOUSEKEY;
 399:../../common/command.c ****             return true;
 400:../../common/command.c **** #endif
 401:../../common/command.c ****         default:
 402:../../common/command.c ****             print("?");
 403:../../common/command.c ****             return false;
 404:../../common/command.c ****     }
 405:../../common/command.c ****     print("C> ");
 406:../../common/command.c ****     return true;
 407:../../common/command.c **** }
 408:../../common/command.c **** 
 409:../../common/command.c **** 
 410:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 411:../../common/command.c **** /***********************************************************
 412:../../common/command.c ****  * Mousekey console
 413:../../common/command.c ****  ***********************************************************/
 414:../../common/command.c **** static uint8_t mousekey_param = 0;
 415:../../common/command.c **** 
 416:../../common/command.c **** static void mousekey_param_print(void)
 417:../../common/command.c **** {
 418:../../common/command.c ****     print("\n\n----- Mousekey Parameters -----\n");
 419:../../common/command.c ****     print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
 420:../../common/command.c ****     print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
 421:../../common/command.c ****     print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
 422:../../common/command.c ****     print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
 423:../../common/command.c ****     print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 424:../../common/command.c ****     print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 425:../../common/command.c **** }
 426:../../common/command.c **** 
 427:../../common/command.c **** #define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 428:../../common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 429:../../common/command.c **** {
  15               		.loc 1 429 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 430:../../common/command.c ****     switch (param) {
  22               		.loc 1 430 0
  23 0000 8330      		cpi r24,lo8(3)
  24 0002 01F0      		breq .L3
  25 0004 00F4      		brsh .L4
  26 0006 8130      		cpi r24,lo8(1)
  27 0008 01F0      		breq .L5
  28 000a 8230      		cpi r24,lo8(2)
  29 000c 01F0      		breq .L6
  30 000e 0895      		ret
  31               	.L4:
  32 0010 8530      		cpi r24,lo8(5)
  33 0012 01F4      		brne .+2
  34 0014 00C0      		rjmp .L7
  35 0016 00F0      		brlo .L8
  36 0018 8630      		cpi r24,lo8(6)
  37 001a 01F4      		brne .+2
  38 001c 00C0      		rjmp .L9
  39 001e 0895      		ret
  40               	.L5:
 431:../../common/command.c ****         case 1:
 432:../../common/command.c ****             if (mk_delay + inc < UINT8_MAX)
  41               		.loc 1 432 0
  42 0020 8091 0000 		lds r24,mk_delay
  43               	.LVL1:
  44 0024 262F      		mov r18,r22
  45 0026 30E0      		ldi r19,0
  46 0028 280F      		add r18,r24
  47 002a 311D      		adc r19,__zero_reg__
  48 002c 2F3F      		cpi r18,-1
  49 002e 3105      		cpc r19,__zero_reg__
  50 0030 04F4      		brge .L10
 433:../../common/command.c ****                 mk_delay += inc;
  51               		.loc 1 433 0
  52 0032 680F      		add r22,r24
  53               	.LVL2:
  54 0034 6093 0000 		sts mk_delay,r22
  55 0038 0895      		ret
  56               	.LVL3:
  57               	.L10:
 434:../../common/command.c ****             else
 435:../../common/command.c ****                 mk_delay = UINT8_MAX;
  58               		.loc 1 435 0
  59 003a 8FEF      		ldi r24,lo8(-1)
  60 003c 8093 0000 		sts mk_delay,r24
  61 0040 0895      		ret
  62               	.LVL4:
  63               	.L6:
 436:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 437:../../common/command.c ****             break;
 438:../../common/command.c ****         case 2:
 439:../../common/command.c ****             if (mk_interval + inc < UINT8_MAX)
  64               		.loc 1 439 0
  65 0042 8091 0000 		lds r24,mk_interval
  66               	.LVL5:
  67 0046 262F      		mov r18,r22
  68 0048 30E0      		ldi r19,0
  69 004a 280F      		add r18,r24
  70 004c 311D      		adc r19,__zero_reg__
  71 004e 2F3F      		cpi r18,-1
  72 0050 3105      		cpc r19,__zero_reg__
  73 0052 04F4      		brge .L11
 440:../../common/command.c ****                 mk_interval += inc;
  74               		.loc 1 440 0
  75 0054 680F      		add r22,r24
  76               	.LVL6:
  77 0056 6093 0000 		sts mk_interval,r22
  78 005a 0895      		ret
  79               	.LVL7:
  80               	.L11:
 441:../../common/command.c ****             else
 442:../../common/command.c ****                 mk_interval = UINT8_MAX;
  81               		.loc 1 442 0
  82 005c 8FEF      		ldi r24,lo8(-1)
  83 005e 8093 0000 		sts mk_interval,r24
  84 0062 0895      		ret
  85               	.LVL8:
  86               	.L3:
 443:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 444:../../common/command.c ****             break;
 445:../../common/command.c ****         case 3:
 446:../../common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
  87               		.loc 1 446 0
  88 0064 8091 0000 		lds r24,mk_max_speed
  89               	.LVL9:
  90 0068 262F      		mov r18,r22
  91 006a 30E0      		ldi r19,0
  92 006c 280F      		add r18,r24
  93 006e 311D      		adc r19,__zero_reg__
  94 0070 2F3F      		cpi r18,-1
  95 0072 3105      		cpc r19,__zero_reg__
  96 0074 04F4      		brge .L12
 447:../../common/command.c ****                 mk_max_speed += inc;
  97               		.loc 1 447 0
  98 0076 680F      		add r22,r24
  99               	.LVL10:
 100 0078 6093 0000 		sts mk_max_speed,r22
 101 007c 0895      		ret
 102               	.LVL11:
 103               	.L12:
 448:../../common/command.c ****             else
 449:../../common/command.c ****                 mk_max_speed = UINT8_MAX;
 104               		.loc 1 449 0
 105 007e 8FEF      		ldi r24,lo8(-1)
 106 0080 8093 0000 		sts mk_max_speed,r24
 107 0084 0895      		ret
 108               	.LVL12:
 109               	.L8:
 450:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 451:../../common/command.c ****             break;
 452:../../common/command.c ****         case 4:
 453:../../common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 110               		.loc 1 453 0
 111 0086 8091 0000 		lds r24,mk_time_to_max
 112               	.LVL13:
 113 008a 262F      		mov r18,r22
 114 008c 30E0      		ldi r19,0
 115 008e 280F      		add r18,r24
 116 0090 311D      		adc r19,__zero_reg__
 117 0092 2F3F      		cpi r18,-1
 118 0094 3105      		cpc r19,__zero_reg__
 119 0096 04F4      		brge .L13
 454:../../common/command.c ****                 mk_time_to_max += inc;
 120               		.loc 1 454 0
 121 0098 680F      		add r22,r24
 122               	.LVL14:
 123 009a 6093 0000 		sts mk_time_to_max,r22
 124 009e 0895      		ret
 125               	.LVL15:
 126               	.L13:
 455:../../common/command.c ****             else
 456:../../common/command.c ****                 mk_time_to_max = UINT8_MAX;
 127               		.loc 1 456 0
 128 00a0 8FEF      		ldi r24,lo8(-1)
 129 00a2 8093 0000 		sts mk_time_to_max,r24
 130 00a6 0895      		ret
 131               	.LVL16:
 132               	.L7:
 457:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 458:../../common/command.c ****             break;
 459:../../common/command.c ****         case 5:
 460:../../common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 133               		.loc 1 460 0
 134 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 135               	.LVL17:
 136 00ac 262F      		mov r18,r22
 137 00ae 30E0      		ldi r19,0
 138 00b0 280F      		add r18,r24
 139 00b2 311D      		adc r19,__zero_reg__
 140 00b4 2F3F      		cpi r18,-1
 141 00b6 3105      		cpc r19,__zero_reg__
 142 00b8 04F4      		brge .L14
 461:../../common/command.c ****                 mk_wheel_max_speed += inc;
 143               		.loc 1 461 0
 144 00ba 680F      		add r22,r24
 145               	.LVL18:
 146 00bc 6093 0000 		sts mk_wheel_max_speed,r22
 147 00c0 0895      		ret
 148               	.LVL19:
 149               	.L14:
 462:../../common/command.c ****             else
 463:../../common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 150               		.loc 1 463 0
 151 00c2 8FEF      		ldi r24,lo8(-1)
 152 00c4 8093 0000 		sts mk_wheel_max_speed,r24
 153 00c8 0895      		ret
 154               	.LVL20:
 155               	.L9:
 464:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 465:../../common/command.c ****             break;
 466:../../common/command.c ****         case 6:
 467:../../common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 156               		.loc 1 467 0
 157 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 158               	.LVL21:
 159 00ce 262F      		mov r18,r22
 160 00d0 30E0      		ldi r19,0
 161 00d2 280F      		add r18,r24
 162 00d4 311D      		adc r19,__zero_reg__
 163 00d6 2F3F      		cpi r18,-1
 164 00d8 3105      		cpc r19,__zero_reg__
 165 00da 04F4      		brge .L15
 468:../../common/command.c ****                 mk_wheel_time_to_max += inc;
 166               		.loc 1 468 0
 167 00dc 680F      		add r22,r24
 168               	.LVL22:
 169 00de 6093 0000 		sts mk_wheel_time_to_max,r22
 170 00e2 0895      		ret
 171               	.LVL23:
 172               	.L15:
 469:../../common/command.c ****             else
 470:../../common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 173               		.loc 1 470 0
 174 00e4 8FEF      		ldi r24,lo8(-1)
 175 00e6 8093 0000 		sts mk_wheel_time_to_max,r24
 176 00ea 0895      		ret
 177               		.cfi_endproc
 178               	.LFE110:
 180               		.section	.text.mousekey_param_dec,"ax",@progbits
 182               	mousekey_param_dec:
 183               	.LFB111:
 471:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 472:../../common/command.c ****             break;
 473:../../common/command.c ****     }
 474:../../common/command.c **** }
 475:../../common/command.c **** 
 476:../../common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 477:../../common/command.c **** {
 184               		.loc 1 477 0
 185               		.cfi_startproc
 186               	.LVL24:
 187               	/* prologue: function */
 188               	/* frame size = 0 */
 189               	/* stack size = 0 */
 190               	.L__stack_usage = 0
 478:../../common/command.c ****     switch (param) {
 191               		.loc 1 478 0
 192 0000 8330      		cpi r24,lo8(3)
 193 0002 01F0      		breq .L19
 194 0004 00F4      		brsh .L20
 195 0006 8130      		cpi r24,lo8(1)
 196 0008 01F0      		breq .L21
 197 000a 8230      		cpi r24,lo8(2)
 198 000c 01F0      		breq .L22
 199 000e 0895      		ret
 200               	.L20:
 201 0010 8530      		cpi r24,lo8(5)
 202 0012 01F0      		breq .L23
 203 0014 00F0      		brlo .L24
 204 0016 8630      		cpi r24,lo8(6)
 205 0018 01F0      		breq .L25
 206 001a 0895      		ret
 207               	.L21:
 479:../../common/command.c ****         case 1:
 480:../../common/command.c ****             if (mk_delay > dec)
 208               		.loc 1 480 0
 209 001c 8091 0000 		lds r24,mk_delay
 210               	.LVL25:
 211 0020 6817      		cp r22,r24
 212 0022 00F4      		brsh .L26
 481:../../common/command.c ****                 mk_delay -= dec;
 213               		.loc 1 481 0
 214 0024 861B      		sub r24,r22
 215 0026 8093 0000 		sts mk_delay,r24
 216 002a 0895      		ret
 217               	.L26:
 482:../../common/command.c ****             else
 483:../../common/command.c ****                 mk_delay = 0;
 218               		.loc 1 483 0
 219 002c 1092 0000 		sts mk_delay,__zero_reg__
 220 0030 0895      		ret
 221               	.LVL26:
 222               	.L22:
 484:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 485:../../common/command.c ****             break;
 486:../../common/command.c ****         case 2:
 487:../../common/command.c ****             if (mk_interval > dec)
 223               		.loc 1 487 0
 224 0032 8091 0000 		lds r24,mk_interval
 225               	.LVL27:
 226 0036 6817      		cp r22,r24
 227 0038 00F4      		brsh .L27
 488:../../common/command.c ****                 mk_interval -= dec;
 228               		.loc 1 488 0
 229 003a 861B      		sub r24,r22
 230 003c 8093 0000 		sts mk_interval,r24
 231 0040 0895      		ret
 232               	.L27:
 489:../../common/command.c ****             else
 490:../../common/command.c ****                 mk_interval = 0;
 233               		.loc 1 490 0
 234 0042 1092 0000 		sts mk_interval,__zero_reg__
 235 0046 0895      		ret
 236               	.LVL28:
 237               	.L19:
 491:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 492:../../common/command.c ****             break;
 493:../../common/command.c ****         case 3:
 494:../../common/command.c ****             if (mk_max_speed > dec)
 238               		.loc 1 494 0
 239 0048 8091 0000 		lds r24,mk_max_speed
 240               	.LVL29:
 241 004c 6817      		cp r22,r24
 242 004e 00F4      		brsh .L28
 495:../../common/command.c ****                 mk_max_speed -= dec;
 243               		.loc 1 495 0
 244 0050 861B      		sub r24,r22
 245 0052 8093 0000 		sts mk_max_speed,r24
 246 0056 0895      		ret
 247               	.L28:
 496:../../common/command.c ****             else
 497:../../common/command.c ****                 mk_max_speed = 0;
 248               		.loc 1 497 0
 249 0058 1092 0000 		sts mk_max_speed,__zero_reg__
 250 005c 0895      		ret
 251               	.LVL30:
 252               	.L24:
 498:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 499:../../common/command.c ****             break;
 500:../../common/command.c ****         case 4:
 501:../../common/command.c ****             if (mk_time_to_max > dec)
 253               		.loc 1 501 0
 254 005e 8091 0000 		lds r24,mk_time_to_max
 255               	.LVL31:
 256 0062 6817      		cp r22,r24
 257 0064 00F4      		brsh .L29
 502:../../common/command.c ****                 mk_time_to_max -= dec;
 258               		.loc 1 502 0
 259 0066 861B      		sub r24,r22
 260 0068 8093 0000 		sts mk_time_to_max,r24
 261 006c 0895      		ret
 262               	.L29:
 503:../../common/command.c ****             else
 504:../../common/command.c ****                 mk_time_to_max = 0;
 263               		.loc 1 504 0
 264 006e 1092 0000 		sts mk_time_to_max,__zero_reg__
 265 0072 0895      		ret
 266               	.LVL32:
 267               	.L23:
 505:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 506:../../common/command.c ****             break;
 507:../../common/command.c ****         case 5:
 508:../../common/command.c ****             if (mk_wheel_max_speed > dec)
 268               		.loc 1 508 0
 269 0074 8091 0000 		lds r24,mk_wheel_max_speed
 270               	.LVL33:
 271 0078 6817      		cp r22,r24
 272 007a 00F4      		brsh .L30
 509:../../common/command.c ****                 mk_wheel_max_speed -= dec;
 273               		.loc 1 509 0
 274 007c 861B      		sub r24,r22
 275 007e 8093 0000 		sts mk_wheel_max_speed,r24
 276 0082 0895      		ret
 277               	.L30:
 510:../../common/command.c ****             else
 511:../../common/command.c ****                 mk_wheel_max_speed = 0;
 278               		.loc 1 511 0
 279 0084 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 280 0088 0895      		ret
 281               	.LVL34:
 282               	.L25:
 512:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 513:../../common/command.c ****             break;
 514:../../common/command.c ****         case 6:
 515:../../common/command.c ****             if (mk_wheel_time_to_max > dec)
 283               		.loc 1 515 0
 284 008a 8091 0000 		lds r24,mk_wheel_time_to_max
 285               	.LVL35:
 286 008e 6817      		cp r22,r24
 287 0090 00F4      		brsh .L31
 516:../../common/command.c ****                 mk_wheel_time_to_max -= dec;
 288               		.loc 1 516 0
 289 0092 861B      		sub r24,r22
 290 0094 8093 0000 		sts mk_wheel_time_to_max,r24
 291 0098 0895      		ret
 292               	.L31:
 517:../../common/command.c ****             else
 518:../../common/command.c ****                 mk_wheel_time_to_max = 0;
 293               		.loc 1 518 0
 294 009a 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 295 009e 0895      		ret
 296               		.cfi_endproc
 297               	.LFE111:
 299               		.section	.text.command_extra,"ax",@progbits
 300               		.weak	command_extra
 302               	command_extra:
 303               	.LFB103:
  95:../../common/command.c ****     return false;
 304               		.loc 1 95 0
 305               		.cfi_startproc
 306               	.LVL36:
 307               	/* prologue: function */
 308               	/* frame size = 0 */
 309               	/* stack size = 0 */
 310               	.L__stack_usage = 0
  97:../../common/command.c **** 
 311               		.loc 1 97 0
 312 0000 80E0      		ldi r24,0
 313               	.LVL37:
 314 0002 0895      		ret
 315               		.cfi_endproc
 316               	.LFE103:
 318               		.section	.text.command_proc,"ax",@progbits
 319               	.global	command_proc
 321               	command_proc:
 322               	.LFB102:
  71:../../common/command.c ****     switch (state) {
 323               		.loc 1 71 0
 324               		.cfi_startproc
 325 0000 CF93      		push r28
 326               	.LCFI0:
 327               		.cfi_def_cfa_offset 3
 328               		.cfi_offset 28, -2
 329               	/* prologue: function */
 330               	/* frame size = 0 */
 331               	/* stack size = 1 */
 332               	.L__stack_usage = 1
  72:../../common/command.c ****         case ONESHOT:
 333               		.loc 1 72 0
 334 0002 9091 0000 		lds r25,state
 335 0006 9130      		cpi r25,lo8(1)
 336 0008 01F4      		brne .+2
 337 000a 00C0      		rjmp .L35
 338 000c C82F      		mov r28,r24
 339 000e 9130      		cpi r25,lo8(1)
 340 0010 00F0      		brlo .L36
 341 0012 9230      		cpi r25,lo8(2)
 342 0014 01F4      		brne .+2
 343 0016 00C0      		rjmp .L37
 344 0018 00C0      		rjmp .L103
 345               	.L36:
  74:../../common/command.c ****                 return false;
 346               		.loc 1 74 0
 347 001a E091 0000 		lds r30,keyboard_report
 348 001e F091 0000 		lds r31,keyboard_report+1
 349 0022 8081      		ld r24,Z
 350 0024 8232      		cpi r24,lo8(34)
 351 0026 01F0      		breq .+2
 352 0028 00C0      		rjmp .L72
  76:../../common/command.c ****         case CONSOLE:
 353               		.loc 1 76 0
 354 002a 8C2F      		mov r24,r28
 355 002c 0E94 0000 		call command_extra
 356 0030 8111      		cpse r24,__zero_reg__
 357 0032 00C0      		rjmp .L44
 358               	.LBB38:
 359               	.LBB39:
 169:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 360               		.loc 1 169 0
 361 0034 8C2F      		mov r24,r28
 362 0036 90E0      		ldi r25,0
 363 0038 FC01      		movw r30,r24
 364 003a 3697      		sbiw r30,6
 365 003c E334      		cpi r30,67
 366 003e F105      		cpc r31,__zero_reg__
 367 0040 00F0      		brlo .+2
 368 0042 00C0      		rjmp .L74
 369 0044 E050      		subi r30,lo8(-(gs(.L41)))
 370 0046 F040      		sbci r31,hi8(-(gs(.L41)))
 371 0048 0C94 0000 		jmp __tablejump2__
 372               		.section	.progmem.gcc_sw_table.command_proc,"a",@progbits
 373               		.p2align	1
 374               	.L41:
 375 0000 0000      		.word gs(.L40)
 376 0002 0000      		.word gs(.L42)
 377 0004 0000      		.word gs(.L43)
 378 0006 0000      		.word gs(.L74)
 379 0008 0000      		.word gs(.L74)
 380 000a 0000      		.word gs(.L44)
 381 000c 0000      		.word gs(.L74)
 382 000e 0000      		.word gs(.L74)
 383 0010 0000      		.word gs(.L45)
 384 0012 0000      		.word gs(.L74)
 385 0014 0000      		.word gs(.L46)
 386 0016 0000      		.word gs(.L47)
 387 0018 0000      		.word gs(.L74)
 388 001a 0000      		.word gs(.L74)
 389 001c 0000      		.word gs(.L74)
 390 001e 0000      		.word gs(.L74)
 391 0020 0000      		.word gs(.L48)
 392 0022 0000      		.word gs(.L49)
 393 0024 0000      		.word gs(.L74)
 394 0026 0000      		.word gs(.L44)
 395 0028 0000      		.word gs(.L74)
 396 002a 0000      		.word gs(.L50)
 397 002c 0000      		.word gs(.L74)
 398 002e 0000      		.word gs(.L74)
 399 0030 0000      		.word gs(.L51)
 400 0032 0000      		.word gs(.L51)
 401 0034 0000      		.word gs(.L51)
 402 0036 0000      		.word gs(.L51)
 403 0038 0000      		.word gs(.L51)
 404 003a 0000      		.word gs(.L51)
 405 003c 0000      		.word gs(.L51)
 406 003e 0000      		.word gs(.L51)
 407 0040 0000      		.word gs(.L51)
 408 0042 0000      		.word gs(.L52)
 409 0044 0000      		.word gs(.L74)
 410 0046 0000      		.word gs(.L52)
 411 0048 0000      		.word gs(.L74)
 412 004a 0000      		.word gs(.L74)
 413 004c 0000      		.word gs(.L74)
 414 004e 0000      		.word gs(.L74)
 415 0050 0000      		.word gs(.L74)
 416 0052 0000      		.word gs(.L74)
 417 0054 0000      		.word gs(.L74)
 418 0056 0000      		.word gs(.L74)
 419 0058 0000      		.word gs(.L74)
 420 005a 0000      		.word gs(.L74)
 421 005c 0000      		.word gs(.L74)
 422 005e 0000      		.word gs(.L52)
 423 0060 0000      		.word gs(.L74)
 424 0062 0000      		.word gs(.L74)
 425 0064 0000      		.word gs(.L44)
 426 0066 0000      		.word gs(.L53)
 427 0068 0000      		.word gs(.L54)
 428 006a 0000      		.word gs(.L54)
 429 006c 0000      		.word gs(.L54)
 430 006e 0000      		.word gs(.L54)
 431 0070 0000      		.word gs(.L54)
 432 0072 0000      		.word gs(.L54)
 433 0074 0000      		.word gs(.L54)
 434 0076 0000      		.word gs(.L54)
 435 0078 0000      		.word gs(.L54)
 436 007a 0000      		.word gs(.L54)
 437 007c 0000      		.word gs(.L54)
 438 007e 0000      		.word gs(.L54)
 439 0080 0000      		.word gs(.L55)
 440 0082 0000      		.word gs(.L74)
 441 0084 0000      		.word gs(.L56)
 442               		.section	.text.command_proc
 443               	.L43:
 444               	.LBB40:
 445               	.LBB41:
 137:../../common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 446               		.loc 1 137 0
 447 004c 0E94 0000 		call eeconfig_read_debug
 145:../../common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 448               		.loc 1 145 0
 449 0050 0E94 0000 		call eeconfig_read_keymap
 450 0054 00C0      		rjmp .L44
 451               	.L53:
 452               	.LBE41:
 453               	.LBE40:
 185:../../common/command.c ****                 host_driver = host_get_driver();
 454               		.loc 1 185 0
 455 0056 0E94 0000 		call host_get_driver
 456 005a 892B      		or r24,r25
 457 005c 01F0      		breq .L57
 186:../../common/command.c ****                 host_set_driver(0);
 458               		.loc 1 186 0
 459 005e 0E94 0000 		call host_get_driver
 460 0062 9093 0000 		sts host_driver.4865+1,r25
 461 0066 8093 0000 		sts host_driver.4865,r24
 187:../../common/command.c ****                 print("Locked.\n");
 462               		.loc 1 187 0
 463 006a 80E0      		ldi r24,0
 464 006c 90E0      		ldi r25,0
 465 006e 00C0      		rjmp .L99
 466               	.L57:
 190:../../common/command.c ****                 print("Unlocked.\n");
 467               		.loc 1 190 0
 468 0070 8091 0000 		lds r24,host_driver.4865
 469 0074 9091 0000 		lds r25,host_driver.4865+1
 470               	.L99:
 471 0078 0E94 0000 		call host_set_driver
 472 007c 00C0      		rjmp .L44
 473               	.L40:
 199:../../common/command.c ****             debug_keyboard = false;
 474               		.loc 1 199 0
 475 007e 8091 0000 		lds r24,debug_config
 202:../../common/command.c ****             command_console_help();
 476               		.loc 1 202 0
 477 0082 817F      		andi r24,lo8(-15)
 478 0084 8E7F      		andi r24,lo8(~(1<<0))
 479 0086 8093 0000 		sts debug_config,r24
 206:../../common/command.c ****             break;
 480               		.loc 1 206 0
 481 008a 81E0      		ldi r24,lo8(1)
 482 008c 8093 0000 		sts state,r24
 483 0090 00C0      		rjmp .L44
 484               	.L56:
 209:../../common/command.c ****             print("\n\nJump to bootloader... ");
 485               		.loc 1 209 0
 486 0092 0E94 0000 		call clear_keyboard
 487               	.LBB42:
 488               	.LBB43:
 489               		.file 2 "/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #endif
  41:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  42:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  46:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /** \file */
  47:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     \code
  49:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     \endcode
  53:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  54:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     used.
  58:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  59:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  68:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  77:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  81:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** */
  82:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #endif
  87:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  88:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #endif
  93:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  94:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #endif
  97:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  98:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #endif
 103:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 104:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /**
 105:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 107:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 109:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 112:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 114:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 120:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 125:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 132:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 140:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****  */
 141:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** void
 142:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** {
 144:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 155:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 158:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	#else
 159:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	#endif
 162:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 163:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 490               		.loc 2 163 0
 491 0096 2FEF      		ldi r18,lo8(3199999)
 492 0098 83ED      		ldi r24,hi8(3199999)
 493 009a 90E3      		ldi r25,hlo8(3199999)
 494 009c 2150      		1: subi r18,1
 495 009e 8040      		sbci r24,0
 496 00a0 9040      		sbci r25,0
 497 00a2 01F4      		brne 1b
 498 00a4 00C0      		rjmp .
 499 00a6 0000      		nop
 500               	.LBE43:
 501               	.LBE42:
 212:../../common/command.c ****             print("not supported.\n");
 502               		.loc 1 212 0
 503 00a8 0E94 0000 		call bootloader_jump
 504 00ac 00C0      		rjmp .L44
 505               	.L42:
 216:../../common/command.c ****                 print("\nDEBUG: disabled.\n");
 506               		.loc 1 216 0
 507 00ae 8091 0000 		lds r24,debug_config
 508 00b2 80FF      		sbrs r24,0
 509 00b4 00C0      		rjmp .L58
 221:../../common/command.c ****             } else {
 510               		.loc 1 221 0
 511 00b6 817F      		andi r24,lo8(-15)
 512 00b8 8E7F      		andi r24,lo8(~(1<<0))
 513 00ba 00C0      		rjmp .L100
 514               	.L50:
 228:../../common/command.c ****             if (debug_matrix) {
 515               		.loc 1 228 0
 516 00bc 8091 0000 		lds r24,debug_config
 517 00c0 81FB      		bst r24,1
 518 00c2 2227      		clr r18
 519 00c4 20F9      		bld r18,0
 520 00c6 91E0      		ldi r25,lo8(1)
 521 00c8 9227      		eor r25,r18
 522 00ca 90FB      		bst r25,0
 523 00cc 81F9      		bld r24,1
 524               	.L96:
 237:../../common/command.c ****             if (debug_keyboard) {
 525               		.loc 1 237 0
 526 00ce 8093 0000 		sts debug_config,r24
 238:../../common/command.c ****                 print("\nDEBUG: keyboard enabled.\n");
 527               		.loc 1 238 0
 528 00d2 9923      		tst r25
 529 00d4 01F4      		brne .+2
 530 00d6 00C0      		rjmp .L44
 531               	.L58:
 224:../../common/command.c ****             }
 532               		.loc 1 224 0
 533 00d8 8091 0000 		lds r24,debug_config
 534 00dc 8160      		ori r24,lo8(1<<0)
 535               	.L100:
 536 00de 8093 0000 		sts debug_config,r24
 537 00e2 00C0      		rjmp .L44
 538               	.L45:
 237:../../common/command.c ****             if (debug_keyboard) {
 539               		.loc 1 237 0
 540 00e4 8091 0000 		lds r24,debug_config
 541 00e8 82FB      		bst r24,2
 542 00ea 2227      		clr r18
 543 00ec 20F9      		bld r18,0
 544 00ee 91E0      		ldi r25,lo8(1)
 545 00f0 9227      		eor r25,r18
 546 00f2 90FB      		bst r25,0
 547 00f4 82F9      		bld r24,2
 548 00f6 00C0      		rjmp .L96
 549               	.L46:
 246:../../common/command.c ****             if (debug_mouse) {
 550               		.loc 1 246 0
 551 00f8 8091 0000 		lds r24,debug_config
 552 00fc 83FB      		bst r24,3
 553 00fe 2227      		clr r18
 554 0100 20F9      		bld r18,0
 555 0102 91E0      		ldi r25,lo8(1)
 556 0104 9227      		eor r25,r18
 557 0106 90FB      		bst r25,0
 558 0108 83F9      		bld r24,3
 559 010a 00C0      		rjmp .L96
 560               	.L49:
 300:../../common/command.c ****             break;
 561               		.loc 1 300 0
 562 010c 8091 0000 		lds r24,timer_count
 563 0110 9091 0000 		lds r25,timer_count+1
 564 0114 A091 0000 		lds r26,timer_count+2
 565 0118 B091 0000 		lds r27,timer_count+3
 566 011c BF93      		push r27
 567               	.LCFI1:
 568               		.cfi_def_cfa_offset 4
 569 011e AF93      		push r26
 570               	.LCFI2:
 571               		.cfi_def_cfa_offset 5
 572 0120 9F93      		push r25
 573               	.LCFI3:
 574               		.cfi_def_cfa_offset 6
 575 0122 8F93      		push r24
 576               	.LCFI4:
 577               		.cfi_def_cfa_offset 7
 578 0124 80E0      		ldi r24,lo8(__c.4879)
 579 0126 90E0      		ldi r25,hi8(__c.4879)
 580 0128 9F93      		push r25
 581               	.LCFI5:
 582               		.cfi_def_cfa_offset 8
 583 012a 8F93      		push r24
 584               	.LCFI6:
 585               		.cfi_def_cfa_offset 9
 586 012c 0E94 0000 		call __xprintf
 587 0130 0F90      		pop __tmp_reg__
 588 0132 0F90      		pop __tmp_reg__
 589 0134 0F90      		pop __tmp_reg__
 590 0136 0F90      		pop __tmp_reg__
 591 0138 0F90      		pop __tmp_reg__
 592 013a 0F90      		pop __tmp_reg__
 593               	.LCFI7:
 594               		.cfi_def_cfa_offset 3
 595 013c 00C0      		rjmp .L44
 596               	.L48:
 304:../../common/command.c ****             print_val_hex8(keyboard_protocol);
 597               		.loc 1 304 0
 598 013e 0E94 0000 		call host_keyboard_leds
 599 0142 1F92      		push __zero_reg__
 600               	.LCFI8:
 601               		.cfi_def_cfa_offset 4
 602 0144 8F93      		push r24
 603               	.LCFI9:
 604               		.cfi_def_cfa_offset 5
 605 0146 80E0      		ldi r24,lo8(__c.4882)
 606 0148 90E0      		ldi r25,hi8(__c.4882)
 607 014a 9F93      		push r25
 608               	.LCFI10:
 609               		.cfi_def_cfa_offset 6
 610 014c 8F93      		push r24
 611               	.LCFI11:
 612               		.cfi_def_cfa_offset 7
 613 014e 0E94 0000 		call __xprintf
 305:../../common/command.c ****             print_val_hex8(keyboard_idle);
 614               		.loc 1 305 0
 615 0152 8091 0000 		lds r24,keyboard_protocol
 616 0156 1F92      		push __zero_reg__
 617               	.LCFI12:
 618               		.cfi_def_cfa_offset 8
 619 0158 8F93      		push r24
 620               	.LCFI13:
 621               		.cfi_def_cfa_offset 9
 622 015a 80E0      		ldi r24,lo8(__c.4884)
 623 015c 90E0      		ldi r25,hi8(__c.4884)
 624 015e 9F93      		push r25
 625               	.LCFI14:
 626               		.cfi_def_cfa_offset 10
 627 0160 8F93      		push r24
 628               	.LCFI15:
 629               		.cfi_def_cfa_offset 11
 630 0162 0E94 0000 		call __xprintf
 306:../../common/command.c **** #ifdef PROTOCOL_PJRC
 631               		.loc 1 306 0
 632 0166 8091 0000 		lds r24,keyboard_idle
 633 016a 1F92      		push __zero_reg__
 634               	.LCFI16:
 635               		.cfi_def_cfa_offset 12
 636 016c 8F93      		push r24
 637               	.LCFI17:
 638               		.cfi_def_cfa_offset 13
 639 016e 80E0      		ldi r24,lo8(__c.4886)
 640 0170 90E0      		ldi r25,hi8(__c.4886)
 641 0172 9F93      		push r25
 642               	.LCFI18:
 643               		.cfi_def_cfa_offset 14
 644 0174 8F93      		push r24
 645               	.LCFI19:
 646               		.cfi_def_cfa_offset 15
 647 0176 0E94 0000 		call __xprintf
 648 017a 8DB7      		in r24,__SP_L__
 649 017c 9EB7      		in r25,__SP_H__
 650 017e 0C96      		adiw r24,12
 651 0180 0FB6      		in __tmp_reg__,__SREG__
 652 0182 F894      		cli
 653 0184 9EBF      		out __SP_H__,r25
 654 0186 0FBE      		out __SREG__,__tmp_reg__
 655 0188 8DBF      		out __SP_L__,r24
 656               	.LCFI20:
 657               		.cfi_def_cfa_offset 3
 658 018a 00C0      		rjmp .L44
 659               	.L47:
 323:../../common/command.c ****             keyboard_nkro = !keyboard_nkro;
 660               		.loc 1 323 0
 661 018c 0E94 0000 		call clear_keyboard
 324:../../common/command.c ****             if (keyboard_nkro)
 662               		.loc 1 324 0
 663 0190 9091 0000 		lds r25,keyboard_nkro
 664 0194 81E0      		ldi r24,lo8(1)
 665 0196 8927      		eor r24,r25
 666 0198 8093 0000 		sts keyboard_nkro,r24
 667 019c 00C0      		rjmp .L44
 668               	.L55:
 343:../../common/command.c ****             _delay_ms(100);
 669               		.loc 1 343 0
 670 019e 81E8      		ldi r24,lo8(-127)
 671 01a0 90E0      		ldi r25,0
 672 01a2 0E94 0000 		call host_system_send
 673               	.LBB44:
 674               	.LBB45:
 675               		.loc 2 163 0
 676 01a6 9FEF      		ldi r25,lo8(319999)
 677 01a8 21EE      		ldi r18,hi8(319999)
 678 01aa 84E0      		ldi r24,hlo8(319999)
 679 01ac 9150      		1: subi r25,1
 680 01ae 2040      		sbci r18,0
 681 01b0 8040      		sbci r24,0
 682 01b2 01F4      		brne 1b
 683 01b4 00C0      		rjmp .
 684 01b6 0000      		nop
 685               	.LBE45:
 686               	.LBE44:
 345:../../common/command.c ****             _delay_ms(500);
 687               		.loc 1 345 0
 688 01b8 80E0      		ldi r24,0
 689 01ba 90E0      		ldi r25,0
 690 01bc 0E94 0000 		call host_system_send
 691               	.LBB46:
 692               	.LBB47:
 693               		.loc 2 163 0
 694 01c0 9FEF      		ldi r25,lo8(1599999)
 695 01c2 29E6      		ldi r18,hi8(1599999)
 696 01c4 88E1      		ldi r24,hlo8(1599999)
 697 01c6 9150      		1: subi r25,1
 698 01c8 2040      		sbci r18,0
 699 01ca 8040      		sbci r24,0
 700 01cc 01F4      		brne 1b
 701 01ce 00C0      		rjmp .
 702 01d0 0000      		nop
 703 01d2 00C0      		rjmp .L44
 704               	.L52:
 705               	.LBE47:
 706               	.LBE46:
 707               	.LBB48:
 708               	.LBB49:
 519:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 520:../../common/command.c ****             break;
 521:../../common/command.c ****     }
 522:../../common/command.c **** }
 523:../../common/command.c **** 
 524:../../common/command.c **** static void mousekey_console_help(void)
 525:../../common/command.c **** {
 526:../../common/command.c ****     print("\n\n----- Mousekey Parameters Help -----\n");
 527:../../common/command.c ****     print("ESC/q:	quit\n");
 528:../../common/command.c ****     print("1:	select mk_delay(*10ms)\n");
 529:../../common/command.c ****     print("2:	select mk_interval(ms)\n");
 530:../../common/command.c ****     print("3:	select mk_max_speed\n");
 531:../../common/command.c ****     print("4:	select mk_time_to_max\n");
 532:../../common/command.c ****     print("5:	select mk_wheel_max_speed\n");
 533:../../common/command.c ****     print("6:	select mk_wheel_time_to_max\n");
 534:../../common/command.c ****     print("p:	print prameters\n");
 535:../../common/command.c ****     print("d:	set default values\n");
 536:../../common/command.c ****     print("up:	increase prameters(+1)\n");
 537:../../common/command.c ****     print("down:	decrease prameters(-1)\n");
 538:../../common/command.c ****     print("pgup:	increase prameters(+10)\n");
 539:../../common/command.c ****     print("pgdown:	decrease prameters(-10)\n");
 540:../../common/command.c ****     print("\nspeed = delta * max_speed * (repeat / time_to_max)\n");
 541:../../common/command.c ****     print("where delta: cursor="); pdec(MOUSEKEY_MOVE_DELTA);
 542:../../common/command.c ****     print(", wheel="); pdec(MOUSEKEY_WHEEL_DELTA); print("\n");
 543:../../common/command.c ****     print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
 544:../../common/command.c **** }
 545:../../common/command.c **** 
 546:../../common/command.c **** static bool mousekey_console(uint8_t code)
 547:../../common/command.c **** {
 548:../../common/command.c ****     switch (code) {
 549:../../common/command.c ****         case KC_H:
 550:../../common/command.c ****         case KC_SLASH: /* ? */
 551:../../common/command.c ****             mousekey_console_help();
 552:../../common/command.c ****             break;
 553:../../common/command.c ****         case KC_Q:
 554:../../common/command.c ****         case KC_ESC:
 555:../../common/command.c ****             mousekey_param = 0;
 556:../../common/command.c ****             print("\nQuit Mousekey Console\n");
 557:../../common/command.c ****             print("C> ");
 558:../../common/command.c ****             state = CONSOLE;
 559:../../common/command.c ****             return false;
 560:../../common/command.c ****         case KC_P:
 561:../../common/command.c ****             mousekey_param_print();
 562:../../common/command.c ****             break;
 563:../../common/command.c ****         case KC_1:
 564:../../common/command.c ****         case KC_2:
 565:../../common/command.c ****         case KC_3:
 566:../../common/command.c ****         case KC_4:
 567:../../common/command.c ****         case KC_5:
 568:../../common/command.c ****         case KC_6:
 569:../../common/command.c ****         case KC_7:
 570:../../common/command.c ****         case KC_8:
 571:../../common/command.c ****         case KC_9:
 572:../../common/command.c ****         case KC_0:
 573:../../common/command.c ****             mousekey_param = numkey2num(code);
 574:../../common/command.c ****             print("selected parameter: "); pdec(mousekey_param); print("\n");
 575:../../common/command.c ****             break;
 576:../../common/command.c ****         case KC_UP:
 577:../../common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 578:../../common/command.c ****             break;
 579:../../common/command.c ****         case KC_DOWN:
 580:../../common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 581:../../common/command.c ****             break;
 582:../../common/command.c ****         case KC_PGUP:
 583:../../common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 584:../../common/command.c ****             break;
 585:../../common/command.c ****         case KC_PGDN:
 586:../../common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 587:../../common/command.c ****             break;
 588:../../common/command.c ****         case KC_D:
 589:../../common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 590:../../common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 591:../../common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 592:../../common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 593:../../common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 594:../../common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 595:../../common/command.c ****             print("set default values.\n");
 596:../../common/command.c ****             break;
 597:../../common/command.c ****         default:
 598:../../common/command.c ****             print("?");
 599:../../common/command.c ****             return false;
 600:../../common/command.c ****     }
 601:../../common/command.c ****     print("M"); pdec(mousekey_param); print("> ");
 602:../../common/command.c ****     return true;
 603:../../common/command.c **** }
 604:../../common/command.c **** #endif
 605:../../common/command.c **** 
 606:../../common/command.c **** 
 607:../../common/command.c **** /***********************************************************
 608:../../common/command.c ****  * Utilities
 609:../../common/command.c ****  ***********************************************************/
 610:../../common/command.c **** static uint8_t numkey2num(uint8_t code)
 611:../../common/command.c **** {
 612:../../common/command.c ****     switch (code) {
 613:../../common/command.c ****         case KC_1: return 1;
 614:../../common/command.c ****         case KC_2: return 2;
 615:../../common/command.c ****         case KC_3: return 3;
 616:../../common/command.c ****         case KC_4: return 4;
 617:../../common/command.c ****         case KC_5: return 5;
 618:../../common/command.c ****         case KC_6: return 6;
 619:../../common/command.c ****         case KC_7: return 7;
 620:../../common/command.c ****         case KC_8: return 8;
 621:../../common/command.c ****         case KC_9: return 9;
 622:../../common/command.c ****         case KC_0: return 0;
 623:../../common/command.c ****     }
 624:../../common/command.c ****     return 0;
 625:../../common/command.c **** }
 626:../../common/command.c **** 
 627:../../common/command.c **** static void switch_default_layer(uint8_t layer)
 628:../../common/command.c **** {
 629:../../common/command.c ****     print("switch_default_layer: "); print_dec(biton32(default_layer_state));
 630:../../common/command.c ****     print(" to "); print_dec(layer); print("\n");
 631:../../common/command.c ****     default_layer_set(1UL<<layer);
 709               		.loc 1 631 0
 710 01d4 61E0      		ldi r22,lo8(1)
 711 01d6 70E0      		ldi r23,0
 712 01d8 80E0      		ldi r24,0
 713 01da 90E0      		ldi r25,0
 714 01dc 00C0      		rjmp .L98
 715               	.L51:
 716               	.LBE49:
 717               	.LBE48:
 356:../../common/command.c ****             break;
 718               		.loc 1 356 0
 719 01de CD51      		subi r28,lo8(-(-29))
 720 01e0 00C0      		rjmp .L97
 721               	.L54:
 359:../../common/command.c ****             break;
 722               		.loc 1 359 0
 723 01e2 C953      		subi r28,lo8(-(-57))
 724               	.L97:
 725               	.LBB50:
 726               	.LBB51:
 727               		.loc 1 631 0
 728 01e4 81E0      		ldi r24,lo8(1)
 729 01e6 90E0      		ldi r25,0
 730 01e8 A0E0      		ldi r26,0
 731 01ea B0E0      		ldi r27,0
 732 01ec BC01      		movw r22,r24
 733 01ee CD01      		movw r24,r26
 734 01f0 00C0      		rjmp 2f
 735               		1:
 736 01f2 660F      		lsl r22
 737 01f4 771F      		rol r23
 738 01f6 881F      		rol r24
 739 01f8 991F      		rol r25
 740               		2:
 741 01fa CA95      		dec r28
 742 01fc 02F4      		brpl 1b
 743               	.L98:
 744 01fe 0E94 0000 		call default_layer_set
 632:../../common/command.c ****     clear_keyboard();
 745               		.loc 1 632 0
 746 0202 0E94 0000 		call clear_keyboard
 747 0206 00C0      		rjmp .L44
 748               	.L74:
 749               	.LBE51:
 750               	.LBE50:
 751               	.LBE39:
 752               	.LBE38:
  76:../../common/command.c ****         case CONSOLE:
 753               		.loc 1 76 0
 754 0208 80E0      		ldi r24,0
 755               	.L39:
  76:../../common/command.c ****         case CONSOLE:
 756               		.loc 1 76 0 is_stmt 0 discriminator 6
 757 020a 8170      		andi r24,lo8(1)
 758 020c 00C0      		rjmp .L93
 759               	.L35:
 760               	.LBB52:
 761               	.LBB53:
 383:../../common/command.c ****         case KC_H:
 762               		.loc 1 383 0 is_stmt 1
 763 020e 8431      		cpi r24,lo8(20)
 764 0210 01F0      		breq .L60
 765 0212 8932      		cpi r24,lo8(41)
 766 0214 01F0      		breq .L60
 767 0216 8031      		cpi r24,lo8(16)
 768 0218 01F0      		breq .+2
 769 021a 00C0      		rjmp .L76
 398:../../common/command.c ****             return true;
 770               		.loc 1 398 0
 771 021c 82E0      		ldi r24,lo8(2)
 772 021e 8093 0000 		sts state,r24
 773 0222 00C0      		rjmp .L76
 774               	.L60:
 391:../../common/command.c ****             return false;
 775               		.loc 1 391 0
 776 0224 1092 0000 		sts state,__zero_reg__
 777 0228 00C0      		rjmp .L76
 778               	.L37:
 779               	.LBE53:
 780               	.LBE52:
 781               	.LBB54:
 782               	.LBB55:
 548:../../common/command.c ****         case KC_H:
 783               		.loc 1 548 0
 784 022a 8932      		cpi r24,lo8(41)
 785 022c 01F0      		breq .L62
 786 022e 00F4      		brsh .L63
 787 0230 8431      		cpi r24,lo8(20)
 788 0232 01F0      		breq .L62
 789 0234 00F4      		brsh .L64
 790 0236 8730      		cpi r24,lo8(7)
 791 0238 01F0      		breq .+2
 792 023a 00C0      		rjmp .L76
 589:../../common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 793               		.loc 1 589 0
 794 023c 8EE1      		ldi r24,lo8(30)
 795 023e 8093 0000 		sts mk_delay,r24
 590:../../common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 796               		.loc 1 590 0
 797 0242 82E3      		ldi r24,lo8(50)
 798 0244 8093 0000 		sts mk_interval,r24
 591:../../common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 799               		.loc 1 591 0
 800 0248 8AE0      		ldi r24,lo8(10)
 801 024a 8093 0000 		sts mk_max_speed,r24
 592:../../common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 802               		.loc 1 592 0
 803 024e 84E1      		ldi r24,lo8(20)
 804 0250 8093 0000 		sts mk_time_to_max,r24
 593:../../common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 805               		.loc 1 593 0
 806 0254 88E0      		ldi r24,lo8(8)
 807 0256 8093 0000 		sts mk_wheel_max_speed,r24
 594:../../common/command.c ****             print("set default values.\n");
 808               		.loc 1 594 0
 809 025a 88E2      		ldi r24,lo8(40)
 810 025c 8093 0000 		sts mk_wheel_time_to_max,r24
 811 0260 00C0      		rjmp .L76
 812               	.L64:
 548:../../common/command.c ****         case KC_H:
 813               		.loc 1 548 0
 814 0262 CE51      		subi r28,lo8(-(-30))
 815 0264 CA30      		cpi r28,lo8(10)
 816 0266 00F4      		brsh .L76
 817 0268 EC2F      		mov r30,r28
 818 026a F0E0      		ldi r31,0
 819 026c E050      		subi r30,lo8(-(CSWTCH.45))
 820 026e F040      		sbci r31,hi8(-(CSWTCH.45))
 573:../../common/command.c ****             print("selected parameter: "); pdec(mousekey_param); print("\n");
 821               		.loc 1 573 0
 822 0270 8081      		ld r24,Z
 823 0272 8093 0000 		sts mousekey_param,r24
 824 0276 00C0      		rjmp .L76
 825               	.L63:
 548:../../common/command.c ****         case KC_H:
 826               		.loc 1 548 0
 827 0278 8E34      		cpi r24,lo8(78)
 828 027a 01F0      		breq .L67
 829 027c 00F4      		brsh .L68
 830 027e 8B34      		cpi r24,lo8(75)
 831 0280 01F4      		brne .L76
 583:../../common/command.c ****             break;
 832               		.loc 1 583 0
 833 0282 6AE0      		ldi r22,lo8(10)
 834 0284 00C0      		rjmp .L102
 835               	.L68:
 548:../../common/command.c ****         case KC_H:
 836               		.loc 1 548 0
 837 0286 8135      		cpi r24,lo8(81)
 838 0288 01F0      		breq .L70
 839 028a 8235      		cpi r24,lo8(82)
 840 028c 01F4      		brne .L76
 577:../../common/command.c ****             break;
 841               		.loc 1 577 0
 842 028e 61E0      		ldi r22,lo8(1)
 843 0290 00C0      		rjmp .L102
 844               	.L62:
 555:../../common/command.c ****             print("\nQuit Mousekey Console\n");
 845               		.loc 1 555 0
 846 0292 1092 0000 		sts mousekey_param,__zero_reg__
 558:../../common/command.c ****             return false;
 847               		.loc 1 558 0
 848 0296 81E0      		ldi r24,lo8(1)
 849 0298 8093 0000 		sts state,r24
 850 029c 00C0      		rjmp .L93
 851               	.L70:
 580:../../common/command.c ****             break;
 852               		.loc 1 580 0
 853 029e 61E0      		ldi r22,lo8(1)
 854 02a0 00C0      		rjmp .L101
 855               	.L102:
 583:../../common/command.c ****             break;
 856               		.loc 1 583 0
 857 02a2 8091 0000 		lds r24,mousekey_param
 858 02a6 0E94 0000 		call mousekey_param_inc
 859 02aa 00C0      		rjmp .L76
 860               	.L67:
 586:../../common/command.c ****             break;
 861               		.loc 1 586 0
 862 02ac 6AE0      		ldi r22,lo8(10)
 863               	.L101:
 864 02ae 8091 0000 		lds r24,mousekey_param
 865 02b2 0E94 0000 		call mousekey_param_dec
 866 02b6 00C0      		rjmp .L76
 867               	.L103:
 868               	.LBE55:
 869               	.LBE54:
  86:../../common/command.c ****             return false;
 870               		.loc 1 86 0
 871 02b8 1092 0000 		sts state,__zero_reg__
 872               	.L72:
  75:../../common/command.c ****             return (command_extra(code) || command_common(code));
 873               		.loc 1 75 0
 874 02bc 80E0      		ldi r24,0
 875 02be 00C0      		rjmp .L93
 876               	.L76:
  89:../../common/command.c **** }
 877               		.loc 1 89 0
 878 02c0 81E0      		ldi r24,lo8(1)
 879 02c2 00C0      		rjmp .L93
 880               	.L44:
  76:../../common/command.c ****         case CONSOLE:
 881               		.loc 1 76 0
 882 02c4 81E0      		ldi r24,lo8(1)
 883 02c6 00C0      		rjmp .L39
 884               	.L93:
 885               	/* epilogue start */
  90:../../common/command.c **** 
 886               		.loc 1 90 0
 887 02c8 CF91      		pop r28
 888 02ca 0895      		ret
 889               		.cfi_endproc
 890               	.LFE102:
 892               		.section	.rodata
 895               	CSWTCH.45:
 896 0000 01        		.byte	1
 897 0001 02        		.byte	2
 898 0002 03        		.byte	3
 899 0003 04        		.byte	4
 900 0004 05        		.byte	5
 901 0005 06        		.byte	6
 902 0006 07        		.byte	7
 903 0007 08        		.byte	8
 904 0008 09        		.byte	9
 905 0009 00        		.byte	0
 906               		.section	.progmem.data,"a",@progbits
 909               	__c.4886:
 910 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 910      6F61 7264 
 910      5F69 646C 
 910      653A 2025 
 910      580A 00
 913               	__c.4884:
 914 0013 6B65 7962 		.string	"keyboard_protocol: %X\n"
 914      6F61 7264 
 914      5F70 726F 
 914      746F 636F 
 914      6C3A 2025 
 917               	__c.4882:
 918 002a 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 918      5F6B 6579 
 918      626F 6172 
 918      645F 6C65 
 918      6473 2829 
 921               	__c.4879:
 922 0044 7469 6D65 		.string	"timer_count: %04lX\n"
 922      725F 636F 
 922      756E 743A 
 922      2025 3034 
 922      6C58 0A00 
 923               		.local	host_driver.4865
 924               		.comm	host_driver.4865,2,1
 925               		.local	mousekey_param
 926               		.comm	mousekey_param,1,1
 927               		.local	state
 928               		.comm	state,1,1
 929               		.comm	mk_wheel_time_to_max,1,1
 930               		.comm	mk_wheel_max_speed,1,1
 931               		.comm	mk_time_to_max,1,1
 932               		.comm	mk_max_speed,1,1
 933               		.comm	mk_interval,1,1
 934               		.comm	mk_delay,1,1
 935               		.comm	keymap_config,1,1
 936               		.text
 937               	.Letext0:
 938               		.file 3 "/usr/local/Cellar/avr-gcc/4.9.2/avr/include/stdint.h"
 939               		.file 4 "../../common/report.h"
 940               		.file 5 "../../common/host_driver.h"
 941               		.file 6 "../../common/keymap.h"
 942               		.file 7 "../../common/debug_config.h"
 943               		.file 8 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 944               		.file 9 "../../common/host.h"
 945               		.file 10 "../../common/timer.h"
 946               		.file 11 "../../common/action_util.h"
 947               		.file 12 "../../common/mousekey.h"
 948               		.file 13 "../../common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:4      *ABS*:000000000000003f __SREG__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:12     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
                            *COM*:0000000000000001 mk_delay
                            *COM*:0000000000000001 mk_interval
                            *COM*:0000000000000001 mk_max_speed
                            *COM*:0000000000000001 mk_time_to_max
                            *COM*:0000000000000001 mk_wheel_max_speed
                            *COM*:0000000000000001 mk_wheel_time_to_max
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:182    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:302    .text.command_extra:0000000000000000 command_extra
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:321    .text.command_proc:0000000000000000 command_proc
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:926    .bss:0000000000000003 state
                             .bss:0000000000000000 host_driver.4865
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:921    .progmem.data:0000000000000044 __c.4879
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:917    .progmem.data:000000000000002a __c.4882
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:913    .progmem.data:0000000000000013 __c.4884
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:909    .progmem.data:0000000000000000 __c.4886
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:895    .rodata:0000000000000000 CSWTCH.45
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//ccGxykkb.s:924    .bss:0000000000000002 mousekey_param
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
keyboard_report
__tablejump2__
eeconfig_read_debug
eeconfig_read_keymap
host_get_driver
host_set_driver
debug_config
clear_keyboard
bootloader_jump
timer_count
__xprintf
host_keyboard_leds
keyboard_protocol
keyboard_idle
keyboard_nkro
host_system_send
default_layer_set
__do_copy_data
__do_clear_bss
