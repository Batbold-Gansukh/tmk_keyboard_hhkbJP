   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_keycode,"ax",@progbits
  12               	scan_keycode:
  13               	.LFB103:
  14               		.file 1 "../../common/bootmagic.c"
   1:../../common/bootmagic.c **** #include <stdint.h>
   2:../../common/bootmagic.c **** #include <stdbool.h>
   3:../../common/bootmagic.c **** #include <util/delay.h>
   4:../../common/bootmagic.c **** #include "matrix.h"
   5:../../common/bootmagic.c **** #include "bootloader.h"
   6:../../common/bootmagic.c **** #include "debug.h"
   7:../../common/bootmagic.c **** #include "keymap.h"
   8:../../common/bootmagic.c **** #include "host.h"
   9:../../common/bootmagic.c **** #include "action_layer.h"
  10:../../common/bootmagic.c **** #include "eeconfig.h"
  11:../../common/bootmagic.c **** #include "bootmagic.h"
  12:../../common/bootmagic.c **** 
  13:../../common/bootmagic.c **** 
  14:../../common/bootmagic.c **** void bootmagic(void)
  15:../../common/bootmagic.c **** {
  16:../../common/bootmagic.c ****     /* check signature */
  17:../../common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  18:../../common/bootmagic.c ****         eeconfig_init();
  19:../../common/bootmagic.c ****     }
  20:../../common/bootmagic.c **** 
  21:../../common/bootmagic.c ****     /* do scans in case of bounce */
  22:../../common/bootmagic.c ****     print("boogmagic scan: ... ");
  23:../../common/bootmagic.c ****     uint8_t scan = 100;
  24:../../common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
  25:../../common/bootmagic.c ****     print("done.\n");
  26:../../common/bootmagic.c **** 
  27:../../common/bootmagic.c ****     /* bootmagic skip */
  28:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
  29:../../common/bootmagic.c ****         return;
  30:../../common/bootmagic.c ****     }
  31:../../common/bootmagic.c **** 
  32:../../common/bootmagic.c ****     /* eeconfig clear */
  33:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  34:../../common/bootmagic.c ****         eeconfig_init();
  35:../../common/bootmagic.c ****     }
  36:../../common/bootmagic.c **** 
  37:../../common/bootmagic.c ****     /* bootloader */
  38:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
  39:../../common/bootmagic.c ****         bootloader_jump();
  40:../../common/bootmagic.c ****     }
  41:../../common/bootmagic.c **** 
  42:../../common/bootmagic.c ****     /* debug enable */
  43:../../common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  44:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  45:../../common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  46:../../common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  47:../../common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  48:../../common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  49:../../common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  50:../../common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  51:../../common/bootmagic.c ****         } else {
  52:../../common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  53:../../common/bootmagic.c ****         }
  54:../../common/bootmagic.c ****     }
  55:../../common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  56:../../common/bootmagic.c **** 
  57:../../common/bootmagic.c ****     /* keymap config */
  58:../../common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  59:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  60:../../common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  61:../../common/bootmagic.c ****     }
  62:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  63:../../common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  64:../../common/bootmagic.c ****     }
  65:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  66:../../common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  67:../../common/bootmagic.c ****     }
  68:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  69:../../common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  70:../../common/bootmagic.c ****     }
  71:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
  72:../../common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  73:../../common/bootmagic.c ****     }
  74:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  75:../../common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  76:../../common/bootmagic.c ****     }
  77:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  78:../../common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  79:../../common/bootmagic.c ****     }
  80:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
  81:../../common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  82:../../common/bootmagic.c ****     }
  83:../../common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  84:../../common/bootmagic.c **** 
  85:../../common/bootmagic.c **** #ifdef NKRO_ENABLE
  86:../../common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  87:../../common/bootmagic.c **** #endif
  88:../../common/bootmagic.c **** 
  89:../../common/bootmagic.c ****     /* default layer */
  90:../../common/bootmagic.c ****     uint8_t default_layer = 0;
  91:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  92:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  93:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
  94:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
  95:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
  96:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
  97:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
  98:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
  99:../../common/bootmagic.c ****     if (default_layer) {
 100:../../common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 101:../../common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 102:../../common/bootmagic.c ****     } else {
 103:../../common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 104:../../common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 105:../../common/bootmagic.c ****     }
 106:../../common/bootmagic.c **** }
 107:../../common/bootmagic.c **** 
 108:../../common/bootmagic.c **** static bool scan_keycode(uint8_t keycode)
 109:../../common/bootmagic.c **** {
  15               		.loc 1 109 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 EF92      		push r14
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 14, -2
  22 0002 FF92      		push r15
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 15, -3
  26 0004 0F93      		push r16
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 16, -4
  30 0006 1F93      		push r17
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 17, -5
  34 0008 CF93      		push r28
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 28, -6
  38 000a DF93      		push r29
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 29, -7
  42               	/* prologue: function */
  43               	/* frame size = 0 */
  44               	/* stack size = 6 */
  45               	.L__stack_usage = 6
  46 000c D82F      		mov r29,r24
  47               	.LVL1:
  48               	.LBB4:
 110:../../common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  49               		.loc 1 110 0
  50 000e C0E0      		ldi r28,0
  51               	.LVL2:
  52               	.L7:
  53               	.LBB5:
 111:../../common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  54               		.loc 1 111 0
  55 0010 8C2F      		mov r24,r28
  56 0012 0E94 0000 		call matrix_get_row
  57               	.LVL3:
  58 0016 00E0      		ldi r16,0
  59 0018 10E0      		ldi r17,0
  60               	.LBB6:
 112:../../common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 113:../../common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  61               		.loc 1 113 0
  62 001a E82E      		mov r14,r24
  63 001c F12C      		mov r15,__zero_reg__
  64               	.LVL4:
  65               	.L3:
  66 001e C701      		movw r24,r14
  67 0020 002E      		mov r0,r16
  68 0022 00C0      		rjmp 2f
  69               		1:
  70 0024 9595      		asr r25
  71 0026 8795      		ror r24
  72               		2:
  73 0028 0A94      		dec r0
  74 002a 02F4      		brpl 1b
  75 002c 80FD      		sbrc r24,0
  76 002e 00C0      		rjmp .L2
  77               	.L6:
  78               	.LVL5:
  79 0030 0F5F      		subi r16,-1
  80 0032 1F4F      		sbci r17,-1
  81               	.LVL6:
 112:../../common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
  82               		.loc 1 112 0
  83 0034 0830      		cpi r16,8
  84 0036 1105      		cpc r17,__zero_reg__
  85 0038 01F4      		brne .L3
  86 003a 00C0      		rjmp .L13
  87               	.L2:
 114:../../common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (key_t){ .row = r, .col = c })) {
  88               		.loc 1 114 0
  89 003c 602F      		mov r22,r16
  90 003e 7C2F      		mov r23,r28
  91 0040 80E0      		ldi r24,0
  92 0042 0E94 0000 		call keymap_key_to_keycode
  93               	.LVL7:
  94 0046 D813      		cpse r29,r24
  95 0048 00C0      		rjmp .L6
 115:../../common/bootmagic.c ****                     return true;
  96               		.loc 1 115 0
  97 004a 81E0      		ldi r24,lo8(1)
  98 004c 00C0      		rjmp .L5
  99               	.L13:
 100               	.LBE6:
 101               	.LBE5:
 110:../../common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 102               		.loc 1 110 0 discriminator 2
 103 004e CF5F      		subi r28,lo8(-(1))
 104               	.LVL8:
 105 0050 C031      		cpi r28,lo8(16)
 106 0052 01F4      		brne .L7
 107               	.LBE4:
 116:../../common/bootmagic.c ****                 }
 117:../../common/bootmagic.c ****             }
 118:../../common/bootmagic.c ****         }
 119:../../common/bootmagic.c ****     }
 120:../../common/bootmagic.c ****     return false;
 108               		.loc 1 120 0
 109 0054 80E0      		ldi r24,0
 110               	.LVL9:
 111               	.L5:
 112               	/* epilogue start */
 121:../../common/bootmagic.c **** }
 113               		.loc 1 121 0
 114 0056 DF91      		pop r29
 115               	.LVL10:
 116 0058 CF91      		pop r28
 117               	.LVL11:
 118 005a 1F91      		pop r17
 119 005c 0F91      		pop r16
 120 005e FF90      		pop r15
 121 0060 EF90      		pop r14
 122               	.LVL12:
 123 0062 0895      		ret
 124               		.cfi_endproc
 125               	.LFE103:
 127               		.section	.text.bootmagic_scan_keycode,"ax",@progbits
 128               	.global	bootmagic_scan_keycode
 130               	bootmagic_scan_keycode:
 131               	.LFB104:
 122:../../common/bootmagic.c **** 
 123:../../common/bootmagic.c **** bool bootmagic_scan_keycode(uint8_t keycode)
 124:../../common/bootmagic.c **** {
 132               		.loc 1 124 0
 133               		.cfi_startproc
 134               	.LVL13:
 135 0000 CF93      		push r28
 136               	.LCFI6:
 137               		.cfi_def_cfa_offset 3
 138               		.cfi_offset 28, -2
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 1 */
 142               	.L__stack_usage = 1
 143 0002 C82F      		mov r28,r24
 125:../../common/bootmagic.c ****     if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
 144               		.loc 1 125 0
 145 0004 86EC      		ldi r24,lo8(-58)
 146               	.LVL14:
 147 0006 0E94 0000 		call scan_keycode
 148               	.LVL15:
 149 000a 8823      		tst r24
 150 000c 01F0      		breq .L15
 126:../../common/bootmagic.c **** 
 127:../../common/bootmagic.c ****     return scan_keycode(keycode);
 151               		.loc 1 127 0
 152 000e 8C2F      		mov r24,r28
 153               	/* epilogue start */
 128:../../common/bootmagic.c **** }
 154               		.loc 1 128 0
 155 0010 CF91      		pop r28
 156               	.LVL16:
 127:../../common/bootmagic.c **** }
 157               		.loc 1 127 0
 158 0012 0C94 0000 		jmp scan_keycode
 159               	.LVL17:
 160               	.L15:
 161               		.loc 1 128 0
 162 0016 80E0      		ldi r24,0
 163               	/* epilogue start */
 164 0018 CF91      		pop r28
 165               	.LVL18:
 166 001a 0895      		ret
 167               		.cfi_endproc
 168               	.LFE104:
 170               		.section	.text.bootmagic,"ax",@progbits
 171               	.global	bootmagic
 173               	bootmagic:
 174               	.LFB102:
  15:../../common/bootmagic.c ****     /* check signature */
 175               		.loc 1 15 0
 176               		.cfi_startproc
 177 0000 CF93      		push r28
 178               	.LCFI7:
 179               		.cfi_def_cfa_offset 3
 180               		.cfi_offset 28, -2
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 1 */
 184               	.L__stack_usage = 1
  17:../../common/bootmagic.c ****         eeconfig_init();
 185               		.loc 1 17 0
 186 0002 0E94 0000 		call eeconfig_is_enabled
 187               	.LVL19:
 188 0006 8111      		cpse r24,__zero_reg__
 189 0008 00C0      		rjmp .L17
  18:../../common/bootmagic.c ****     }
 190               		.loc 1 18 0
 191 000a 0E94 0000 		call eeconfig_init
 192               	.LVL20:
 193               	.L17:
  15:../../common/bootmagic.c ****     /* check signature */
 194               		.loc 1 15 0 discriminator 1
 195 000e C5E6      		ldi r28,lo8(101)
 196               	.L18:
 197               	.LVL21:
 198 0010 C150      		subi r28,lo8(-(-1))
 199               	.LVL22:
  24:../../common/bootmagic.c ****     print("done.\n");
 200               		.loc 1 24 0 discriminator 1
 201 0012 01F0      		breq .L98
 202               	.LVL23:
  24:../../common/bootmagic.c ****     print("done.\n");
 203               		.loc 1 24 0 is_stmt 0 discriminator 2
 204 0014 0E94 0000 		call matrix_scan
 205               	.LVL24:
 206               	.LBB7:
 207               	.LBB8:
 208               		.file 2 "/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #endif
  41:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  42:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  46:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /** \file */
  47:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     \code
  49:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     \endcode
  53:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  54:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     used.
  58:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  59:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  68:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  77:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  81:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** */
  82:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #endif
  87:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  88:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #endif
  93:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  94:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #endif
  97:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
  98:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #endif
 103:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 104:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** /**
 105:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 107:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 109:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 112:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 114:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 120:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 125:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 132:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 140:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****  */
 141:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** void
 142:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** {
 144:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 155:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 158:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	#else
 159:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	#endif
 162:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 
 163:/usr/local/Cellar/avr-gcc/4.9.2/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 209               		.loc 2 163 0 is_stmt 1 discriminator 2
 210 0018 8FE3      		ldi r24,lo8(-25537)
 211 001a 9CE9      		ldi r25,hi8(-25537)
 212 001c 0197      		1: sbiw r24,1
 213 001e 01F4      		brne 1b
 214 0020 00C0      		rjmp .
 215 0022 0000      		nop
 216 0024 00C0      		rjmp .L18
 217               	.LVL25:
 218               	.L98:
 219               	.LBE8:
 220               	.LBE7:
  28:../../common/bootmagic.c ****         return;
 221               		.loc 1 28 0
 222 0026 89E2      		ldi r24,lo8(41)
 223 0028 0E94 0000 		call bootmagic_scan_keycode
 224               	.LVL26:
 225 002c 8111      		cpse r24,__zero_reg__
 226 002e 00C0      		rjmp .L16
  33:../../common/bootmagic.c ****         eeconfig_init();
 227               		.loc 1 33 0
 228 0030 8AE2      		ldi r24,lo8(42)
 229 0032 0E94 0000 		call bootmagic_scan_keycode
 230               	.LVL27:
 231 0036 8111      		cpse r24,__zero_reg__
  34:../../common/bootmagic.c ****     }
 232               		.loc 1 34 0
 233 0038 0E94 0000 		call eeconfig_init
 234               	.LVL28:
 235               	.L21:
  38:../../common/bootmagic.c ****         bootloader_jump();
 236               		.loc 1 38 0
 237 003c 85E0      		ldi r24,lo8(5)
 238 003e 0E94 0000 		call bootmagic_scan_keycode
 239               	.LVL29:
 240 0042 8111      		cpse r24,__zero_reg__
  39:../../common/bootmagic.c ****     }
 241               		.loc 1 39 0
 242 0044 0E94 0000 		call bootloader_jump
 243               	.LVL30:
 244               	.L22:
  43:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 245               		.loc 1 43 0
 246 0048 0E94 0000 		call eeconfig_read_debug
 247               	.LVL31:
 248 004c 8093 0000 		sts debug_config,r24
  44:../../common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 249               		.loc 1 44 0
 250 0050 87E0      		ldi r24,lo8(7)
 251 0052 0E94 0000 		call bootmagic_scan_keycode
 252               	.LVL32:
 253 0056 8823      		tst r24
 254 0058 01F0      		breq .L23
  45:../../common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 255               		.loc 1 45 0
 256 005a 8BE1      		ldi r24,lo8(27)
 257 005c 0E94 0000 		call bootmagic_scan_keycode
 258               	.LVL33:
 259 0060 8823      		tst r24
 260 0062 01F0      		breq .L24
  46:../../common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 261               		.loc 1 46 0
 262 0064 8091 0000 		lds r24,debug_config
 263 0068 81FB      		bst r24,1
 264 006a 2227      		clr r18
 265 006c 20F9      		bld r18,0
 266 006e 91E0      		ldi r25,lo8(1)
 267 0070 9227      		eor r25,r18
 268 0072 90FB      		bst r25,0
 269 0074 81F9      		bld r24,1
 270 0076 00C0      		rjmp .L95
 271               	.L24:
  47:../../common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 272               		.loc 1 47 0
 273 0078 8EE0      		ldi r24,lo8(14)
 274 007a 0E94 0000 		call bootmagic_scan_keycode
 275               	.LVL34:
 276 007e 8823      		tst r24
 277 0080 01F0      		breq .L25
  48:../../common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 278               		.loc 1 48 0
 279 0082 8091 0000 		lds r24,debug_config
 280 0086 82FB      		bst r24,2
 281 0088 2227      		clr r18
 282 008a 20F9      		bld r18,0
 283 008c 91E0      		ldi r25,lo8(1)
 284 008e 9227      		eor r25,r18
 285 0090 90FB      		bst r25,0
 286 0092 82F9      		bld r24,2
 287               	.L95:
 288 0094 8093 0000 		sts debug_config,r24
 289 0098 00C0      		rjmp .L23
 290               	.L25:
  49:../../common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 291               		.loc 1 49 0
 292 009a 80E1      		ldi r24,lo8(16)
 293 009c 0E94 0000 		call bootmagic_scan_keycode
 294               	.LVL35:
 295 00a0 9091 0000 		lds r25,debug_config
 296 00a4 8823      		tst r24
 297 00a6 01F0      		breq .L26
  50:../../common/bootmagic.c ****         } else {
 298               		.loc 1 50 0
 299 00a8 93FB      		bst r25,3
 300 00aa 2227      		clr r18
 301 00ac 20F9      		bld r18,0
 302 00ae 81E0      		ldi r24,lo8(1)
 303 00b0 8227      		eor r24,r18
 304 00b2 80FB      		bst r24,0
 305 00b4 93F9      		bld r25,3
 306 00b6 00C0      		rjmp .L96
 307               	.L26:
  52:../../common/bootmagic.c ****         }
 308               		.loc 1 52 0
 309 00b8 892F      		mov r24,r25
 310 00ba 8095      		com r24
 311 00bc 80FB      		bst r24,0
 312 00be 90F9      		bld r25,0
 313               	.L96:
 314 00c0 9093 0000 		sts debug_config,r25
 315               	.L23:
  55:../../common/bootmagic.c **** 
 316               		.loc 1 55 0
 317 00c4 8091 0000 		lds r24,debug_config
 318 00c8 0E94 0000 		call eeconfig_write_debug
 319               	.LVL36:
  58:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 320               		.loc 1 58 0
 321 00cc 0E94 0000 		call eeconfig_read_keymap
 322               	.LVL37:
 323 00d0 8093 0000 		sts keymap_config,r24
  59:../../common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 324               		.loc 1 59 0
 325 00d4 80EE      		ldi r24,lo8(-32)
 326 00d6 0E94 0000 		call bootmagic_scan_keycode
 327               	.LVL38:
 328 00da 8823      		tst r24
 329 00dc 01F0      		breq .L27
  60:../../common/bootmagic.c ****     }
 330               		.loc 1 60 0
 331 00de 8091 0000 		lds r24,keymap_config
 332 00e2 982F      		mov r25,r24
 333 00e4 9095      		com r25
 334 00e6 90FB      		bst r25,0
 335 00e8 80F9      		bld r24,0
 336 00ea 8093 0000 		sts keymap_config,r24
 337               	.L27:
  62:../../common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 338               		.loc 1 62 0
 339 00ee 89E3      		ldi r24,lo8(57)
 340 00f0 0E94 0000 		call bootmagic_scan_keycode
 341               	.LVL39:
 342 00f4 8823      		tst r24
 343 00f6 01F0      		breq .L28
  63:../../common/bootmagic.c ****     }
 344               		.loc 1 63 0
 345 00f8 8091 0000 		lds r24,keymap_config
 346 00fc 81FB      		bst r24,1
 347 00fe 2227      		clr r18
 348 0100 20F9      		bld r18,0
 349 0102 91E0      		ldi r25,lo8(1)
 350 0104 9227      		eor r25,r18
 351 0106 90FB      		bst r25,0
 352 0108 81F9      		bld r24,1
 353 010a 8093 0000 		sts keymap_config,r24
 354               	.L28:
  65:../../common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 355               		.loc 1 65 0
 356 010e 82EE      		ldi r24,lo8(-30)
 357 0110 0E94 0000 		call bootmagic_scan_keycode
 358               	.LVL40:
 359 0114 8823      		tst r24
 360 0116 01F0      		breq .L29
  66:../../common/bootmagic.c ****     }
 361               		.loc 1 66 0
 362 0118 8091 0000 		lds r24,keymap_config
 363 011c 82FB      		bst r24,2
 364 011e 2227      		clr r18
 365 0120 20F9      		bld r18,0
 366 0122 91E0      		ldi r25,lo8(1)
 367 0124 9227      		eor r25,r18
 368 0126 90FB      		bst r25,0
 369 0128 82F9      		bld r24,2
 370 012a 8093 0000 		sts keymap_config,r24
 371               	.L29:
  68:../../common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 372               		.loc 1 68 0
 373 012e 86EE      		ldi r24,lo8(-26)
 374 0130 0E94 0000 		call bootmagic_scan_keycode
 375               	.LVL41:
 376 0134 8823      		tst r24
 377 0136 01F0      		breq .L30
  69:../../common/bootmagic.c ****     }
 378               		.loc 1 69 0
 379 0138 8091 0000 		lds r24,keymap_config
 380 013c 83FB      		bst r24,3
 381 013e 2227      		clr r18
 382 0140 20F9      		bld r18,0
 383 0142 91E0      		ldi r25,lo8(1)
 384 0144 9227      		eor r25,r18
 385 0146 90FB      		bst r25,0
 386 0148 83F9      		bld r24,3
 387 014a 8093 0000 		sts keymap_config,r24
 388               	.L30:
  71:../../common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 389               		.loc 1 71 0
 390 014e 83EE      		ldi r24,lo8(-29)
 391 0150 0E94 0000 		call bootmagic_scan_keycode
 392               	.LVL42:
 393 0154 8823      		tst r24
 394 0156 01F0      		breq .L31
  72:../../common/bootmagic.c ****     }
 395               		.loc 1 72 0
 396 0158 8091 0000 		lds r24,keymap_config
 397 015c 84FB      		bst r24,4
 398 015e 2227      		clr r18
 399 0160 20F9      		bld r18,0
 400 0162 91E0      		ldi r25,lo8(1)
 401 0164 9227      		eor r25,r18
 402 0166 90FB      		bst r25,0
 403 0168 84F9      		bld r24,4
 404 016a 8093 0000 		sts keymap_config,r24
 405               	.L31:
  74:../../common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 406               		.loc 1 74 0
 407 016e 85E3      		ldi r24,lo8(53)
 408 0170 0E94 0000 		call bootmagic_scan_keycode
 409               	.LVL43:
 410 0174 8823      		tst r24
 411 0176 01F0      		breq .L32
  75:../../common/bootmagic.c ****     }
 412               		.loc 1 75 0
 413 0178 8091 0000 		lds r24,keymap_config
 414 017c 85FB      		bst r24,5
 415 017e 2227      		clr r18
 416 0180 20F9      		bld r18,0
 417 0182 91E0      		ldi r25,lo8(1)
 418 0184 9227      		eor r25,r18
 419 0186 90FB      		bst r25,0
 420 0188 85F9      		bld r24,5
 421 018a 8093 0000 		sts keymap_config,r24
 422               	.L32:
  77:../../common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 423               		.loc 1 77 0
 424 018e 81E3      		ldi r24,lo8(49)
 425 0190 0E94 0000 		call bootmagic_scan_keycode
 426               	.LVL44:
 427 0194 8823      		tst r24
 428 0196 01F0      		breq .L33
  78:../../common/bootmagic.c ****     }
 429               		.loc 1 78 0
 430 0198 8091 0000 		lds r24,keymap_config
 431 019c 86FB      		bst r24,6
 432 019e 2227      		clr r18
 433 01a0 20F9      		bld r18,0
 434 01a2 91E0      		ldi r25,lo8(1)
 435 01a4 9227      		eor r25,r18
 436 01a6 90FB      		bst r25,0
 437 01a8 86F9      		bld r24,6
 438 01aa 8093 0000 		sts keymap_config,r24
 439               	.L33:
  80:../../common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 440               		.loc 1 80 0
 441 01ae 81E1      		ldi r24,lo8(17)
 442 01b0 0E94 0000 		call bootmagic_scan_keycode
 443               	.LVL45:
 444 01b4 8823      		tst r24
 445 01b6 01F0      		breq .L34
  81:../../common/bootmagic.c ****     }
 446               		.loc 1 81 0
 447 01b8 8091 0000 		lds r24,keymap_config
 448 01bc 87FB      		bst r24,7
 449 01be 2227      		clr r18
 450 01c0 20F9      		bld r18,0
 451 01c2 91E0      		ldi r25,lo8(1)
 452 01c4 9227      		eor r25,r18
 453 01c6 90FB      		bst r25,0
 454 01c8 87F9      		bld r24,7
 455 01ca 8093 0000 		sts keymap_config,r24
 456               	.L34:
  83:../../common/bootmagic.c **** 
 457               		.loc 1 83 0
 458 01ce 8091 0000 		lds r24,keymap_config
 459 01d2 0E94 0000 		call eeconfig_write_keymap
 460               	.LVL46:
  86:../../common/bootmagic.c **** #endif
 461               		.loc 1 86 0
 462 01d6 8091 0000 		lds r24,keymap_config
 463 01da 87FB      		bst r24,7
 464 01dc 8827      		clr r24
 465 01de 80F9      		bld r24,0
 466 01e0 8093 0000 		sts keyboard_nkro,r24
 467               	.LVL47:
  91:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 468               		.loc 1 91 0
 469 01e4 87E2      		ldi r24,lo8(39)
 470 01e6 0E94 0000 		call bootmagic_scan_keycode
 471               	.LVL48:
 472 01ea C82F      		mov r28,r24
 473               	.LVL49:
  92:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 474               		.loc 1 92 0
 475 01ec 8EE1      		ldi r24,lo8(30)
 476               	.LVL50:
 477 01ee 0E94 0000 		call bootmagic_scan_keycode
 478               	.LVL51:
 479 01f2 8111      		cpse r24,__zero_reg__
  92:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 480               		.loc 1 92 0 is_stmt 0 discriminator 1
 481 01f4 C260      		ori r28,lo8(2)
 482               	.LVL52:
 483               	.L35:
  93:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 484               		.loc 1 93 0 is_stmt 1
 485 01f6 8FE1      		ldi r24,lo8(31)
 486 01f8 0E94 0000 		call bootmagic_scan_keycode
 487               	.LVL53:
 488 01fc 8111      		cpse r24,__zero_reg__
  93:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 489               		.loc 1 93 0 is_stmt 0 discriminator 1
 490 01fe C460      		ori r28,lo8(4)
 491               	.LVL54:
 492               	.L36:
  94:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 493               		.loc 1 94 0 is_stmt 1
 494 0200 80E2      		ldi r24,lo8(32)
 495 0202 0E94 0000 		call bootmagic_scan_keycode
 496               	.LVL55:
 497 0206 8111      		cpse r24,__zero_reg__
  94:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 498               		.loc 1 94 0 is_stmt 0 discriminator 1
 499 0208 C860      		ori r28,lo8(8)
 500               	.LVL56:
 501               	.L37:
  95:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 502               		.loc 1 95 0 is_stmt 1
 503 020a 81E2      		ldi r24,lo8(33)
 504 020c 0E94 0000 		call bootmagic_scan_keycode
 505               	.LVL57:
 506 0210 8111      		cpse r24,__zero_reg__
  95:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 507               		.loc 1 95 0 is_stmt 0 discriminator 1
 508 0212 C061      		ori r28,lo8(16)
 509               	.LVL58:
 510               	.L38:
  96:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 511               		.loc 1 96 0 is_stmt 1
 512 0214 82E2      		ldi r24,lo8(34)
 513 0216 0E94 0000 		call bootmagic_scan_keycode
 514               	.LVL59:
 515 021a 8111      		cpse r24,__zero_reg__
  96:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 516               		.loc 1 96 0 is_stmt 0 discriminator 1
 517 021c C062      		ori r28,lo8(32)
 518               	.LVL60:
 519               	.L39:
  97:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 520               		.loc 1 97 0 is_stmt 1
 521 021e 83E2      		ldi r24,lo8(35)
 522 0220 0E94 0000 		call bootmagic_scan_keycode
 523               	.LVL61:
 524 0224 8111      		cpse r24,__zero_reg__
  97:../../common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 525               		.loc 1 97 0 is_stmt 0 discriminator 1
 526 0226 C064      		ori r28,lo8(64)
 527               	.LVL62:
 528               	.L40:
  98:../../common/bootmagic.c ****     if (default_layer) {
 529               		.loc 1 98 0 is_stmt 1
 530 0228 84E2      		ldi r24,lo8(36)
 531 022a 0E94 0000 		call bootmagic_scan_keycode
 532               	.LVL63:
 533 022e 8823      		tst r24
 534 0230 01F0      		breq .L41
  98:../../common/bootmagic.c ****     if (default_layer) {
 535               		.loc 1 98 0 is_stmt 0 discriminator 1
 536 0232 C068      		ori r28,lo8(-128)
 537               	.LVL64:
 538 0234 00C0      		rjmp .L42
 539               	.L41:
  99:../../common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 540               		.loc 1 99 0 is_stmt 1
 541 0236 CC23      		tst r28
 542 0238 01F0      		breq .L43
 543               	.L42:
 100:../../common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 544               		.loc 1 100 0
 545 023a 8C2F      		mov r24,r28
 546 023c 0E94 0000 		call eeconfig_write_default_layer
 547               	.LVL65:
 101:../../common/bootmagic.c ****     } else {
 548               		.loc 1 101 0
 549 0240 6C2F      		mov r22,r28
 550 0242 00C0      		rjmp .L97
 551               	.L43:
 103:../../common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 552               		.loc 1 103 0
 553 0244 0E94 0000 		call eeconfig_read_default_layer
 554               	.LVL66:
 104:../../common/bootmagic.c ****     }
 555               		.loc 1 104 0
 556 0248 682F      		mov r22,r24
 557               	.LVL67:
 558               	.L97:
 559 024a 70E0      		ldi r23,0
 560 024c 80E0      		ldi r24,0
 561 024e 90E0      		ldi r25,0
 562               	/* epilogue start */
 106:../../common/bootmagic.c **** 
 563               		.loc 1 106 0
 564 0250 CF91      		pop r28
 104:../../common/bootmagic.c ****     }
 565               		.loc 1 104 0
 566 0252 0C94 0000 		jmp default_layer_set
 567               	.LVL68:
 568               	.L16:
 569               	/* epilogue start */
 106:../../common/bootmagic.c **** 
 570               		.loc 1 106 0
 571 0256 CF91      		pop r28
 572               	.LVL69:
 573 0258 0895      		ret
 574               		.cfi_endproc
 575               	.LFE102:
 577               		.comm	keymap_config,1,1
 578               		.text
 579               	.Letext0:
 580               		.file 3 "/usr/local/Cellar/avr-gcc/4.9.2/avr/include/stdint.h"
 581               		.file 4 "../../common/matrix.h"
 582               		.file 5 "../../common/debug_config.h"
 583               		.file 6 "../../common/keyboard.h"
 584               		.file 7 "../../common/keycode.h"
 585               		.file 8 "../../common/keymap.h"
 586               		.file 9 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 587               		.file 10 "../../common/host.h"
 588               		.file 11 "../../common/eeconfig.h"
 589               		.file 12 "../../common/bootloader.h"
 590               		.file 13 "../../common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cctM5Ahi.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cctM5Ahi.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cctM5Ahi.s:4      *ABS*:000000000000003f __SREG__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cctM5Ahi.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cctM5Ahi.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cctM5Ahi.s:12     .text.scan_keycode:0000000000000000 scan_keycode
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cctM5Ahi.s:130    .text.bootmagic_scan_keycode:0000000000000000 bootmagic_scan_keycode
/var/folders/67/vcrp0s4s10x_6hfx2yflxzbc0000gn/T//cctM5Ahi.s:173    .text.bootmagic:0000000000000000 bootmagic
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
keymap_key_to_keycode
eeconfig_is_enabled
eeconfig_init
matrix_scan
bootloader_jump
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
